"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gsap";
exports.ids = ["vendor-chunks/gsap"];
exports.modules = {

/***/ "(ssr)/./node_modules/gsap/CSSPlugin.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/CSSPlugin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CSSPlugin: () => (/* binding */ CSSPlugin),\n/* harmony export */   _createElement: () => (/* binding */ _createElement),\n/* harmony export */   _getBBox: () => (/* binding */ _getBBox),\n/* harmony export */   checkPrefix: () => (/* binding */ _checkPropPrefix),\n/* harmony export */   \"default\": () => (/* binding */ CSSPlugin)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/*!\n * CSSPlugin 3.12.5\n * https://gsap.com\n *\n * Copyright 2008-2024, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ \nvar _win, _doc, _docElement, _pluginInitted, _tempDiv, _tempDivStyler, _recentSetterPlugin, _reverting, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _transformProps = {}, _RAD2DEG = 180 / Math.PI, _DEG2RAD = Math.PI / 180, _atan2 = Math.atan2, _bigNum = 1e8, _capsExp = /([A-Z])/g, _horizontalExp = /(left|right|width|margin|padding|x)/i, _complexExp = /[\\s,\\(]\\S/, _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n}, _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n}, _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n}, //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)\n_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n}, _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n}, _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n}, _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n}, _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n}, _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n}, _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n}, _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n}, _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n}, _transformProp = \"transform\", _transformOriginProp = _transformProp + \"Origin\", _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n    var target = this.target, style = target.style, cache = target._gsap;\n    if (property in _transformProps && style) {\n        this.tfm = this.tfm || {};\n        if (property !== \"transform\") {\n            property = _propertyAliases[property] || property;\n            ~property.indexOf(\",\") ? property.split(\",\").forEach(function(a) {\n                return _this.tfm[a] = _get(target, a);\n            }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to \"scaleX,scaleY\", thus we loop and apply them both.\n            property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);\n        } else {\n            return _propertyAliases.transform.split(\",\").forEach(function(p) {\n                return _saveStyle.call(_this, p, isNotCSS);\n            });\n        }\n        if (this.props.indexOf(_transformProp) >= 0) {\n            return;\n        }\n        if (cache.svg) {\n            this.svgo = target.getAttribute(\"data-svg-origin\");\n            this.props.push(_transformOriginProp, isNotCSS, \"\");\n        }\n        property = _transformProp;\n    }\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n}, _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n        style.removeProperty(\"translate\");\n        style.removeProperty(\"scale\");\n        style.removeProperty(\"rotate\");\n    }\n}, _revertStyle = function _revertStyle() {\n    var props = this.props, target = this.target, style = target.style, cache = target._gsap, i, p;\n    for(i = 0; i < props.length; i += 3){\n        // stored like this: property, isNotCSS, value\n        props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n    if (this.tfm) {\n        for(p in this.tfm){\n            cache[p] = this.tfm[p];\n        }\n        if (cache.svg) {\n            cache.renderTransform();\n            target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n        }\n        i = _reverting();\n        if ((!i || !i.isStart) && !style[_transformProp]) {\n            _removeIndependentTransforms(style);\n            if (cache.zOrigin && style[_transformOriginProp]) {\n                style[_transformOriginProp] += \" \" + cache.zOrigin + \"px\"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.\n                cache.zOrigin = 0;\n                cache.renderTransform();\n            }\n            cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.\n        }\n    }\n}, _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n        target: target,\n        props: [],\n        revert: _revertStyle,\n        save: _saveStyle\n    };\n    target._gsap || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.\n    properties && properties.split(\",\").forEach(function(p) {\n        return saver.save(p);\n    });\n    return saver;\n}, _supports3D, _createElement = function _createElement(type, ns) {\n    var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n    return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n}, _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\"; //css variables may not need caps swapped out for dashes and lowercase.\n}, _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"), _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv, s = e.style, i = 5;\n    if (property in s && !preferPrefix) {\n        return property;\n    }\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n    while(i-- && !(_prefixes[i] + property in s)){}\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n}, _initCore = function _initCore() {\n    if (_windowExists() && window.document) {\n        _win = window;\n        _doc = _win.document;\n        _docElement = _doc.documentElement;\n        _tempDiv = _createElement(\"div\") || {\n            style: {}\n        };\n        _tempDivStyler = _createElement(\"div\");\n        _transformProp = _checkPropPrefix(_transformProp);\n        _transformOriginProp = _transformProp + \"Origin\";\n        _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.\n        _supports3D = !!_checkPropPrefix(\"perspective\");\n        _reverting = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.reverting;\n        _pluginInitted = 1;\n    }\n}, _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;\n    _docElement.appendChild(svg);\n    svg.appendChild(this);\n    this.style.display = \"block\";\n    if (swapIfPossible) {\n        try {\n            bbox = this.getBBox();\n            this._gsapBBox = this.getBBox; //store the original\n            this.getBBox = _getBBoxHack;\n        } catch (e) {}\n    } else if (this._gsapBBox) {\n        bbox = this._gsapBBox();\n    }\n    if (oldParent) {\n        if (oldSibling) {\n            oldParent.insertBefore(this, oldSibling);\n        } else {\n            oldParent.appendChild(this);\n        }\n    }\n    _docElement.removeChild(svg);\n    this.style.cssText = oldCSS;\n    return bbox;\n}, _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n    while(i--){\n        if (target.hasAttribute(attributesArray[i])) {\n            return target.getAttribute(attributesArray[i]);\n        }\n    }\n}, _getBBox = function _getBBox(target) {\n    var bounds;\n    try {\n        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n    } catch (error) {\n        bounds = _getBBoxHack.call(target, true);\n    }\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n        x: +_getAttributeFallbacks(target, [\n            \"x\",\n            \"cx\",\n            \"x1\"\n        ]) || 0,\n        y: +_getAttributeFallbacks(target, [\n            \"y\",\n            \"cy\",\n            \"y1\"\n        ]) || 0,\n        width: 0,\n        height: 0\n    } : bounds;\n}, _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n}, //reports if the element is an SVG on which getBBox() actually works\n_removeProperty = function _removeProperty(target, property) {\n    if (property) {\n        var style = target.style, first2Chars;\n        if (property in _transformProps && property !== _transformOriginProp) {\n            property = _transformProp;\n        }\n        if (style.removeProperty) {\n            first2Chars = property.substr(0, 2);\n            if (first2Chars === \"ms\" || property.substr(0, 6) === \"webkit\") {\n                //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n                property = \"-\" + property;\n            }\n            style.removeProperty(first2Chars === \"--\" ? property : property.replace(_capsExp, \"-$1\").toLowerCase());\n        } else {\n            //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n            style.removeAttribute(property);\n        }\n    }\n}, _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n    plugin._props.push(property);\n    return pt;\n}, _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n}, _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n}, //takes a single value like 20px and converts it to the unit specified, like \"%\", returning only the numeric amount.\n_convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0, curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()\n    style = _tempDiv.style, horizontal = _horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === \"svg\", measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"), amount = 100, toPixels = unit === \"px\", toPercent = unit === \"%\", px, parent, cache, isSVG;\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n        return curValue;\n    }\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n        px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n    if (isSVG) {\n        parent = (target.ownerSVGElement || {}).parentNode;\n    }\n    if (!parent || parent === _doc || !parent.appendChild) {\n        parent = _doc.body;\n    }\n    cache = parent._gsap;\n    if (cache && toPercent && cache.width && horizontal && cache.time === _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time && !cache.uncache) {\n        return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(curValue / cache.width * amount);\n    } else {\n        if (toPercent && (property === \"height\" || property === \"width\")) {\n            // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.\n            var v = target.style[property];\n            target.style[property] = amount + unit;\n            px = target[measureProperty];\n            v ? target.style[property] = v : _removeProperty(target, property);\n        } else {\n            (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n            parent === target && (style.position = \"static\"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.\n            parent.appendChild(_tempDiv);\n            px = _tempDiv[measureProperty];\n            parent.removeChild(_tempDiv);\n            style.position = \"absolute\";\n        }\n        if (horizontal && toPercent) {\n            cache = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(parent);\n            cache.time = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._ticker.time;\n            cache.width = parent[measureProperty];\n        }\n    }\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n}, _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n    if (property in _propertyAliases && property !== \"transform\") {\n        property = _propertyAliases[property];\n        if (~property.indexOf(\",\")) {\n            property = property.split(\",\")[0];\n        }\n    }\n    if (_transformProps[property] && property !== \"transform\") {\n        value = _parseTransform(target, uncache);\n        value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n        value = target.style[property];\n        if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n            value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getProperty)(target, property) || (property === \"opacity\" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius\n        }\n    }\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n}, _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    if (!start || start === \"none\") {\n        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style (\"clipPath\" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as \"none\" whereas WebkitClipPath reports accurately like \"ellipse(100% 0% at 50% 0%)\", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/\n        var p = _checkPropPrefix(prop, target, 1), s = p && _getComputedProperty(target, p, 1);\n        if (s && s !== start) {\n            prop = p;\n            start = s;\n        } else if (prop === \"borderColor\") {\n            start = _getComputedProperty(target, \"borderTopColor\"); // Firefox bug: always reports \"borderColor\" as \"\", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/\n        }\n    }\n    var pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, target.style, prop, 0, 1, _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._renderComplexString), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; // ensure values are strings\n    end += \"\";\n    if (end === \"auto\") {\n        startValue = target.style[prop];\n        target.style[prop] = end;\n        end = _getComputedProperty(target, prop) || end;\n        startValue ? target.style[prop] = startValue : _removeProperty(target, prop);\n    }\n    a = [\n        start,\n        end\n    ];\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorStringFilter)(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    endValues = end.match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp) || [];\n    if (endValues.length) {\n        while(result = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.exec(end)){\n            endValue = result[0];\n            chunk = end.substring(index, result.index);\n            if (color) {\n                color = (color + 1) % 5;\n            } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n                color = 1;\n            }\n            if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n                startNum = parseFloat(startValue) || 0;\n                startUnit = startValue.substr((startNum + \"\").length);\n                endValue.charAt(1) === \"=\" && (endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, endValue) + startUnit);\n                endNum = parseFloat(endValue);\n                endUnit = endValue.substr((endNum + \"\").length);\n                index = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numWithUnitExp.lastIndex - endUnit.length;\n                if (!endUnit) {\n                    //if something like \"perspective:300\" is passed in and we must add a unit to the end\n                    endUnit = endUnit || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[prop] || startUnit;\n                    if (index === end.length) {\n                        end += endUnit;\n                        pt.e += endUnit;\n                    }\n                }\n                if (startUnit !== endUnit) {\n                    startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n                } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n                pt._pt = {\n                    _next: pt._pt,\n                    p: chunk || matchIndex === 1 ? chunk : \",\",\n                    //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                    s: startNum,\n                    c: endNum - startNum,\n                    m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n                };\n            }\n        }\n        pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    } else {\n        pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n}, _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"), x = split[0], y = split[1] || \"50%\";\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n        //the user provided them in the wrong order, so flip them\n        value = x;\n        x = y;\n        y = value;\n    }\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n}, _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n        var target = data.t, style = target.style, props = data.u, cache = target._gsap, prop, clearTransforms, i;\n        if (props === \"all\" || props === true) {\n            style.cssText = \"\";\n            clearTransforms = 1;\n        } else {\n            props = props.split(\",\");\n            i = props.length;\n            while(--i > -1){\n                prop = props[i];\n                if (_transformProps[prop]) {\n                    clearTransforms = 1;\n                    prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n                }\n                _removeProperty(target, prop);\n            }\n        }\n        if (clearTransforms) {\n            _removeProperty(target, _transformProp);\n            if (cache) {\n                cache.svg && target.removeAttribute(\"transform\");\n                _parseTransform(target, 1); // force all the cached values back to \"normal\"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.\n                cache.uncache = 1;\n                _removeIndependentTransforms(style);\n            }\n        }\n    }\n}, // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.\n_specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n        if (tween.data !== \"isFromStart\") {\n            var pt = plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n            pt.u = endValue;\n            pt.pr = -10;\n            pt.tween = tween;\n            plugin._props.push(property);\n            return 1;\n        }\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TRANSFORMS\n * --------------------------------------------------------------------------------------\n */ _identity2DMatrix = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n], _rotationalProperties = {}, _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n}, _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._numExp).map(_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round);\n}, _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getCache)(target), style = target.style, matrix = _getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;\n    if (cache.svg && target.getAttribute(\"transform\")) {\n        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n        matrix = [\n            temp.a,\n            temp.b,\n            temp.c,\n            temp.d,\n            temp.e,\n            temp.f\n        ];\n        return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n        temp = style.display;\n        style.display = \"block\";\n        parent = target.parentNode;\n        if (!parent || !target.offsetParent) {\n            // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375\n            addedToDOM = 1; //flag\n            nextSibling = target.nextElementSibling;\n            _docElement.appendChild(target); //we must add it to the DOM in order to get values properly\n        }\n        matrix = _getComputedTransformMatrixAsArray(target);\n        temp ? style.display = temp : _removeProperty(target, \"display\");\n        if (addedToDOM) {\n            nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n        }\n    }\n    return force2D && matrix.length > 6 ? [\n        matrix[0],\n        matrix[1],\n        matrix[4],\n        matrix[5],\n        matrix[12],\n        matrix[13]\n    ] : matrix;\n}, _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap, matrix = matrixArray || _getMatrix(target, true), xOriginOld = cache.xOrigin || 0, yOriginOld = cache.yOrigin || 0, xOffsetOld = cache.xOffset || 0, yOffsetOld = cache.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(\" \"), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;\n    if (!originIsAbsolute) {\n        bounds = _getBBox(target);\n        xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin); // if (!(\"xOrigin\" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration\n    // \txOrigin -= bounds.x;\n    // \tyOrigin -= bounds.y;\n    // }\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n        xOrigin = x;\n        yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.\n    }\n    if (smooth || smooth !== false && cache.smooth) {\n        tx = xOrigin - xOriginOld;\n        ty = yOrigin - yOriginOld;\n        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n        cache.xOffset = cache.yOffset = 0;\n    }\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).\n    if (pluginToAddPropTweensTo) {\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n        _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n}, _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.GSCache(target);\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n        return cache;\n    }\n    var style = target.style, invertedScaleX = cache.scaleX < 0, px = \"px\", deg = \"deg\", cs = getComputedStyle(target), origin = _getComputedProperty(target, _transformOriginProp) || \"0\", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n    if (cs.translate) {\n        // accommodate independent transforms by combining them into normal ones.\n        if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n            style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n        }\n        style.scale = style.rotate = style.translate = \"none\";\n    }\n    matrix = _getMatrix(target, cache.svg);\n    if (cache.svg) {\n        if (cache.uncache) {\n            // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + \"px \" + (cache.yOrigin - bbox.y) + \"px\". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.\n            t2 = target.getBBox();\n            origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n            t1 = \"\";\n        } else {\n            t1 = !uncache && target.getAttribute(\"data-svg-origin\"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.\n        }\n        _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n    if (matrix !== _identity2DMatrix) {\n        a = matrix[0]; //a11\n        b = matrix[1]; //a21\n        c = matrix[2]; //a31\n        d = matrix[3]; //a41\n        x = a12 = matrix[4];\n        y = a22 = matrix[5]; //2D matrix\n        if (matrix.length === 6) {\n            scaleX = Math.sqrt(a * a + b * b);\n            scaleY = Math.sqrt(d * d + c * c);\n            rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n            skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n            skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n            if (cache.svg) {\n                x -= xOrigin - (xOrigin * a + yOrigin * c);\n                y -= yOrigin - (xOrigin * b + yOrigin * d);\n            } //3D matrix\n        } else {\n            a32 = matrix[6];\n            a42 = matrix[7];\n            a13 = matrix[8];\n            a23 = matrix[9];\n            a33 = matrix[10];\n            a43 = matrix[11];\n            x = matrix[12];\n            y = matrix[13];\n            z = matrix[14];\n            angle = _atan2(a32, a33);\n            rotationX = angle * _RAD2DEG; //rotationX\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a12 * cos + a13 * sin;\n                t2 = a22 * cos + a23 * sin;\n                t3 = a32 * cos + a33 * sin;\n                a13 = a12 * -sin + a13 * cos;\n                a23 = a22 * -sin + a23 * cos;\n                a33 = a32 * -sin + a33 * cos;\n                a43 = a42 * -sin + a43 * cos;\n                a12 = t1;\n                a22 = t2;\n                a32 = t3;\n            } //rotationY\n            angle = _atan2(-c, a33);\n            rotationY = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(-angle);\n                sin = Math.sin(-angle);\n                t1 = a * cos - a13 * sin;\n                t2 = b * cos - a23 * sin;\n                t3 = c * cos - a33 * sin;\n                a43 = d * sin + a43 * cos;\n                a = t1;\n                b = t2;\n                c = t3;\n            } //rotationZ\n            angle = _atan2(b, a);\n            rotation = angle * _RAD2DEG;\n            if (angle) {\n                cos = Math.cos(angle);\n                sin = Math.sin(angle);\n                t1 = a * cos + b * sin;\n                t2 = a12 * cos + a22 * sin;\n                b = b * cos - a * sin;\n                a22 = a22 * cos - a12 * sin;\n                a = t1;\n                a12 = t2;\n            }\n            if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n                //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n                rotationX = rotation = 0;\n                rotationY = 180 - rotationY;\n            }\n            scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a * a + b * b + c * c));\n            scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(Math.sqrt(a22 * a22 + a32 * a32));\n            angle = _atan2(a12, a22);\n            skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n            perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n        }\n        if (cache.svg) {\n            //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).\n            t1 = target.getAttribute(\"transform\");\n            cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n            t1 && target.setAttribute(\"transform\", t1);\n        }\n    }\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n        if (invertedScaleX) {\n            scaleX *= -1;\n            skewX += rotation <= 0 ? 180 : -180;\n            rotation += rotation <= 0 ? 180 : -180;\n        } else {\n            scaleY *= -1;\n            skewX += skewX <= 0 ? 180 : -180;\n        }\n    }\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleX);\n    cache.scaleY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(scaleY);\n    cache.rotation = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotation) + deg;\n    cache.rotationX = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationX) + deg;\n    cache.rotationY = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || !uncache && cache.zOrigin || 0) {\n        style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n}, _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n}, //for handling transformOrigin values, stripping out the 3rd dimension\n_addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(start);\n    return (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n}, _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n    _renderCSSTransforms(ratio, cache);\n}, _zeroDeg = \"0deg\", _zeroPx = \"0px\", _endParenthesis = \") \", _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = \"\", use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n        var angle = parseFloat(rotationY) * _DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;\n        angle = parseFloat(rotationX) * _DEG2RAD;\n        cos = Math.cos(angle);\n        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n    if (transformPerspective !== _zeroPx) {\n        transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n    if (xPercent || yPercent) {\n        transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n        transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n    if (rotation !== _zeroDeg) {\n        transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n    if (rotationY !== _zeroDeg) {\n        transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n    if (rotationX !== _zeroDeg) {\n        transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n        transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n    if (scaleX !== 1 || scaleY !== 1) {\n        transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n}, _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n    if (skewY) {\n        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n        skewY = parseFloat(skewY);\n        skewX += skewY;\n        rotation += skewY;\n    }\n    if (rotation || skewX) {\n        rotation *= _DEG2RAD;\n        skewX *= _DEG2RAD;\n        a11 = Math.cos(rotation) * scaleX;\n        a21 = Math.sin(rotation) * scaleX;\n        a12 = Math.sin(rotation - skewX) * -scaleY;\n        a22 = Math.cos(rotation - skewX) * scaleY;\n        if (skewX) {\n            skewY *= _DEG2RAD;\n            temp = Math.tan(skewX - skewY);\n            temp = Math.sqrt(1 + temp * temp);\n            a12 *= temp;\n            a22 *= temp;\n            if (skewY) {\n                temp = Math.tan(skewY);\n                temp = Math.sqrt(1 + temp * temp);\n                a11 *= temp;\n                a21 *= temp;\n            }\n        }\n        a11 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a11);\n        a21 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a21);\n        a12 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a12);\n        a22 = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(a22);\n    } else {\n        a11 = scaleX;\n        a22 = scaleY;\n        a21 = a12 = 0;\n    }\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n        tx = _convertToUnit(target, \"x\", x, \"px\");\n        ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n    if (xPercent || yPercent) {\n        //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the translation to simulate it.\n        temp = target.getBBox();\n        tx = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(tx + xPercent / 100 * temp.width);\n        ty = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._round)(ty + yPercent / 100 * temp.height);\n    }\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)\n}, _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360, isString = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(endValue), endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1), change = endNum - startNum, finalValue = startNum + change + \"deg\", direction, pt;\n    if (isString) {\n        direction = endValue.split(\"_\")[1];\n        if (direction === \"short\") {\n            change %= cap;\n            if (change !== change % (cap / 2)) {\n                change += change < 0 ? cap : -cap;\n            }\n        }\n        if (direction === \"cw\" && change < 0) {\n            change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;\n        } else if (direction === \"ccw\" && change > 0) {\n            change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;\n        }\n    }\n    plugin._pt = pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n    plugin._props.push(property);\n    return pt;\n}, _assign = function _assign(target, source) {\n    // Internet Explorer doesn't have Object.assign(), so we recreate it here.\n    for(var p in source){\n        target[p] = source[p];\n    }\n    return target;\n}, _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    //for handling cases where someone passes in a whole transform string, like transform: \"scale(2, 3) rotate(20deg) translateY(30em)\"\n    var startCache = _assign({}, target._gsap), exclude = \"perspective,force3D,transformOrigin,svgOrigin\", style = target.style, endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;\n    if (startCache.svg) {\n        startValue = target.getAttribute(\"transform\");\n        target.setAttribute(\"transform\", \"\");\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        _removeProperty(target, _transformProp);\n        target.setAttribute(\"transform\", startValue);\n    } else {\n        startValue = getComputedStyle(target)[_transformProp];\n        style[_transformProp] = transforms;\n        endCache = _parseTransform(target, 1);\n        style[_transformProp] = startValue;\n    }\n    for(p in _transformProps){\n        startValue = startCache[p];\n        endValue = endCache[p];\n        if (startValue !== endValue && exclude.indexOf(p) < 0) {\n            //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n            startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n            endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n            startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n            endNum = parseFloat(endValue);\n            plugin._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n            plugin._pt.u = endUnit || 0;\n            plugin._props.push(p);\n        }\n    }\n    _assign(endCache, startCache);\n}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"padding,margin,Width,Radius\", function(name, index) {\n    var t = \"Top\", r = \"Right\", b = \"Bottom\", l = \"Left\", props = (index < 3 ? [\n        t,\n        r,\n        b,\n        l\n    ] : [\n        t + l,\n        t + r,\n        b + r,\n        b + l\n    ]).map(function(side) {\n        return index < 2 ? name + side : \"border\" + side + name;\n    });\n    _specialProps[index > 1 ? \"border\" + name : name] = function(plugin, target, property, endValue, tween) {\n        var a, vars;\n        if (arguments.length < 4) {\n            // getter, passed target, property, and unit (from _get())\n            a = props.map(function(prop) {\n                return _get(plugin, prop, property);\n            });\n            vars = a.join(\" \");\n            return vars.split(a[0]).length === 5 ? a[0] : vars;\n        }\n        a = (endValue + \"\").split(\" \");\n        vars = {};\n        props.forEach(function(prop, i) {\n            return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n        });\n        plugin.init(target, vars, tween);\n    };\n});\nvar CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n        return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n        var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority, inlineProps;\n        _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps\n        this.styles = this.styles || _getStyleSaver(target);\n        inlineProps = this.styles.props;\n        this.tween = tween;\n        for(p in vars){\n            if (p === \"autoRound\") {\n                continue;\n            }\n            endValue = vars[p];\n            if (_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._plugins[p] && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._checkPlugin)(p, vars, tween, index, target, targets)) {\n                continue;\n            }\n            type = typeof endValue;\n            specialProp = _specialProps[p];\n            if (type === \"function\") {\n                endValue = endValue.call(tween, index, target, targets);\n                type = typeof endValue;\n            }\n            if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n                endValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(endValue);\n            }\n            if (specialProp) {\n                specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n            } else if (p.substr(0, 2) === \"--\") {\n                //CSS variable\n                startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n                endValue += \"\";\n                _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.lastIndex = 0;\n                if (!_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._colorExp.test(startValue)) {\n                    // colors don't have units\n                    startUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue);\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue);\n                }\n                endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n                this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n                props.push(p);\n                inlineProps.push(p, 0, style[p]);\n            } else if (type !== \"undefined\") {\n                if (startAt && p in startAt) {\n                    // in case someone hard-codes a complex value as the start, like top: \"calc(2vh / 2)\". Without this, it'd use the computed value (always in px)\n                    startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isString)(startValue) && ~startValue.indexOf(\"random(\") && (startValue = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._replaceRandom)(startValue));\n                    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(startValue + \"\") || startValue === \"auto\" || (startValue += _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] || (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(_get(target, p)) || \"\"); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.\n                    (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p)); // can't work with relative values\n                } else {\n                    startValue = _get(target, p);\n                }\n                startNum = parseFloat(startValue);\n                relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n                relative && (endValue = endValue.substr(2));\n                endNum = parseFloat(endValue);\n                if (p in _propertyAliases) {\n                    if (p === \"autoAlpha\") {\n                        //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.\n                        if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                            //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n                            startNum = 0;\n                        }\n                        inlineProps.push(\"visibility\", 0, style.visibility);\n                        _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n                    }\n                    if (p !== \"scale\" && p !== \"transform\") {\n                        p = _propertyAliases[p];\n                        ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n                    }\n                }\n                isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---\n                if (isTransformRelated) {\n                    this.styles.save(p);\n                    if (!transformPropTween) {\n                        cache = target._gsap;\n                        cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:\"translateX(50vw)\"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.\n                        smooth = vars.smoothOrigin !== false && cache.smooth;\n                        transformPropTween = this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)\n                        transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.\n                    }\n                    if (p === \"scale\") {\n                        this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n                        this._pt.u = 0;\n                        props.push(\"scaleY\", p);\n                        p += \"X\";\n                    } else if (p === \"transformOrigin\") {\n                        inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n                        endValue = _convertKeywordsToPercentages(endValue); //in case something like \"left top\" or \"bottom right\" is passed in. Convert to percentages.\n                        if (cache.svg) {\n                            _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n                        } else {\n                            endUnit = parseFloat(endValue.split(\" \")[2]) || 0; //handle the zOrigin separately!\n                            endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n                            _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n                        }\n                        continue;\n                    } else if (p === \"svgOrigin\") {\n                        _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n                        continue;\n                    } else if (p in _rotationalProperties) {\n                        _addRotationalPropTween(this, cache, p, startNum, relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endValue) : endValue);\n                        continue;\n                    } else if (p === \"smoothOrigin\") {\n                        _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n                        continue;\n                    } else if (p === \"force3D\") {\n                        cache[p] = endValue;\n                        continue;\n                    } else if (p === \"transform\") {\n                        _addRawTransformPTs(this, endValue, target);\n                        continue;\n                    }\n                } else if (!(p in style)) {\n                    p = _checkPropPrefix(p) || p;\n                }\n                if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n                    startUnit = (startValue + \"\").substr((startNum + \"\").length);\n                    endNum || (endNum = 0); // protect against NaN\n                    endUnit = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.getUnit)(endValue) || (p in _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units ? _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[p] : startUnit);\n                    startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n                    this._pt = new _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._parseRelative)(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n                    this._pt.u = endUnit || 0;\n                    if (startUnit !== endUnit && endUnit !== \"%\") {\n                        //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a \"b\" (beginning) property and point to a render method that handles that. (performance optimization)\n                        this._pt.b = startValue;\n                        this._pt.r = _renderCSSPropWithBeginning;\n                    }\n                } else if (!(p in style)) {\n                    if (p in target) {\n                        //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.\n                        this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n                    } else if (p !== \"parseTransform\") {\n                        (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._missingPlugin)(p, endValue);\n                        continue;\n                    }\n                } else {\n                    _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n                }\n                isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n                props.push(p);\n            }\n        }\n        hasPriority && (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._sortPropTweensByPriority)(this);\n    },\n    render: function render(ratio, data) {\n        if (data.tween._time || !_reverting()) {\n            var pt = data._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n        } else {\n            data.styles.revert();\n        }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like \"x\" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.\n        var p = _propertyAliases[property];\n        p && p.indexOf(\",\") < 0 && (property = p);\n        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._isUndefined)(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._getSetter)(target, property);\n    },\n    core: {\n        _removeProperty: _removeProperty,\n        _getMatrix: _getMatrix\n    }\n};\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.utils.checkPrefix = _checkPropPrefix;\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.core.getStyleSaver = _getStyleSaver;\n(function(positionAndScale, rotation, others, aliases) {\n    var all = (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(positionAndScale + \",\" + rotation + \",\" + others, function(name) {\n        _transformProps[name] = 1;\n    });\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(rotation, function(name) {\n        _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"deg\";\n        _rotationalProperties[name] = 1;\n    });\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n    (0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(aliases, function(name) {\n        var split = name.split(\":\");\n        _propertyAliases[split[1]] = all[split[0]];\n    });\n})(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n(0,_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._forEachName)(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function(name) {\n    _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__._config.units[name] = \"px\";\n});\n_gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(CSSPlugin);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/CSSPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/Draggable.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/Draggable.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Draggable: () => (/* binding */ Draggable),\n/* harmony export */   \"default\": () => (/* binding */ Draggable)\n/* harmony export */ });\n/* harmony import */ var _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/matrix.js */ \"(ssr)/./node_modules/gsap/utils/matrix.js\");\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\n/*!\n * Draggable 3.12.5\n * https://gsap.com\n *\n * @license Copyright 2008-2024, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n */ /* eslint-disable */ \nvar gsap, _win, _doc, _docElement, _body, _tempDiv, _placeholderDiv, _coreInitted, _checkPrefix, _toArray, _supportsPassive, _isTouchDevice, _touchEventLookup, _isMultiTouching, _isAndroid, InertiaPlugin, _defaultCursor, _supportsPointer, _context, _getStyleSaver, _dragCount = 0, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _getGSAP = function _getGSAP() {\n    return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n}, _emptyFunc = function _emptyFunc() {\n    return false;\n}, _transformProp = \"transform\", _transformOriginProp = \"transformOrigin\", _round = function _round(value) {\n    return Math.round(value * 10000) / 10000;\n}, _isArray = Array.isArray, _createElement = function _createElement(type, ns) {\n    var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n    return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n}, _RAD2DEG = 180 / Math.PI, _bigNum = 1e20, _identityMatrix = new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D(), _getTime = Date.now || function() {\n    return new Date().getTime();\n}, _renderQueue = [], _lookup = {}, //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.\n_lookupCount = 0, _clickableTagExp = /^(?:a|input|textarea|button|select)$/i, _lastDragTime = 0, _temp1 = {}, // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.\n_windowProxy = {}, //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.\n_copy = function _copy(obj, factor) {\n    var copy = {}, p;\n    for(p in obj){\n        copy[p] = factor ? obj[p] * factor : obj[p];\n    }\n    return copy;\n}, _extend = function _extend(obj, defaults) {\n    for(var p in defaults){\n        if (!(p in obj)) {\n            obj[p] = defaults[p];\n        }\n    }\n    return obj;\n}, _setTouchActionForAllDescendants = function _setTouchActionForAllDescendants(elements, value) {\n    var i = elements.length, children;\n    while(i--){\n        value ? elements[i].style.touchAction = value : elements[i].style.removeProperty(\"touch-action\");\n        children = elements[i].children;\n        children && children.length && _setTouchActionForAllDescendants(children, value);\n    }\n}, _renderQueueTick = function _renderQueueTick() {\n    return _renderQueue.forEach(function(func) {\n        return func();\n    });\n}, _addToRenderQueue = function _addToRenderQueue(func) {\n    _renderQueue.push(func);\n    if (_renderQueue.length === 1) {\n        gsap.ticker.add(_renderQueueTick);\n    }\n}, _renderQueueTimeout = function _renderQueueTimeout() {\n    return !_renderQueue.length && gsap.ticker.remove(_renderQueueTick);\n}, _removeFromRenderQueue = function _removeFromRenderQueue(func) {\n    var i = _renderQueue.length;\n    while(i--){\n        if (_renderQueue[i] === func) {\n            _renderQueue.splice(i, 1);\n        }\n    }\n    gsap.to(_renderQueueTimeout, {\n        overwrite: true,\n        delay: 15,\n        duration: 0,\n        onComplete: _renderQueueTimeout,\n        data: \"_draggable\"\n    }); //remove the \"tick\" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        if (!(p in obj)) {\n            obj[p] = defaults[p];\n        }\n    }\n    return obj;\n}, _addListener = function _addListener(element, type, func, capture) {\n    if (element.addEventListener) {\n        var touchType = _touchEventLookup[type];\n        capture = capture || (_supportsPassive ? {\n            passive: false\n        } : null);\n        element.addEventListener(touchType || type, func, capture);\n        touchType && type !== touchType && element.addEventListener(type, func, capture); //some browsers actually support both, so must we. But pointer events cover all.\n    }\n}, _removeListener = function _removeListener(element, type, func, capture) {\n    if (element.removeEventListener) {\n        var touchType = _touchEventLookup[type];\n        element.removeEventListener(touchType || type, func, capture);\n        touchType && type !== touchType && element.removeEventListener(type, func, capture);\n    }\n}, _preventDefault = function _preventDefault(event) {\n    event.preventDefault && event.preventDefault();\n    event.preventManipulation && event.preventManipulation(); //for some Microsoft browsers\n}, _hasTouchID = function _hasTouchID(list, ID) {\n    var i = list.length;\n    while(i--){\n        if (list[i].identifier === ID) {\n            return true;\n        }\n    }\n}, _onMultiTouchDocumentEnd = function _onMultiTouchDocumentEnd(event) {\n    _isMultiTouching = event.touches && _dragCount < event.touches.length;\n    _removeListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n}, _onMultiTouchDocument = function _onMultiTouchDocument(event) {\n    _isMultiTouching = event.touches && _dragCount < event.touches.length;\n    _addListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n}, _getDocScrollTop = function _getDocScrollTop(doc) {\n    return _win.pageYOffset || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0;\n}, _getDocScrollLeft = function _getDocScrollLeft(doc) {\n    return _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;\n}, _addScrollListener = function _addScrollListener(e, callback) {\n    _addListener(e, \"scroll\", callback);\n    if (!_isRoot(e.parentNode)) {\n        _addScrollListener(e.parentNode, callback);\n    }\n}, _removeScrollListener = function _removeScrollListener(e, callback) {\n    _removeListener(e, \"scroll\", callback);\n    if (!_isRoot(e.parentNode)) {\n        _removeScrollListener(e.parentNode, callback);\n    }\n}, _isRoot = function _isRoot(e) {\n    return !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode);\n}, _getMaxScroll = function _getMaxScroll(element, axis) {\n    var dim = axis === \"x\" ? \"Width\" : \"Height\", scroll = \"scroll\" + dim, client = \"client\" + dim;\n    return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win[\"inner\" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);\n}, _recordMaxScrolls = function _recordMaxScrolls(e, skipCurrent) {\n    //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.\n    var x = _getMaxScroll(e, \"x\"), y = _getMaxScroll(e, \"y\");\n    if (_isRoot(e)) {\n        e = _windowProxy;\n    } else {\n        _recordMaxScrolls(e.parentNode, skipCurrent);\n    }\n    e._gsMaxScrollX = x;\n    e._gsMaxScrollY = y;\n    if (!skipCurrent) {\n        e._gsScrollX = e.scrollLeft || 0;\n        e._gsScrollY = e.scrollTop || 0;\n    }\n}, _setStyle = function _setStyle(element, property, value) {\n    var style = element.style;\n    if (!style) {\n        return;\n    }\n    if (_isUndefined(style[property])) {\n        property = _checkPrefix(property, element) || property;\n    }\n    if (value == null) {\n        style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n    } else {\n        style[property] = value;\n    }\n}, _getComputedStyle = function _getComputedStyle(element) {\n    return _win.getComputedStyle(element instanceof Element ? element : element.host || (element.parentNode || {}).host || element);\n}, //the \"host\" stuff helps to accommodate ShadowDom objects.\n_tempRect = {}, //reuse to reduce garbage collection tasks\n_parseRect = function _parseRect(e) {\n    //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties\n    if (e === _win) {\n        _tempRect.left = _tempRect.top = 0;\n        _tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;\n        _tempRect.height = _tempRect.bottom = (e.innerHeight || 0) - 20 < _docElement.clientHeight ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;\n        return _tempRect;\n    }\n    var doc = e.ownerDocument || _doc, r = !_isUndefined(e.pageX) ? {\n        left: e.pageX - _getDocScrollLeft(doc),\n        top: e.pageY - _getDocScrollTop(doc),\n        right: e.pageX - _getDocScrollLeft(doc) + 1,\n        bottom: e.pageY - _getDocScrollTop(doc) + 1\n    } : !e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top) ? e : _toArray(e)[0].getBoundingClientRect();\n    if (_isUndefined(r.right) && !_isUndefined(r.width)) {\n        r.right = r.left + r.width;\n        r.bottom = r.top + r.height;\n    } else if (_isUndefined(r.width)) {\n        //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.\n        r = {\n            width: r.right - r.left,\n            height: r.bottom - r.top,\n            right: r.right,\n            left: r.left,\n            bottom: r.bottom,\n            top: r.top\n        };\n    }\n    return r;\n}, _dispatchEvent = function _dispatchEvent(target, type, callbackName) {\n    var vars = target.vars, callback = vars[callbackName], listeners = target._listeners[type], result;\n    if (_isFunction(callback)) {\n        result = callback.apply(vars.callbackScope || target, vars[callbackName + \"Params\"] || [\n            target.pointerEvent\n        ]);\n    }\n    if (listeners && target.dispatchEvent(type) === false) {\n        result = false;\n    }\n    return result;\n}, _getBounds = function _getBounds(target, context) {\n    //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.\n    var e = _toArray(target)[0], top, left, offset;\n    if (!e.nodeType && e !== _win) {\n        if (!_isUndefined(target.left)) {\n            offset = {\n                x: 0,\n                y: 0\n            }; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin\n            return {\n                left: target.left - offset.x,\n                top: target.top - offset.y,\n                width: target.width,\n                height: target.height\n            };\n        }\n        left = target.min || target.minX || target.minRotation || 0;\n        top = target.min || target.minY || 0;\n        return {\n            left: left,\n            top: top,\n            width: (target.max || target.maxX || target.maxRotation || 0) - left,\n            height: (target.max || target.maxY || 0) - top\n        };\n    }\n    return _getElementBounds(e, context);\n}, _point1 = {}, //we reuse to minimize garbage collection tasks.\n_getElementBounds = function _getElementBounds(element, context) {\n    context = _toArray(context)[0];\n    var isSVG = element.getBBox && element.ownerSVGElement, doc = element.ownerDocument || _doc, left, right, top, bottom, matrix, p1, p2, p3, p4, bbox, width, height, cs;\n    if (element === _win) {\n        top = _getDocScrollTop(doc);\n        left = _getDocScrollLeft(doc);\n        right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);\n        bottom = top + ((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.\n    } else if (context === _win || _isUndefined(context)) {\n        return element.getBoundingClientRect();\n    } else {\n        left = top = 0;\n        if (isSVG) {\n            bbox = element.getBBox();\n            width = bbox.width;\n            height = bbox.height;\n        } else {\n            if (element.viewBox && (bbox = element.viewBox.baseVal)) {\n                left = bbox.x || 0;\n                top = bbox.y || 0;\n                width = bbox.width;\n                height = bbox.height;\n            }\n            if (!width) {\n                cs = _getComputedStyle(element);\n                bbox = cs.boxSizing === \"border-box\";\n                width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));\n                height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));\n            }\n        }\n        right = width;\n        bottom = height;\n    }\n    if (element === context) {\n        return {\n            left: left,\n            top: top,\n            width: right - left,\n            height: bottom - top\n        };\n    }\n    matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(context, true).multiply((0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(element));\n    p1 = matrix.apply({\n        x: left,\n        y: top\n    });\n    p2 = matrix.apply({\n        x: right,\n        y: top\n    });\n    p3 = matrix.apply({\n        x: right,\n        y: bottom\n    });\n    p4 = matrix.apply({\n        x: left,\n        y: bottom\n    });\n    left = Math.min(p1.x, p2.x, p3.x, p4.x);\n    top = Math.min(p1.y, p2.y, p3.y, p4.y);\n    return {\n        left: left,\n        top: top,\n        width: Math.max(p1.x, p2.x, p3.x, p4.x) - left,\n        height: Math.max(p1.y, p2.y, p3.y, p4.y) - top\n    };\n}, _parseInertia = function _parseInertia(draggable, snap, max, min, factor, forceZeroVelocity) {\n    var vars = {}, a, i, l;\n    if (snap) {\n        if (factor !== 1 && snap instanceof Array) {\n            //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.\n            vars.end = a = [];\n            l = snap.length;\n            if (_isObject(snap[0])) {\n                //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.\n                for(i = 0; i < l; i++){\n                    a[i] = _copy(snap[i], factor);\n                }\n            } else {\n                for(i = 0; i < l; i++){\n                    a[i] = snap[i] * factor;\n                }\n            }\n            max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if \"snap:[-$('#menu').width(), 0]\" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.\n            min -= 1.1;\n        } else if (_isFunction(snap)) {\n            vars.end = function(value) {\n                var result = snap.call(draggable, value), copy, p;\n                if (factor !== 1) {\n                    if (_isObject(result)) {\n                        copy = {};\n                        for(p in result){\n                            copy[p] = result[p] * factor;\n                        }\n                        result = copy;\n                    } else {\n                        result *= factor;\n                    }\n                }\n                return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.\n            };\n        } else {\n            vars.end = snap;\n        }\n    }\n    if (max || max === 0) {\n        vars.max = max;\n    }\n    if (min || min === 0) {\n        vars.min = min;\n    }\n    if (forceZeroVelocity) {\n        vars.velocity = 0;\n    }\n    return vars;\n}, _isClickable = function _isClickable(element) {\n    //sometimes it's convenient to mark an element as clickable by adding a data-clickable=\"true\" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).\n    var data;\n    return !element || !element.getAttribute || element === _body ? false : (data = element.getAttribute(\"data-clickable\")) === \"true\" || data !== \"false\" && (_clickableTagExp.test(element.nodeName + \"\") || element.getAttribute(\"contentEditable\") === \"true\") ? true : _isClickable(element.parentNode);\n}, _setSelectable = function _setSelectable(elements, selectable) {\n    var i = elements.length, e;\n    while(i--){\n        e = elements[i];\n        e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;\n        gsap.set(e, {\n            lazy: true,\n            userSelect: selectable ? \"text\" : \"none\"\n        });\n    }\n}, _isFixed = function _isFixed(element) {\n    if (_getComputedStyle(element).position === \"fixed\") {\n        return true;\n    }\n    element = element.parentNode;\n    if (element && element.nodeType === 1) {\n        // avoid document fragments which will throw an error.\n        return _isFixed(element);\n    }\n}, _supports3D, _addPaddingBR, //The ScrollProxy class wraps an element's contents into another div (we call it \"content\") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.\nScrollProxy = function ScrollProxy(element, vars) {\n    element = gsap.utils.toArray(element)[0];\n    vars = vars || {};\n    var content = document.createElement(\"div\"), style = content.style, node = element.firstChild, offsetTop = 0, offsetLeft = 0, prevTop = element.scrollTop, prevLeft = element.scrollLeft, scrollWidth = element.scrollWidth, scrollHeight = element.scrollHeight, extraPadRight = 0, maxLeft = 0, maxTop = 0, elementWidth, elementHeight, contentHeight, nextNode, transformStart, transformEnd;\n    if (_supports3D && vars.force3D !== false) {\n        transformStart = \"translate3d(\";\n        transformEnd = \"px,0px)\";\n    } else if (_transformProp) {\n        transformStart = \"translate(\";\n        transformEnd = \"px)\";\n    }\n    this.scrollTop = function(value, force) {\n        if (!arguments.length) {\n            return -this.top();\n        }\n        this.top(-value, force);\n    };\n    this.scrollLeft = function(value, force) {\n        if (!arguments.length) {\n            return -this.left();\n        }\n        this.left(-value, force);\n    };\n    this.left = function(value, force) {\n        if (!arguments.length) {\n            return -(element.scrollLeft + offsetLeft);\n        }\n        var dif = element.scrollLeft - prevLeft, oldOffset = offsetLeft;\n        if ((dif > 2 || dif < -2) && !force) {\n            //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n            prevLeft = element.scrollLeft;\n            gsap.killTweensOf(this, {\n                left: 1,\n                scrollLeft: 1\n            });\n            this.left(-prevLeft);\n            if (vars.onKill) {\n                vars.onKill();\n            }\n            return;\n        }\n        value = -value; //invert because scrolling works in the opposite direction\n        if (value < 0) {\n            offsetLeft = value - 0.5 | 0;\n            value = 0;\n        } else if (value > maxLeft) {\n            offsetLeft = value - maxLeft | 0;\n            value = maxLeft;\n        } else {\n            offsetLeft = 0;\n        }\n        if (offsetLeft || oldOffset) {\n            if (!this._skip) {\n                style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n            }\n            if (offsetLeft + extraPadRight >= 0) {\n                style.paddingRight = offsetLeft + extraPadRight + \"px\";\n            }\n        }\n        element.scrollLeft = value | 0;\n        prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.\n    };\n    this.top = function(value, force) {\n        if (!arguments.length) {\n            return -(element.scrollTop + offsetTop);\n        }\n        var dif = element.scrollTop - prevTop, oldOffset = offsetTop;\n        if ((dif > 2 || dif < -2) && !force) {\n            //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n            prevTop = element.scrollTop;\n            gsap.killTweensOf(this, {\n                top: 1,\n                scrollTop: 1\n            });\n            this.top(-prevTop);\n            if (vars.onKill) {\n                vars.onKill();\n            }\n            return;\n        }\n        value = -value; //invert because scrolling works in the opposite direction\n        if (value < 0) {\n            offsetTop = value - 0.5 | 0;\n            value = 0;\n        } else if (value > maxTop) {\n            offsetTop = value - maxTop | 0;\n            value = maxTop;\n        } else {\n            offsetTop = 0;\n        }\n        if (offsetTop || oldOffset) {\n            if (!this._skip) {\n                style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n            }\n        }\n        element.scrollTop = value | 0;\n        prevTop = element.scrollTop;\n    };\n    this.maxScrollTop = function() {\n        return maxTop;\n    };\n    this.maxScrollLeft = function() {\n        return maxLeft;\n    };\n    this.disable = function() {\n        node = content.firstChild;\n        while(node){\n            nextNode = node.nextSibling;\n            element.appendChild(node);\n            node = nextNode;\n        }\n        if (element === content.parentNode) {\n            //in case disable() is called when it's already disabled.\n            element.removeChild(content);\n        }\n    };\n    this.enable = function() {\n        node = element.firstChild;\n        if (node === content) {\n            return;\n        }\n        while(node){\n            nextNode = node.nextSibling;\n            content.appendChild(node);\n            node = nextNode;\n        }\n        element.appendChild(content);\n        this.calibrate();\n    };\n    this.calibrate = function(force) {\n        var widthMatches = element.clientWidth === elementWidth, cs, x, y;\n        prevTop = element.scrollTop;\n        prevLeft = element.scrollLeft;\n        if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {\n            return; //no need to recalculate things if the width and height haven't changed.\n        }\n        if (offsetTop || offsetLeft) {\n            x = this.left();\n            y = this.top();\n            this.left(-element.scrollLeft);\n            this.top(-element.scrollTop);\n        }\n        cs = _getComputedStyle(element); //first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)\n        if (!widthMatches || force) {\n            style.display = \"block\";\n            style.width = \"auto\";\n            style.paddingRight = \"0px\";\n            extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth); //if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.\n            if (extraPadRight) {\n                extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);\n            }\n        }\n        style.display = \"inline-block\";\n        style.position = \"relative\";\n        style.overflow = \"visible\";\n        style.verticalAlign = \"top\";\n        style.boxSizing = \"content-box\";\n        style.width = \"100%\";\n        style.paddingRight = extraPadRight + \"px\"; //some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error\n        if (_addPaddingBR) {\n            style.paddingBottom = cs.paddingBottom;\n        }\n        elementWidth = element.clientWidth;\n        elementHeight = element.clientHeight;\n        scrollWidth = element.scrollWidth;\n        scrollHeight = element.scrollHeight;\n        maxLeft = element.scrollWidth - elementWidth;\n        maxTop = element.scrollHeight - elementHeight;\n        contentHeight = content.offsetHeight;\n        style.display = \"block\";\n        if (x || y) {\n            this.left(x);\n            this.top(y);\n        }\n    };\n    this.content = content;\n    this.element = element;\n    this._skip = false;\n    this.enable();\n}, _initCore = function _initCore(required) {\n    if (_windowExists() && document.body) {\n        var nav = window && window.navigator;\n        _win = window;\n        _doc = document;\n        _docElement = _doc.documentElement;\n        _body = _doc.body;\n        _tempDiv = _createElement(\"div\");\n        _supportsPointer = !!window.PointerEvent;\n        _placeholderDiv = _createElement(\"div\");\n        _placeholderDiv.style.cssText = \"visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab\";\n        _defaultCursor = _placeholderDiv.style.cursor === \"grab\" ? \"grab\" : \"move\";\n        _isAndroid = nav && nav.userAgent.toLowerCase().indexOf(\"android\") !== -1; //Android handles touch events in an odd way and it's virtually impossible to \"feature test\" so we resort to UA sniffing\n        _isTouchDevice = \"ontouchstart\" in _docElement && \"orientation\" in _win || nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0);\n        _addPaddingBR = function() {\n            //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).\n            var div = _createElement(\"div\"), child = _createElement(\"div\"), childStyle = child.style, parent = _body, val;\n            childStyle.display = \"inline-block\";\n            childStyle.position = \"relative\";\n            div.style.cssText = \"width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden\";\n            div.appendChild(child);\n            parent.appendChild(div);\n            val = child.offsetHeight + 18 > div.scrollHeight; //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.\n            parent.removeChild(div);\n            return val;\n        }();\n        _touchEventLookup = function(types) {\n            //we create an object that makes it easy to translate touch event types into their \"pointer\" counterparts if we're in a browser that uses those instead. Like IE10 uses \"MSPointerDown\" instead of \"touchstart\", for example.\n            var standard = types.split(\",\"), converted = (\"onpointerdown\" in _tempDiv ? \"pointerdown,pointermove,pointerup,pointercancel\" : \"onmspointerdown\" in _tempDiv ? \"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel\" : types).split(\",\"), obj = {}, i = 4;\n            while(--i > -1){\n                obj[standard[i]] = converted[i];\n                obj[converted[i]] = standard[i];\n            } //to avoid problems in iOS 9, test to see if the browser supports the \"passive\" option on addEventListener().\n            try {\n                _docElement.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n                    get: function get() {\n                        _supportsPassive = 1;\n                    }\n                }));\n            } catch (e) {}\n            return obj;\n        }(\"touchstart,touchmove,touchend,touchcancel\");\n        _addListener(_doc, \"touchcancel\", _emptyFunc); //some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document. Very strange indeed.\n        _addListener(_win, \"touchmove\", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.\n        _body && _body.addEventListener(\"touchstart\", _emptyFunc); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n        _addListener(_doc, \"contextmenu\", function() {\n            for(var p in _lookup){\n                if (_lookup[p].isPressed) {\n                    _lookup[p].endDrag();\n                }\n            }\n        });\n        gsap = _coreInitted = _getGSAP();\n    }\n    if (gsap) {\n        InertiaPlugin = gsap.plugins.inertia;\n        _context = gsap.core.context || function() {};\n        _checkPrefix = gsap.utils.checkPrefix;\n        _transformProp = _checkPrefix(_transformProp);\n        _transformOriginProp = _checkPrefix(_transformOriginProp);\n        _toArray = gsap.utils.toArray;\n        _getStyleSaver = gsap.core.getStyleSaver;\n        _supports3D = !!_checkPrefix(\"perspective\");\n    } else if (required) {\n        console.warn(\"Please gsap.registerPlugin(Draggable)\");\n    }\n};\nvar EventDispatcher = /*#__PURE__*/ function() {\n    function EventDispatcher(target) {\n        this._listeners = {};\n        this.target = target || this;\n    }\n    var _proto = EventDispatcher.prototype;\n    _proto.addEventListener = function addEventListener(type, callback) {\n        var list = this._listeners[type] || (this._listeners[type] = []);\n        if (!~list.indexOf(callback)) {\n            list.push(callback);\n        }\n    };\n    _proto.removeEventListener = function removeEventListener(type, callback) {\n        var list = this._listeners[type], i = list && list.indexOf(callback);\n        i >= 0 && list.splice(i, 1);\n    };\n    _proto.dispatchEvent = function dispatchEvent(type) {\n        var _this = this;\n        var result;\n        (this._listeners[type] || []).forEach(function(callback) {\n            return callback.call(_this, {\n                type: type,\n                target: _this.target\n            }) === false && (result = false);\n        });\n        return result; //if any of the callbacks return false, pass that along.\n    };\n    return EventDispatcher;\n}();\nvar Draggable = /*#__PURE__*/ function(_EventDispatcher) {\n    _inheritsLoose(Draggable, _EventDispatcher);\n    function Draggable(target, vars) {\n        var _this2;\n        _this2 = _EventDispatcher.call(this) || this;\n        _coreInitted || _initCore(1);\n        target = _toArray(target)[0]; //in case the target is a selector object or selector text\n        _this2.styles = _getStyleSaver && _getStyleSaver(target, \"transform,left,top\");\n        if (!InertiaPlugin) {\n            InertiaPlugin = gsap.plugins.inertia;\n        }\n        _this2.vars = vars = _copy(vars || {});\n        _this2.target = target;\n        _this2.x = _this2.y = _this2.rotation = 0;\n        _this2.dragResistance = parseFloat(vars.dragResistance) || 0;\n        _this2.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;\n        _this2.lockAxis = vars.lockAxis;\n        _this2.autoScroll = vars.autoScroll || 0;\n        _this2.lockedAxis = null;\n        _this2.allowEventDefault = !!vars.allowEventDefault;\n        gsap.getProperty(target, \"x\"); // to ensure that transforms are instantiated.\n        var type = (vars.type || \"x,y\").toLowerCase(), xyMode = ~type.indexOf(\"x\") || ~type.indexOf(\"y\"), rotationMode = type.indexOf(\"rotation\") !== -1, xProp = rotationMode ? \"rotation\" : xyMode ? \"x\" : \"left\", yProp = xyMode ? \"y\" : \"top\", allowX = !!(~type.indexOf(\"x\") || ~type.indexOf(\"left\") || type === \"scroll\"), allowY = !!(~type.indexOf(\"y\") || ~type.indexOf(\"top\") || type === \"scroll\"), minimumMovement = vars.minimumMovement || 2, self = _assertThisInitialized(_this2), triggers = _toArray(vars.trigger || vars.handle || target), killProps = {}, dragEndTime = 0, checkAutoScrollBounds = false, autoScrollMarginTop = vars.autoScrollMarginTop || 40, autoScrollMarginRight = vars.autoScrollMarginRight || 40, autoScrollMarginBottom = vars.autoScrollMarginBottom || 40, autoScrollMarginLeft = vars.autoScrollMarginLeft || 40, isClickable = vars.clickableTest || _isClickable, clickTime = 0, gsCache = target._gsap || gsap.core.getCache(target), isFixed = _isFixed(target), getPropAsNum = function getPropAsNum(property, unit) {\n            return parseFloat(gsCache.get(target, property, unit));\n        }, ownerDoc = target.ownerDocument || _doc, enabled, scrollProxy, startPointerX, startPointerY, startElementX, startElementY, hasBounds, hasDragCallback, hasMoveCallback, maxX, minX, maxY, minY, touch, touchID, rotationOrigin, dirty, old, snapX, snapY, snapXY, isClicking, touchEventTarget, matrix, interrupted, allowNativeTouchScrolling, touchDragAxis, isDispatching, clickDispatch, trustedClickDispatch, isPreventingDefault, innerMatrix, dragged, onContextMenu = function onContextMenu(e) {\n            //used to prevent long-touch from triggering a context menu.\n            // (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.\n            _preventDefault(e);\n            e.stopImmediatePropagation && e.stopImmediatePropagation();\n            return false;\n        }, //this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the \"mousemove\" or \"touchmove\" event handler which may get called many times inbetween refreshes.\n        render = function render(suppressEvents) {\n            if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {\n                var e = target, autoScrollFactor = self.autoScroll * 15, //multiplying by 15 just gives us a better \"feel\" speed-wise.\n                parent, isRoot, rect, pointerX, pointerY, changeX, changeY, gap;\n                checkAutoScrollBounds = false;\n                _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n                _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n                pointerX = self.pointerX - _windowProxy.scrollLeft;\n                pointerY = self.pointerY - _windowProxy.scrollTop;\n                while(e && !isRoot){\n                    //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.\n                    isRoot = _isRoot(e.parentNode);\n                    parent = isRoot ? _windowProxy : e.parentNode;\n                    rect = isRoot ? {\n                        bottom: Math.max(_docElement.clientHeight, _win.innerHeight || 0),\n                        right: Math.max(_docElement.clientWidth, _win.innerWidth || 0),\n                        left: 0,\n                        top: 0\n                    } : parent.getBoundingClientRect();\n                    changeX = changeY = 0;\n                    if (allowY) {\n                        gap = parent._gsMaxScrollY - parent.scrollTop;\n                        if (gap < 0) {\n                            changeY = gap;\n                        } else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {\n                            checkAutoScrollBounds = true;\n                            changeY = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.bottom - pointerY) / autoScrollMarginBottom) | 0);\n                        } else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {\n                            checkAutoScrollBounds = true;\n                            changeY = -Math.min(parent.scrollTop, autoScrollFactor * (1 - Math.max(0, pointerY - rect.top) / autoScrollMarginTop) | 0);\n                        }\n                        if (changeY) {\n                            parent.scrollTop += changeY;\n                        }\n                    }\n                    if (allowX) {\n                        gap = parent._gsMaxScrollX - parent.scrollLeft;\n                        if (gap < 0) {\n                            changeX = gap;\n                        } else if (pointerX > rect.right - autoScrollMarginRight && gap) {\n                            checkAutoScrollBounds = true;\n                            changeX = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.right - pointerX) / autoScrollMarginRight) | 0);\n                        } else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {\n                            checkAutoScrollBounds = true;\n                            changeX = -Math.min(parent.scrollLeft, autoScrollFactor * (1 - Math.max(0, pointerX - rect.left) / autoScrollMarginLeft) | 0);\n                        }\n                        if (changeX) {\n                            parent.scrollLeft += changeX;\n                        }\n                    }\n                    if (isRoot && (changeX || changeY)) {\n                        _win.scrollTo(parent.scrollLeft, parent.scrollTop);\n                        setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);\n                    }\n                    e = parent;\n                }\n            }\n            if (dirty) {\n                var x = self.x, y = self.y;\n                if (rotationMode) {\n                    self.deltaX = x - parseFloat(gsCache.rotation);\n                    self.rotation = x;\n                    gsCache.rotation = x + \"deg\";\n                    gsCache.renderTransform(1, gsCache);\n                } else {\n                    if (scrollProxy) {\n                        if (allowY) {\n                            self.deltaY = y - scrollProxy.top();\n                            scrollProxy.top(y);\n                        }\n                        if (allowX) {\n                            self.deltaX = x - scrollProxy.left();\n                            scrollProxy.left(x);\n                        }\n                    } else if (xyMode) {\n                        if (allowY) {\n                            self.deltaY = y - parseFloat(gsCache.y);\n                            gsCache.y = y + \"px\";\n                        }\n                        if (allowX) {\n                            self.deltaX = x - parseFloat(gsCache.x);\n                            gsCache.x = x + \"px\";\n                        }\n                        gsCache.renderTransform(1, gsCache);\n                    } else {\n                        if (allowY) {\n                            self.deltaY = y - parseFloat(target.style.top || 0);\n                            target.style.top = y + \"px\";\n                        }\n                        if (allowX) {\n                            self.deltaX = x - parseFloat(target.style.left || 0);\n                            target.style.left = x + \"px\";\n                        }\n                    }\n                }\n                if (hasDragCallback && !suppressEvents && !isDispatching) {\n                    isDispatching = true; //in case onDrag has an update() call (avoid endless loop)\n                    if (_dispatchEvent(self, \"drag\", \"onDrag\") === false) {\n                        if (allowX) {\n                            self.x -= self.deltaX;\n                        }\n                        if (allowY) {\n                            self.y -= self.deltaY;\n                        }\n                        render(true);\n                    }\n                    isDispatching = false;\n                }\n            }\n            dirty = false;\n        }, //copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.\n        syncXY = function syncXY(skipOnUpdate, skipSnap) {\n            var x = self.x, y = self.y, snappedValue, cs;\n            if (!target._gsap) {\n                //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).\n                gsCache = gsap.core.getCache(target);\n            }\n            gsCache.uncache && gsap.getProperty(target, \"x\"); // trigger a re-cache\n            if (xyMode) {\n                self.x = parseFloat(gsCache.x);\n                self.y = parseFloat(gsCache.y);\n            } else if (rotationMode) {\n                self.x = self.rotation = parseFloat(gsCache.rotation);\n            } else if (scrollProxy) {\n                self.y = scrollProxy.top();\n                self.x = scrollProxy.left();\n            } else {\n                self.y = parseFloat(target.style.top || (cs = _getComputedStyle(target)) && cs.top) || 0;\n                self.x = parseFloat(target.style.left || (cs || {}).left) || 0;\n            }\n            if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {\n                if (snapXY) {\n                    _temp1.x = self.x;\n                    _temp1.y = self.y;\n                    snappedValue = snapXY(_temp1);\n                    if (snappedValue.x !== self.x) {\n                        self.x = snappedValue.x;\n                        dirty = true;\n                    }\n                    if (snappedValue.y !== self.y) {\n                        self.y = snappedValue.y;\n                        dirty = true;\n                    }\n                }\n                if (snapX) {\n                    snappedValue = snapX(self.x);\n                    if (snappedValue !== self.x) {\n                        self.x = snappedValue;\n                        if (rotationMode) {\n                            self.rotation = snappedValue;\n                        }\n                        dirty = true;\n                    }\n                }\n                if (snapY) {\n                    snappedValue = snapY(self.y);\n                    if (snappedValue !== self.y) {\n                        self.y = snappedValue;\n                    }\n                    dirty = true;\n                }\n            }\n            dirty && render(true);\n            if (!skipOnUpdate) {\n                self.deltaX = self.x - x;\n                self.deltaY = self.y - y;\n                _dispatchEvent(self, \"throwupdate\", \"onThrowUpdate\");\n            }\n        }, buildSnapFunc = function buildSnapFunc(snap, min, max, factor) {\n            if (min == null) {\n                min = -_bigNum;\n            }\n            if (max == null) {\n                max = _bigNum;\n            }\n            if (_isFunction(snap)) {\n                return function(n) {\n                    var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n                    return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : n < min ? min + (n - min) * edgeTolerance : n) * factor) * factor;\n                };\n            }\n            if (_isArray(snap)) {\n                return function(n) {\n                    var i = snap.length, closest = 0, absDif = _bigNum, val, dif;\n                    while(--i > -1){\n                        val = snap[i];\n                        dif = val - n;\n                        if (dif < 0) {\n                            dif = -dif;\n                        }\n                        if (dif < absDif && val >= min && val <= max) {\n                            closest = i;\n                            absDif = dif;\n                        }\n                    }\n                    return snap[closest];\n                };\n            }\n            return isNaN(snap) ? function(n) {\n                return n;\n            } : function() {\n                return snap * factor;\n            };\n        }, buildPointSnapFunc = function buildPointSnapFunc(snap, minX, maxX, minY, maxY, radius, factor) {\n            radius = radius && radius < _bigNum ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.\n            if (_isFunction(snap)) {\n                return function(point) {\n                    var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance, x = point.x, y = point.y, result, dx, dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n                    point.x = x = x > maxX ? maxX + (x - maxX) * edgeTolerance : x < minX ? minX + (x - minX) * edgeTolerance : x;\n                    point.y = y = y > maxY ? maxY + (y - maxY) * edgeTolerance : y < minY ? minY + (y - minY) * edgeTolerance : y;\n                    result = snap.call(self, point);\n                    if (result !== point) {\n                        point.x = result.x;\n                        point.y = result.y;\n                    }\n                    if (factor !== 1) {\n                        point.x *= factor;\n                        point.y *= factor;\n                    }\n                    if (radius < _bigNum) {\n                        dx = point.x - x;\n                        dy = point.y - y;\n                        if (dx * dx + dy * dy > radius) {\n                            point.x = x;\n                            point.y = y;\n                        }\n                    }\n                    return point;\n                };\n            }\n            if (_isArray(snap)) {\n                return function(p) {\n                    var i = snap.length, closest = 0, minDist = _bigNum, x, y, point, dist;\n                    while(--i > -1){\n                        point = snap[i];\n                        x = point.x - p.x;\n                        y = point.y - p.y;\n                        dist = x * x + y * y;\n                        if (dist < minDist) {\n                            closest = i;\n                            minDist = dist;\n                        }\n                    }\n                    return minDist <= radius ? snap[closest] : p;\n                };\n            }\n            return function(n) {\n                return n;\n            };\n        }, calculateBounds = function calculateBounds() {\n            var bounds, targetBounds, snap, snapIsRaw;\n            hasBounds = false;\n            if (scrollProxy) {\n                scrollProxy.calibrate();\n                self.minX = minX = -scrollProxy.maxScrollLeft();\n                self.minY = minY = -scrollProxy.maxScrollTop();\n                self.maxX = maxX = self.maxY = maxY = 0;\n                hasBounds = true;\n            } else if (!!vars.bounds) {\n                bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}\n                if (rotationMode) {\n                    self.minX = minX = bounds.left;\n                    self.maxX = maxX = bounds.left + bounds.width;\n                    self.minY = minY = self.maxY = maxY = 0;\n                } else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {\n                    bounds = vars.bounds;\n                    self.minX = minX = bounds.minX;\n                    self.minY = minY = bounds.minY;\n                    self.maxX = maxX = bounds.maxX;\n                    self.maxY = maxY = bounds.maxY;\n                } else {\n                    targetBounds = _getBounds(target, target.parentNode);\n                    self.minX = minX = Math.round(getPropAsNum(xProp, \"px\") + bounds.left - targetBounds.left);\n                    self.minY = minY = Math.round(getPropAsNum(yProp, \"px\") + bounds.top - targetBounds.top);\n                    self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));\n                    self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));\n                }\n                if (minX > maxX) {\n                    self.minX = maxX;\n                    self.maxX = maxX = minX;\n                    minX = self.minX;\n                }\n                if (minY > maxY) {\n                    self.minY = maxY;\n                    self.maxY = maxY = minY;\n                    minY = self.minY;\n                }\n                if (rotationMode) {\n                    self.minRotation = minX;\n                    self.maxRotation = maxX;\n                }\n                hasBounds = true;\n            }\n            if (vars.liveSnap) {\n                snap = vars.liveSnap === true ? vars.snap || {} : vars.liveSnap;\n                snapIsRaw = _isArray(snap) || _isFunction(snap);\n                if (rotationMode) {\n                    snapX = buildSnapFunc(snapIsRaw ? snap : snap.rotation, minX, maxX, 1);\n                    snapY = null;\n                } else {\n                    if (snap.points) {\n                        snapXY = buildPointSnapFunc(snapIsRaw ? snap : snap.points, minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);\n                    } else {\n                        if (allowX) {\n                            snapX = buildSnapFunc(snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft, minX, maxX, scrollProxy ? -1 : 1);\n                        }\n                        if (allowY) {\n                            snapY = buildSnapFunc(snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop, minY, maxY, scrollProxy ? -1 : 1);\n                        }\n                    }\n                }\n            }\n        }, onThrowComplete = function onThrowComplete() {\n            self.isThrowing = false;\n            _dispatchEvent(self, \"throwcomplete\", \"onThrowComplete\");\n        }, onThrowInterrupt = function onThrowInterrupt() {\n            self.isThrowing = false;\n        }, animate = function animate(inertia, forceZeroVelocity) {\n            var snap, snapIsRaw, tween, overshootTolerance;\n            if (inertia && InertiaPlugin) {\n                if (inertia === true) {\n                    snap = vars.snap || vars.liveSnap || {};\n                    snapIsRaw = _isArray(snap) || _isFunction(snap);\n                    inertia = {\n                        resistance: (vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)\n                    };\n                    if (rotationMode) {\n                        inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);\n                    } else {\n                        if (allowX) {\n                            inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"x\");\n                        }\n                        if (allowY) {\n                            inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"y\");\n                        }\n                        if (snap.points || _isArray(snap) && _isObject(snap[0])) {\n                            inertia.linkedProps = xProp + \",\" + yProp;\n                            inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a \"radius\" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that \"skipSnap\" parameter is true for syncXY.\n                        }\n                    }\n                }\n                self.isThrowing = true;\n                overshootTolerance = !isNaN(vars.overshootTolerance) ? vars.overshootTolerance : vars.edgeResistance === 1 ? 0 : 1 - self.edgeResistance + 0.2;\n                if (!inertia.duration) {\n                    inertia.duration = {\n                        max: Math.max(vars.minDuration || 0, \"maxDuration\" in vars ? vars.maxDuration : 2),\n                        min: !isNaN(vars.minDuration) ? vars.minDuration : overshootTolerance === 0 || _isObject(inertia) && inertia.resistance > 1000 ? 0 : 0.5,\n                        overshoot: overshootTolerance\n                    };\n                }\n                self.tween = tween = gsap.to(scrollProxy || target, {\n                    inertia: inertia,\n                    data: \"_draggable\",\n                    inherit: false,\n                    onComplete: onThrowComplete,\n                    onInterrupt: onThrowInterrupt,\n                    onUpdate: vars.fastMode ? _dispatchEvent : syncXY,\n                    onUpdateParams: vars.fastMode ? [\n                        self,\n                        \"onthrowupdate\",\n                        \"onThrowUpdate\"\n                    ] : snap && snap.radius ? [\n                        false,\n                        true\n                    ] : []\n                });\n                if (!vars.fastMode) {\n                    if (scrollProxy) {\n                        scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n                    }\n                    tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.\n                    syncXY(true, true);\n                    self.endX = self.x;\n                    self.endY = self.y;\n                    if (rotationMode) {\n                        self.endRotation = self.x;\n                    }\n                    tween.play(0);\n                    syncXY(true, true);\n                    if (scrollProxy) {\n                        scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n                    }\n                }\n            } else if (hasBounds) {\n                self.applyBounds();\n            }\n        }, updateMatrix = function updateMatrix(shiftStart) {\n            var start = matrix, p;\n            matrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n            if (shiftStart && self.isPressed && !matrix.equals(start || new _utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.Matrix2D())) {\n                //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.\n                p = start.inverse().apply({\n                    x: startPointerX,\n                    y: startPointerY\n                });\n                matrix.apply(p, p);\n                startPointerX = p.x;\n                startPointerY = p.y;\n            }\n            if (matrix.equals(_identityMatrix)) {\n                //if there are no transforms, we can optimize performance by not factoring in the matrix\n                matrix = null;\n            }\n        }, recordStartPositions = function recordStartPositions() {\n            var edgeTolerance = 1 - self.edgeResistance, offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0, offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0, parsedOrigin, x, y;\n            if (xyMode) {\n                // in case the user set it as a different unit, like animating the x to \"100%\". We must convert it back to px!\n                gsCache.x = getPropAsNum(xProp, \"px\") + \"px\";\n                gsCache.y = getPropAsNum(yProp, \"px\") + \"px\";\n                gsCache.renderTransform();\n            }\n            updateMatrix(false);\n            _point1.x = self.pointerX - offsetX;\n            _point1.y = self.pointerY - offsetY;\n            matrix && matrix.apply(_point1, _point1);\n            startPointerX = _point1.x; //translate to local coordinate system\n            startPointerY = _point1.y;\n            if (dirty) {\n                setPointerPosition(self.pointerX, self.pointerY);\n                render(true);\n            }\n            innerMatrix = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target);\n            if (scrollProxy) {\n                calculateBounds();\n                startElementY = scrollProxy.top();\n                startElementX = scrollProxy.left();\n            } else {\n                //if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.\n                if (isTweening()) {\n                    syncXY(true, true);\n                    calculateBounds();\n                } else {\n                    self.applyBounds();\n                }\n                if (rotationMode) {\n                    parsedOrigin = target.ownerSVGElement ? [\n                        gsCache.xOrigin - target.getBBox().x,\n                        gsCache.yOrigin - target.getBBox().y\n                    ] : (_getComputedStyle(target)[_transformOriginProp] || \"0 0\").split(\" \");\n                    rotationOrigin = self.rotationOrigin = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target).apply({\n                        x: parseFloat(parsedOrigin[0]) || 0,\n                        y: parseFloat(parsedOrigin[1]) || 0\n                    });\n                    syncXY(true, true);\n                    x = self.pointerX - rotationOrigin.x - offsetX;\n                    y = rotationOrigin.y - self.pointerY + offsetY;\n                    startElementX = self.x; //starting rotation (x always refers to rotation in type:\"rotation\", measured in degrees)\n                    startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;\n                } else {\n                    //parent = !isFixed && target.parentNode;\n                    //startScrollTop = parent ? parent.scrollTop || 0 : 0;\n                    //startScrollLeft = parent ? parent.scrollLeft || 0 : 0;\n                    startElementY = getPropAsNum(yProp, \"px\"); //record the starting top and left values so that we can just add the mouse's movement to them later.\n                    startElementX = getPropAsNum(xProp, \"px\");\n                }\n            }\n            if (hasBounds && edgeTolerance) {\n                if (startElementX > maxX) {\n                    startElementX = maxX + (startElementX - maxX) / edgeTolerance;\n                } else if (startElementX < minX) {\n                    startElementX = minX - (minX - startElementX) / edgeTolerance;\n                }\n                if (!rotationMode) {\n                    if (startElementY > maxY) {\n                        startElementY = maxY + (startElementY - maxY) / edgeTolerance;\n                    } else if (startElementY < minY) {\n                        startElementY = minY - (minY - startElementY) / edgeTolerance;\n                    }\n                }\n            }\n            self.startX = startElementX = _round(startElementX);\n            self.startY = startElementY = _round(startElementY);\n        }, isTweening = function isTweening() {\n            return self.tween && self.tween.isActive();\n        }, removePlaceholder = function removePlaceholder() {\n            if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) {\n                //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.\n                _placeholderDiv.parentNode.removeChild(_placeholderDiv);\n            }\n        }, //called when the mouse is pressed (or touch starts)\n        onPress = function onPress(e, force) {\n            var i;\n            if (!enabled || self.isPressed || !e || (e.type === \"mousedown\" || e.type === \"pointerdown\") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type]) {\n                //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick \"click\" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.\n                isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n                return;\n            }\n            interrupted = isTweening();\n            dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.\n            self.pointerEvent = e;\n            if (_touchEventLookup[e.type]) {\n                //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.\n                touchEventTarget = ~e.type.indexOf(\"touch\") ? e.currentTarget || e.target : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be \"MSPointerDown\" or \"pointerdown\".\n                _addListener(touchEventTarget, \"touchend\", onRelease);\n                _addListener(touchEventTarget, \"touchmove\", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\n                _addListener(touchEventTarget, \"touchcancel\", onRelease);\n                _addListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n            } else {\n                touchEventTarget = null;\n                _addListener(ownerDoc, \"mousemove\", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.\n            }\n            touchDragAxis = null;\n            if (!_supportsPointer || !touchEventTarget) {\n                _addListener(ownerDoc, \"mouseup\", onRelease);\n                e && e.target && _addListener(e.target, \"mouseup\", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable=\"true\"\n            }\n            isClicking = isClickable.call(self, e.target) && vars.dragClickables === false && !force;\n            if (isClicking) {\n                _addListener(e.target, \"change\", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a \"change\" event instead.\n                _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n                _dispatchEvent(self, \"press\", \"onPress\");\n                _setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable=\"true\" (otherwise user couldn't drag to select text)\n                isPreventingDefault = false;\n                return;\n            }\n            allowNativeTouchScrolling = !touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2) ? false : allowX ? \"y\" : \"x\"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.\n            isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;\n            if (isPreventingDefault) {\n                _preventDefault(e);\n                _addListener(_win, \"touchforcechange\", _preventDefault); //works around safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n            }\n            if (e.changedTouches) {\n                //touch events store the data slightly differently\n                e = touch = e.changedTouches[0];\n                touchID = e.identifier;\n            } else if (e.pointerId) {\n                touchID = e.pointerId; //for some Microsoft browsers\n            } else {\n                touch = touchID = null;\n            }\n            _dragCount++;\n            _addToRenderQueue(render); //causes the Draggable to render on each \"tick\" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)\n            startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove\n            startPointerX = self.pointerX = e.pageX;\n            _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n            if (allowNativeTouchScrolling || self.autoScroll) {\n                _recordMaxScrolls(target.parentNode);\n            }\n            if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) {\n                //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.\n                _placeholderDiv.style.width = target.parentNode.scrollWidth + \"px\";\n                target.parentNode.appendChild(_placeholderDiv);\n            }\n            recordStartPositions();\n            self.tween && self.tween.kill();\n            self.isThrowing = false;\n            gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.\n            scrollProxy && gsap.killTweensOf(target, {\n                scrollTo: 1\n            }, true); //just in case the original target's scroll position is being tweened somewhere else.\n            self.tween = self.lockedAxis = null;\n            if (vars.zIndexBoost || !rotationMode && !scrollProxy && vars.zIndexBoost !== false) {\n                target.style.zIndex = Draggable.zIndex++;\n            }\n            self.isPressed = true;\n            hasDragCallback = !!(vars.onDrag || self._listeners.drag);\n            hasMoveCallback = !!(vars.onMove || self._listeners.move);\n            if (vars.cursor !== false || vars.activeCursor) {\n                i = triggers.length;\n                while(--i > -1){\n                    gsap.set(triggers[i], {\n                        cursor: vars.activeCursor || vars.cursor || (_defaultCursor === \"grab\" ? \"grabbing\" : _defaultCursor)\n                    });\n                }\n            }\n            _dispatchEvent(self, \"press\", \"onPress\");\n        }, //called every time the mouse/touch moves\n        onMove = function onMove(e) {\n            var originalEvent = e, touches, pointerX, pointerY, i, dx, dy;\n            if (!enabled || _isMultiTouching || !self.isPressed || !e) {\n                isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n                return;\n            }\n            self.pointerEvent = e;\n            touches = e.changedTouches;\n            if (touches) {\n                //touch events store the data slightly differently\n                e = touches[0];\n                if (e !== touch && e.identifier !== touchID) {\n                    //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n                    i = touches.length;\n                    while(--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target){} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.\n                    if (i < 0) {\n                        return;\n                    }\n                }\n            } else if (e.pointerId && touchID && e.pointerId !== touchID) {\n                //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n                return;\n            }\n            if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) {\n                //Android browsers force us to decide on the first \"touchmove\" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a \"touchcancel\" will be fired and then no \"touchmove\" or \"touchend\" will fire during the scrolling (no good).\n                _point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);\n                _point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);\n                matrix && matrix.apply(_point1, _point1);\n                pointerX = _point1.x;\n                pointerY = _point1.y;\n                dx = Math.abs(pointerX - startPointerX);\n                dy = Math.abs(pointerY - startPointerY);\n                if (dx !== dy && (dx > minimumMovement || dy > minimumMovement) || _isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n                    touchDragAxis = dx > dy && allowX ? \"x\" : \"y\";\n                    if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {\n                        _addListener(_win, \"touchforcechange\", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari\n                    }\n                    if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {\n                        self.lockedAxis = touchDragAxis === \"x\" ? \"y\" : \"x\";\n                        _isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);\n                    }\n                    if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n                        onRelease(originalEvent);\n                        return;\n                    }\n                }\n            }\n            if (!self.allowEventDefault && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling !== touchDragAxis) && originalEvent.cancelable !== false) {\n                _preventDefault(originalEvent);\n                isPreventingDefault = true;\n            } else if (isPreventingDefault) {\n                isPreventingDefault = false;\n            }\n            if (self.autoScroll) {\n                checkAutoScrollBounds = true;\n            }\n            setPointerPosition(e.pageX, e.pageY, hasMoveCallback);\n        }, setPointerPosition = function setPointerPosition(pointerX, pointerY, invokeOnMove) {\n            var dragTolerance = 1 - self.dragResistance, edgeTolerance = 1 - self.edgeResistance, prevPointerX = self.pointerX, prevPointerY = self.pointerY, prevStartElementY = startElementY, prevX = self.x, prevY = self.y, prevEndX = self.endX, prevEndY = self.endY, prevEndRotation = self.endRotation, prevDirty = dirty, xChange, yChange, x, y, dif, temp;\n            self.pointerX = pointerX;\n            self.pointerY = pointerY;\n            if (isFixed) {\n                pointerX -= _getDocScrollLeft(ownerDoc);\n                pointerY -= _getDocScrollTop(ownerDoc);\n            }\n            if (rotationMode) {\n                y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;\n                dif = self.y - y;\n                if (dif > 180) {\n                    startElementY -= 360;\n                    self.y = y;\n                } else if (dif < -180) {\n                    startElementY += 360;\n                    self.y = y;\n                }\n                if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {\n                    self.y = y;\n                    x = startElementX + (startElementY - y) * dragTolerance;\n                } else {\n                    x = startElementX;\n                }\n            } else {\n                if (matrix) {\n                    temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;\n                    pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;\n                    pointerX = temp;\n                }\n                yChange = pointerY - startPointerY;\n                xChange = pointerX - startPointerX;\n                if (yChange < minimumMovement && yChange > -minimumMovement) {\n                    yChange = 0;\n                }\n                if (xChange < minimumMovement && xChange > -minimumMovement) {\n                    xChange = 0;\n                }\n                if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {\n                    temp = self.lockedAxis;\n                    if (!temp) {\n                        self.lockedAxis = temp = allowX && Math.abs(xChange) > Math.abs(yChange) ? \"y\" : allowY ? \"x\" : null;\n                        if (temp && _isFunction(self.vars.onLockAxis)) {\n                            self.vars.onLockAxis.call(self, self.pointerEvent);\n                        }\n                    }\n                    if (temp === \"y\") {\n                        yChange = 0;\n                    } else if (temp === \"x\") {\n                        xChange = 0;\n                    }\n                }\n                x = _round(startElementX + xChange * dragTolerance);\n                y = _round(startElementY + yChange * dragTolerance);\n            }\n            if ((snapX || snapY || snapXY) && (self.x !== x || self.y !== y && !rotationMode)) {\n                if (snapXY) {\n                    _temp1.x = x;\n                    _temp1.y = y;\n                    temp = snapXY(_temp1);\n                    x = _round(temp.x);\n                    y = _round(temp.y);\n                }\n                if (snapX) {\n                    x = _round(snapX(x));\n                }\n                if (snapY) {\n                    y = _round(snapY(y));\n                }\n            }\n            if (hasBounds) {\n                if (x > maxX) {\n                    x = maxX + Math.round((x - maxX) * edgeTolerance);\n                } else if (x < minX) {\n                    x = minX + Math.round((x - minX) * edgeTolerance);\n                }\n                if (!rotationMode) {\n                    if (y > maxY) {\n                        y = Math.round(maxY + (y - maxY) * edgeTolerance);\n                    } else if (y < minY) {\n                        y = Math.round(minY + (y - minY) * edgeTolerance);\n                    }\n                }\n            }\n            if (self.x !== x || self.y !== y && !rotationMode) {\n                if (rotationMode) {\n                    self.endRotation = self.x = self.endX = x;\n                    dirty = true;\n                } else {\n                    if (allowY) {\n                        self.y = self.endY = y;\n                        dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a \"tick\" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)\n                    }\n                    if (allowX) {\n                        self.x = self.endX = x;\n                        dirty = true;\n                    }\n                }\n                if (!invokeOnMove || _dispatchEvent(self, \"move\", \"onMove\") !== false) {\n                    if (!self.isDragging && self.isPressed) {\n                        self.isDragging = dragged = true;\n                        _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n                    }\n                } else {\n                    //revert because the onMove returned false!\n                    self.pointerX = prevPointerX;\n                    self.pointerY = prevPointerY;\n                    startElementY = prevStartElementY;\n                    self.x = prevX;\n                    self.y = prevY;\n                    self.endX = prevEndX;\n                    self.endY = prevEndY;\n                    self.endRotation = prevEndRotation;\n                    dirty = prevDirty;\n                }\n            }\n        }, //called when the mouse/touch is released\n        onRelease = function onRelease(e, force) {\n            if (!enabled || !self.isPressed || e && touchID != null && !force && (e.pointerId && e.pointerId !== touchID && e.target !== target || e.changedTouches && !_hasTouchID(e.changedTouches, touchID))) {\n                //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n                isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n                return;\n            }\n            self.isPressed = false;\n            var originalEvent = e, wasDragging = self.isDragging, isContextMenuRelease = self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2), placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder), touches, i, syntheticEvent, eventTarget, syntheticClick;\n            if (touchEventTarget) {\n                _removeListener(touchEventTarget, \"touchend\", onRelease);\n                _removeListener(touchEventTarget, \"touchmove\", onMove);\n                _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n                _removeListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n            } else {\n                _removeListener(ownerDoc, \"mousemove\", onMove);\n            }\n            _removeListener(_win, \"touchforcechange\", _preventDefault);\n            if (!_supportsPointer || !touchEventTarget) {\n                _removeListener(ownerDoc, \"mouseup\", onRelease);\n                e && e.target && _removeListener(e.target, \"mouseup\", onRelease);\n            }\n            dirty = false;\n            if (wasDragging) {\n                dragEndTime = _lastDragTime = _getTime();\n                self.isDragging = false;\n            }\n            _removeFromRenderQueue(render);\n            if (isClicking && !isContextMenuRelease) {\n                if (e) {\n                    _removeListener(e.target, \"change\", onRelease);\n                    self.pointerEvent = originalEvent;\n                }\n                _setSelectable(triggers, false);\n                _dispatchEvent(self, \"release\", \"onRelease\");\n                _dispatchEvent(self, \"click\", \"onClick\");\n                isClicking = false;\n                return;\n            }\n            i = triggers.length;\n            while(--i > -1){\n                _setStyle(triggers[i], \"cursor\", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));\n            }\n            _dragCount--;\n            if (e) {\n                touches = e.changedTouches;\n                if (touches) {\n                    //touch events store the data slightly differently\n                    e = touches[0];\n                    if (e !== touch && e.identifier !== touchID) {\n                        //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n                        i = touches.length;\n                        while(--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target){}\n                        if (i < 0 && !force) {\n                            return;\n                        }\n                    }\n                }\n                self.pointerEvent = originalEvent;\n                self.pointerX = e.pageX;\n                self.pointerY = e.pageY;\n            }\n            if (isContextMenuRelease && originalEvent) {\n                _preventDefault(originalEvent);\n                isPreventingDefault = true;\n                _dispatchEvent(self, \"release\", \"onRelease\");\n            } else if (originalEvent && !wasDragging) {\n                isPreventingDefault = false;\n                if (interrupted && (vars.snap || vars.bounds)) {\n                    //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)\n                    animate(vars.inertia || vars.throwProps);\n                }\n                _dispatchEvent(self, \"release\", \"onRelease\");\n                if ((!_isAndroid || originalEvent.type !== \"touchmove\") && originalEvent.type.indexOf(\"cancel\") === -1) {\n                    //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a \"click\".\n                    _dispatchEvent(self, \"click\", \"onClick\");\n                    if (_getTime() - clickTime < 300) {\n                        _dispatchEvent(self, \"doubleclick\", \"onDoubleClick\");\n                    }\n                    eventTarget = originalEvent.target || target; //old IE uses srcElement\n                    clickTime = _getTime();\n                    syntheticClick = function syntheticClick() {\n                        // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n                        if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {\n                            if (eventTarget.click) {\n                                //some browsers (like mobile Safari) don't properly trigger the click event\n                                eventTarget.click();\n                            } else if (ownerDoc.createEvent) {\n                                syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);\n                                eventTarget.dispatchEvent(syntheticEvent);\n                            }\n                        }\n                    };\n                    if (!_isAndroid && !originalEvent.defaultPrevented) {\n                        //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.\n                        gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the \"click\" event with \"capture\" false which solved the video-click-to-play issue, but it would allow the \"click\" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's \"trusted\".\n                    }\n                }\n            } else {\n                animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.\n                if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling === touchDragAxis) && originalEvent.cancelable !== false) {\n                    isPreventingDefault = true;\n                    _preventDefault(originalEvent);\n                } else {\n                    isPreventingDefault = false;\n                }\n                _dispatchEvent(self, \"release\", \"onRelease\");\n            }\n            isTweening() && placeholderDelayedCall.duration(self.tween.duration()); //sync the timing so that the placeholder DIV gets\n            wasDragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n            return true;\n        }, updateScroll = function updateScroll(e) {\n            if (e && self.isDragging && !scrollProxy) {\n                var parent = e.target || target.parentNode, deltaX = parent.scrollLeft - parent._gsScrollX, deltaY = parent.scrollTop - parent._gsScrollY;\n                if (deltaX || deltaY) {\n                    if (matrix) {\n                        startPointerX -= deltaX * matrix.a + deltaY * matrix.c;\n                        startPointerY -= deltaY * matrix.d + deltaX * matrix.b;\n                    } else {\n                        startPointerX -= deltaX;\n                        startPointerY -= deltaY;\n                    }\n                    parent._gsScrollX += deltaX;\n                    parent._gsScrollY += deltaY;\n                    setPointerPosition(self.pointerX, self.pointerY);\n                }\n            }\n        }, onClick = function onClick(e) {\n            //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.\n            var time = _getTime(), recentlyClicked = time - clickTime < 100, recentlyDragged = time - dragEndTime < 50, alreadyDispatched = recentlyClicked && clickDispatch === clickTime, defaultPrevented = self.pointerEvent && self.pointerEvent.defaultPrevented, alreadyDispatchedTrusted = recentlyClicked && trustedClickDispatch === clickTime, trusted = e.isTrusted || e.isTrusted == null && recentlyClicked && alreadyDispatched; //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic \"click\" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?\n            if ((alreadyDispatched || recentlyDragged && self.vars.suppressClickOnDrag !== false) && e.stopImmediatePropagation) {\n                e.stopImmediatePropagation();\n            }\n            if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || trusted && !alreadyDispatchedTrusted)) {\n                //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)\n                if (trusted && alreadyDispatched) {\n                    trustedClickDispatch = clickTime;\n                }\n                clickDispatch = clickTime;\n                return;\n            }\n            if (self.isPressed || recentlyDragged || recentlyClicked) {\n                if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {\n                    _preventDefault(e);\n                }\n            }\n            if (!recentlyClicked && !recentlyDragged && !dragged) {\n                // for script-triggered event dispatches, like element.click()\n                e && e.target && (self.pointerEvent = e);\n                _dispatchEvent(self, \"click\", \"onClick\");\n            }\n        }, localizePoint = function localizePoint(p) {\n            return matrix ? {\n                x: p.x * matrix.a + p.y * matrix.c + matrix.e,\n                y: p.x * matrix.b + p.y * matrix.d + matrix.f\n            } : {\n                x: p.x,\n                y: p.y\n            };\n        };\n        old = Draggable.get(target);\n        old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)\n        //give the user access to start/stop dragging...\n        _this2.startDrag = function(event, align) {\n            var r1, r2, p1, p2;\n            onPress(event || self.pointerEvent, true); //if the pointer isn't on top of the element, adjust things accordingly\n            if (align && !self.hitTest(event || self.pointerEvent)) {\n                r1 = _parseRect(event || self.pointerEvent);\n                r2 = _parseRect(target);\n                p1 = localizePoint({\n                    x: r1.left + r1.width / 2,\n                    y: r1.top + r1.height / 2\n                });\n                p2 = localizePoint({\n                    x: r2.left + r2.width / 2,\n                    y: r2.top + r2.height / 2\n                });\n                startPointerX -= p1.x - p2.x;\n                startPointerY -= p1.y - p2.y;\n            }\n            if (!self.isDragging) {\n                self.isDragging = dragged = true;\n                _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n            }\n        };\n        _this2.drag = onMove;\n        _this2.endDrag = function(e) {\n            return onRelease(e || self.pointerEvent, true);\n        };\n        _this2.timeSinceDrag = function() {\n            return self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;\n        };\n        _this2.timeSinceClick = function() {\n            return (_getTime() - clickTime) / 1000;\n        };\n        _this2.hitTest = function(target, threshold) {\n            return Draggable.hitTest(self.target, target, threshold);\n        };\n        _this2.getDirection = function(from, diagonalThreshold) {\n            //from can be \"start\" (default), \"velocity\", or an element\n            var mode = from === \"velocity\" && InertiaPlugin ? from : _isObject(from) && !rotationMode ? \"element\" : \"start\", xChange, yChange, ratio, direction, r1, r2;\n            if (mode === \"element\") {\n                r1 = _parseRect(self.target);\n                r2 = _parseRect(from);\n            }\n            xChange = mode === \"start\" ? self.x - startElementX : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, xProp) : r1.left + r1.width / 2 - (r2.left + r2.width / 2);\n            if (rotationMode) {\n                return xChange < 0 ? \"counter-clockwise\" : \"clockwise\";\n            } else {\n                diagonalThreshold = diagonalThreshold || 2;\n                yChange = mode === \"start\" ? self.y - startElementY : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, yProp) : r1.top + r1.height / 2 - (r2.top + r2.height / 2);\n                ratio = Math.abs(xChange / yChange);\n                direction = ratio < 1 / diagonalThreshold ? \"\" : xChange < 0 ? \"left\" : \"right\";\n                if (ratio < diagonalThreshold) {\n                    if (direction !== \"\") {\n                        direction += \"-\";\n                    }\n                    direction += yChange < 0 ? \"up\" : \"down\";\n                }\n            }\n            return direction;\n        };\n        _this2.applyBounds = function(newBounds, sticky) {\n            var x, y, forceZeroVelocity, e, parent, isRoot;\n            if (newBounds && vars.bounds !== newBounds) {\n                vars.bounds = newBounds;\n                return self.update(true, sticky);\n            }\n            syncXY(true);\n            calculateBounds();\n            if (hasBounds && !isTweening()) {\n                x = self.x;\n                y = self.y;\n                if (x > maxX) {\n                    x = maxX;\n                } else if (x < minX) {\n                    x = minX;\n                }\n                if (y > maxY) {\n                    y = maxY;\n                } else if (y < minY) {\n                    y = minY;\n                }\n                if (self.x !== x || self.y !== y) {\n                    forceZeroVelocity = true;\n                    self.x = self.endX = x;\n                    if (rotationMode) {\n                        self.endRotation = x;\n                    } else {\n                        self.y = self.endY = y;\n                    }\n                    dirty = true;\n                    render(true);\n                    if (self.autoScroll && !self.isDragging) {\n                        _recordMaxScrolls(target.parentNode);\n                        e = target;\n                        _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n                        _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n                        while(e && !isRoot){\n                            //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.\n                            isRoot = _isRoot(e.parentNode);\n                            parent = isRoot ? _windowProxy : e.parentNode;\n                            if (allowY && parent.scrollTop > parent._gsMaxScrollY) {\n                                parent.scrollTop = parent._gsMaxScrollY;\n                            }\n                            if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {\n                                parent.scrollLeft = parent._gsMaxScrollX;\n                            }\n                            e = parent;\n                        }\n                    }\n                }\n                if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {\n                    animate(vars.inertia || vars.throwProps, forceZeroVelocity);\n                }\n            }\n            return self;\n        };\n        _this2.update = function(applyBounds, sticky, ignoreExternalChanges) {\n            if (sticky && self.isPressed) {\n                // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.\n                var m = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target), p = innerMatrix.apply({\n                    x: self.x - startElementX,\n                    y: self.y - startElementY\n                }), m2 = (0,_utils_matrix_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalMatrix)(target.parentNode, true);\n                m2.apply({\n                    x: m.e - p.x,\n                    y: m.f - p.y\n                }, p);\n                self.x -= p.x - m2.e;\n                self.y -= p.y - m2.f;\n                render(true);\n                recordStartPositions();\n            }\n            var x = self.x, y = self.y;\n            updateMatrix(!sticky);\n            if (applyBounds) {\n                self.applyBounds();\n            } else {\n                dirty && ignoreExternalChanges && render(true);\n                syncXY(true);\n            }\n            if (sticky) {\n                setPointerPosition(self.pointerX, self.pointerY);\n                dirty && render(true);\n            }\n            if (self.isPressed && !sticky && (allowX && Math.abs(x - self.x) > 0.01 || allowY && Math.abs(y - self.y) > 0.01 && !rotationMode)) {\n                recordStartPositions();\n            }\n            if (self.autoScroll) {\n                _recordMaxScrolls(target.parentNode, self.isDragging);\n                checkAutoScrollBounds = self.isDragging;\n                render(true); //in case reparenting occurred.\n                _removeScrollListener(target, updateScroll);\n                _addScrollListener(target, updateScroll);\n            }\n            return self;\n        };\n        _this2.enable = function(type) {\n            var setVars = {\n                lazy: true\n            }, id, i, trigger;\n            if (vars.cursor !== false) {\n                setVars.cursor = vars.cursor || _defaultCursor;\n            }\n            if (gsap.utils.checkPrefix(\"touchCallout\")) {\n                setVars.touchCallout = \"none\";\n            }\n            if (type !== \"soft\") {\n                _setTouchActionForAllDescendants(triggers, allowX === allowY ? \"none\" : vars.allowNativeTouchScrolling && target.scrollHeight === target.clientHeight === (target.scrollWidth === target.clientHeight) || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is \"manipulate\" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.\n                i = triggers.length;\n                while(--i > -1){\n                    trigger = triggers[i];\n                    _supportsPointer || _addListener(trigger, \"mousedown\", onPress);\n                    _addListener(trigger, \"touchstart\", onPress);\n                    _addListener(trigger, \"click\", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.\n                    gsap.set(trigger, setVars);\n                    if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) {\n                        // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.\n                        gsap.set(trigger.ownerSVGElement, {\n                            touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"\n                        });\n                    }\n                    vars.allowContextMenu || _addListener(trigger, \"contextmenu\", onContextMenu);\n                }\n                _setSelectable(triggers, false);\n            }\n            _addScrollListener(target, updateScroll);\n            enabled = true;\n            if (InertiaPlugin && type !== \"soft\") {\n                InertiaPlugin.track(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n            }\n            target._gsDragID = id = \"d\" + _lookupCount++;\n            _lookup[id] = self;\n            if (scrollProxy) {\n                scrollProxy.enable();\n                scrollProxy.element._gsDragID = id;\n            }\n            (vars.bounds || rotationMode) && recordStartPositions();\n            vars.bounds && self.applyBounds();\n            return self;\n        };\n        _this2.disable = function(type) {\n            var dragging = self.isDragging, i = triggers.length, trigger;\n            while(--i > -1){\n                _setStyle(triggers[i], \"cursor\", null);\n            }\n            if (type !== \"soft\") {\n                _setTouchActionForAllDescendants(triggers, null);\n                i = triggers.length;\n                while(--i > -1){\n                    trigger = triggers[i];\n                    _setStyle(trigger, \"touchCallout\", null);\n                    _removeListener(trigger, \"mousedown\", onPress);\n                    _removeListener(trigger, \"touchstart\", onPress);\n                    _removeListener(trigger, \"click\", onClick, true);\n                    _removeListener(trigger, \"contextmenu\", onContextMenu);\n                }\n                _setSelectable(triggers, true);\n                if (touchEventTarget) {\n                    _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n                    _removeListener(touchEventTarget, \"touchend\", onRelease);\n                    _removeListener(touchEventTarget, \"touchmove\", onMove);\n                }\n                _removeListener(ownerDoc, \"mouseup\", onRelease);\n                _removeListener(ownerDoc, \"mousemove\", onMove);\n            }\n            _removeScrollListener(target, updateScroll);\n            enabled = false;\n            if (InertiaPlugin && type !== \"soft\") {\n                InertiaPlugin.untrack(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n                self.tween && self.tween.kill();\n            }\n            scrollProxy && scrollProxy.disable();\n            _removeFromRenderQueue(render);\n            self.isDragging = self.isPressed = isClicking = false;\n            dragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n            return self;\n        };\n        _this2.enabled = function(value, type) {\n            return arguments.length ? value ? self.enable(type) : self.disable(type) : enabled;\n        };\n        _this2.kill = function() {\n            self.isThrowing = false;\n            self.tween && self.tween.kill();\n            self.disable();\n            gsap.set(triggers, {\n                clearProps: \"userSelect\"\n            });\n            delete _lookup[target._gsDragID];\n            return self;\n        };\n        _this2.revert = function() {\n            this.kill();\n            this.styles && this.styles.revert();\n        };\n        if (~type.indexOf(\"scroll\")) {\n            scrollProxy = _this2.scrollProxy = new ScrollProxy(target, _extend({\n                onKill: function onKill() {\n                    //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the \"mouseup\" properly when users drag the scrollbar of an element, so this works around that issue.\n                    self.isPressed && onRelease(null);\n                }\n            }, vars)); //a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to \"hidden\" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)\n            target.style.overflowY = allowY && !_isTouchDevice ? \"auto\" : \"hidden\";\n            target.style.overflowX = allowX && !_isTouchDevice ? \"auto\" : \"hidden\";\n            target = scrollProxy.content;\n        }\n        if (rotationMode) {\n            killProps.rotation = 1;\n        } else {\n            if (allowX) {\n                killProps[xProp] = 1;\n            }\n            if (allowY) {\n                killProps[yProp] = 1;\n            }\n        }\n        gsCache.force3D = \"force3D\" in vars ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.\n        _context(_assertThisInitialized(_this2));\n        _this2.enable();\n        return _this2;\n    }\n    Draggable.register = function register(core) {\n        gsap = core;\n        _initCore();\n    };\n    Draggable.create = function create(targets, vars) {\n        _coreInitted || _initCore(true);\n        return _toArray(targets).map(function(target) {\n            return new Draggable(target, vars);\n        });\n    };\n    Draggable.get = function get(target) {\n        return _lookup[(_toArray(target)[0] || {})._gsDragID];\n    };\n    Draggable.timeSinceDrag = function timeSinceDrag() {\n        return (_getTime() - _lastDragTime) / 1000;\n    };\n    Draggable.hitTest = function hitTest(obj1, obj2, threshold) {\n        if (obj1 === obj2) {\n            return false;\n        }\n        var r1 = _parseRect(obj1), r2 = _parseRect(obj2), top = r1.top, left = r1.left, right = r1.right, bottom = r1.bottom, width = r1.width, height = r1.height, isOutside = r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top, overlap, area, isRatio;\n        if (isOutside || !threshold) {\n            return !isOutside;\n        }\n        isRatio = (threshold + \"\").indexOf(\"%\") !== -1;\n        threshold = parseFloat(threshold) || 0;\n        overlap = {\n            left: Math.max(left, r2.left),\n            top: Math.max(top, r2.top)\n        };\n        overlap.width = Math.min(right, r2.right) - overlap.left;\n        overlap.height = Math.min(bottom, r2.bottom) - overlap.top;\n        if (overlap.width < 0 || overlap.height < 0) {\n            return false;\n        }\n        if (isRatio) {\n            threshold *= 0.01;\n            area = overlap.width * overlap.height;\n            return area >= width * height * threshold || area >= r2.width * r2.height * threshold;\n        }\n        return overlap.width > threshold && overlap.height > threshold;\n    };\n    return Draggable;\n}(EventDispatcher);\n_setDefaults(Draggable.prototype, {\n    pointerX: 0,\n    pointerY: 0,\n    startX: 0,\n    startY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    isDragging: false,\n    isPressed: false\n});\nDraggable.zIndex = 1000;\nDraggable.version = \"3.12.5\";\n_getGSAP() && gsap.registerPlugin(Draggable);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3NhcC9EcmFnZ2FibGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsdUJBQXVCQyxJQUFJO0lBQUksSUFBSUEsU0FBUyxLQUFLLEdBQUc7UUFBRSxNQUFNLElBQUlDLGVBQWU7SUFBOEQ7SUFBRSxPQUFPRDtBQUFNO0FBRXJLLFNBQVNFLGVBQWVDLFFBQVEsRUFBRUMsVUFBVTtJQUFJRCxTQUFTRSxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ0gsV0FBV0MsU0FBUztJQUFHRixTQUFTRSxTQUFTLENBQUNHLFdBQVcsR0FBR0w7SUFBVUEsU0FBU00sU0FBUyxHQUFHTDtBQUFZO0FBRXRMOzs7Ozs7OztDQVFDLEdBRUQsa0JBQWtCLEdBQzRDO0FBRTlELElBQUlRLE1BQ0FDLE1BQ0FDLE1BQ0FDLGFBQ0FDLE9BQ0FDLFVBQ0FDLGlCQUNBQyxjQUNBQyxjQUNBQyxVQUNBQyxrQkFDQUMsZ0JBQ0FDLG1CQUNBQyxrQkFDQUMsWUFDQUMsZUFDQUMsZ0JBQ0FDLGtCQUNBQyxVQUNBQyxnQkFDQUMsYUFBYSxHQUNiQyxnQkFBZ0IsU0FBU0E7SUFDM0IsT0FBTyxnQkFBa0I7QUFDM0IsR0FDSUMsV0FBVyxTQUFTQTtJQUN0QixPQUFPdEIsUUFBUXFCLG1CQUFvQnJCLENBQUFBLE9BQU91QixPQUFPdkIsSUFBSSxLQUFLQSxLQUFLd0IsY0FBYyxJQUFJeEI7QUFDbkYsR0FDSXlCLGNBQWMsU0FBU0EsWUFBWUMsS0FBSztJQUMxQyxPQUFPLE9BQU9BLFVBQVU7QUFDMUIsR0FDSUMsWUFBWSxTQUFTQSxVQUFVRCxLQUFLO0lBQ3RDLE9BQU8sT0FBT0EsVUFBVTtBQUMxQixHQUNJRSxlQUFlLFNBQVNBLGFBQWFGLEtBQUs7SUFDNUMsT0FBTyxPQUFPQSxVQUFVO0FBQzFCLEdBQ0lHLGFBQWEsU0FBU0E7SUFDeEIsT0FBTztBQUNULEdBQ0lDLGlCQUFpQixhQUNqQkMsdUJBQXVCLG1CQUN2QkMsU0FBUyxTQUFTQSxPQUFPTixLQUFLO0lBQ2hDLE9BQU9PLEtBQUtDLEtBQUssQ0FBQ1IsUUFBUSxTQUFTO0FBQ3JDLEdBQ0lTLFdBQVdDLE1BQU1DLE9BQU8sRUFDeEJDLGlCQUFpQixTQUFTQSxlQUFlQyxJQUFJLEVBQUVDLEVBQUU7SUFDbkQsSUFBSUMsSUFBSXZDLEtBQUt3QyxlQUFlLEdBQUd4QyxLQUFLd0MsZUFBZSxDQUFDLENBQUNGLE1BQU0sOEJBQTZCLEVBQUdHLE9BQU8sQ0FBQyxVQUFVLFNBQVNKLFFBQVFyQyxLQUFLMEMsYUFBYSxDQUFDTCxPQUFPLDJHQUEyRztJQUVuUSxPQUFPRSxFQUFFSSxLQUFLLEdBQUdKLElBQUl2QyxLQUFLMEMsYUFBYSxDQUFDTCxPQUFPLHljQUF5YztBQUMxZixHQUNJTyxXQUFXLE1BQU1iLEtBQUtjLEVBQUUsRUFDeEJDLFVBQVUsTUFDVkMsa0JBQWtCLElBQUlsRCxzREFBUUEsSUFDOUJtRCxXQUFXQyxLQUFLQyxHQUFHLElBQUk7SUFDekIsT0FBTyxJQUFJRCxPQUFPRSxPQUFPO0FBQzNCLEdBQ0lDLGVBQWUsRUFBRSxFQUNqQkMsVUFBVSxDQUFDLEdBQ1gsc09BQXNPO0FBQzFPQyxlQUFlLEdBQ1hDLG1CQUFtQix5Q0FDbkJDLGdCQUFnQixHQUNoQkMsU0FBUyxDQUFDLEdBQ1YsNkdBQTZHO0FBQ2pIQyxlQUFlLENBQUMsR0FDWixrSEFBa0g7QUFDdEhDLFFBQVEsU0FBU0EsTUFBTUMsR0FBRyxFQUFFQyxNQUFNO0lBQ2hDLElBQUlDLE9BQU8sQ0FBQyxHQUNSQztJQUVKLElBQUtBLEtBQUtILElBQUs7UUFDYkUsSUFBSSxDQUFDQyxFQUFFLEdBQUdGLFNBQVNELEdBQUcsQ0FBQ0csRUFBRSxHQUFHRixTQUFTRCxHQUFHLENBQUNHLEVBQUU7SUFDN0M7SUFFQSxPQUFPRDtBQUNULEdBQ0lFLFVBQVUsU0FBU0EsUUFBUUosR0FBRyxFQUFFSyxRQUFRO0lBQzFDLElBQUssSUFBSUYsS0FBS0UsU0FBVTtRQUN0QixJQUFJLENBQUVGLENBQUFBLEtBQUtILEdBQUUsR0FBSTtZQUNmQSxHQUFHLENBQUNHLEVBQUUsR0FBR0UsUUFBUSxDQUFDRixFQUFFO1FBQ3RCO0lBQ0Y7SUFFQSxPQUFPSDtBQUNULEdBQ0lNLG1DQUFtQyxTQUFTQSxpQ0FBaUNDLFFBQVEsRUFBRTNDLEtBQUs7SUFDOUYsSUFBSTRDLElBQUlELFNBQVNFLE1BQU0sRUFDbkJDO0lBRUosTUFBT0YsSUFBSztRQUNWNUMsUUFBUTJDLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDekIsS0FBSyxDQUFDNEIsV0FBVyxHQUFHL0MsUUFBUTJDLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDekIsS0FBSyxDQUFDNkIsY0FBYyxDQUFDO1FBQ2pGRixXQUFXSCxRQUFRLENBQUNDLEVBQUUsQ0FBQ0UsUUFBUTtRQUMvQkEsWUFBWUEsU0FBU0QsTUFBTSxJQUFJSCxpQ0FBaUNJLFVBQVU5QztJQUM1RTtBQUNGLEdBQ0lpRCxtQkFBbUIsU0FBU0E7SUFDOUIsT0FBT3JCLGFBQWFzQixPQUFPLENBQUMsU0FBVUMsSUFBSTtRQUN4QyxPQUFPQTtJQUNUO0FBQ0YsR0FDSUMsb0JBQW9CLFNBQVNBLGtCQUFrQkQsSUFBSTtJQUNyRHZCLGFBQWF5QixJQUFJLENBQUNGO0lBRWxCLElBQUl2QixhQUFhaUIsTUFBTSxLQUFLLEdBQUc7UUFDN0J2RSxLQUFLZ0YsTUFBTSxDQUFDQyxHQUFHLENBQUNOO0lBQ2xCO0FBQ0YsR0FDSU8sc0JBQXNCLFNBQVNBO0lBQ2pDLE9BQU8sQ0FBQzVCLGFBQWFpQixNQUFNLElBQUl2RSxLQUFLZ0YsTUFBTSxDQUFDRyxNQUFNLENBQUNSO0FBQ3BELEdBQ0lTLHlCQUF5QixTQUFTQSx1QkFBdUJQLElBQUk7SUFDL0QsSUFBSVAsSUFBSWhCLGFBQWFpQixNQUFNO0lBRTNCLE1BQU9ELElBQUs7UUFDVixJQUFJaEIsWUFBWSxDQUFDZ0IsRUFBRSxLQUFLTyxNQUFNO1lBQzVCdkIsYUFBYStCLE1BQU0sQ0FBQ2YsR0FBRztRQUN6QjtJQUNGO0lBRUF0RSxLQUFLc0YsRUFBRSxDQUFDSixxQkFBcUI7UUFDM0JLLFdBQVc7UUFDWEMsT0FBTztRQUNQQyxVQUFVO1FBQ1ZDLFlBQVlSO1FBQ1pTLE1BQU07SUFDUixJQUFJLHFXQUFxVztBQUMzVyxHQUNJQyxlQUFlLFNBQVNBLGFBQWE5QixHQUFHLEVBQUVLLFFBQVE7SUFDcEQsSUFBSyxJQUFJRixLQUFLRSxTQUFVO1FBQ3RCLElBQUksQ0FBRUYsQ0FBQUEsS0FBS0gsR0FBRSxHQUFJO1lBQ2ZBLEdBQUcsQ0FBQ0csRUFBRSxHQUFHRSxRQUFRLENBQUNGLEVBQUU7UUFDdEI7SUFDRjtJQUVBLE9BQU9IO0FBQ1QsR0FDSStCLGVBQWUsU0FBU0EsYUFBYUMsT0FBTyxFQUFFdkQsSUFBSSxFQUFFc0MsSUFBSSxFQUFFa0IsT0FBTztJQUNuRSxJQUFJRCxRQUFRRSxnQkFBZ0IsRUFBRTtRQUM1QixJQUFJQyxZQUFZckYsaUJBQWlCLENBQUMyQixLQUFLO1FBQ3ZDd0QsVUFBVUEsV0FBWXJGLENBQUFBLG1CQUFtQjtZQUN2Q3dGLFNBQVM7UUFDWCxJQUFJLElBQUc7UUFDUEosUUFBUUUsZ0JBQWdCLENBQUNDLGFBQWExRCxNQUFNc0MsTUFBTWtCO1FBQ2xERSxhQUFhMUQsU0FBUzBELGFBQWFILFFBQVFFLGdCQUFnQixDQUFDekQsTUFBTXNDLE1BQU1rQixVQUFVLGdGQUFnRjtJQUNwSztBQUNGLEdBQ0lJLGtCQUFrQixTQUFTQSxnQkFBZ0JMLE9BQU8sRUFBRXZELElBQUksRUFBRXNDLElBQUksRUFBRWtCLE9BQU87SUFDekUsSUFBSUQsUUFBUU0sbUJBQW1CLEVBQUU7UUFDL0IsSUFBSUgsWUFBWXJGLGlCQUFpQixDQUFDMkIsS0FBSztRQUN2Q3VELFFBQVFNLG1CQUFtQixDQUFDSCxhQUFhMUQsTUFBTXNDLE1BQU1rQjtRQUNyREUsYUFBYTFELFNBQVMwRCxhQUFhSCxRQUFRTSxtQkFBbUIsQ0FBQzdELE1BQU1zQyxNQUFNa0I7SUFDN0U7QUFDRixHQUNJTSxrQkFBa0IsU0FBU0EsZ0JBQWdCQyxLQUFLO0lBQ2xEQSxNQUFNQyxjQUFjLElBQUlELE1BQU1DLGNBQWM7SUFDNUNELE1BQU1FLG1CQUFtQixJQUFJRixNQUFNRSxtQkFBbUIsSUFBSSw2QkFBNkI7QUFDekYsR0FDSUMsY0FBYyxTQUFTQSxZQUFZQyxJQUFJLEVBQUVDLEVBQUU7SUFDN0MsSUFBSXJDLElBQUlvQyxLQUFLbkMsTUFBTTtJQUVuQixNQUFPRCxJQUFLO1FBQ1YsSUFBSW9DLElBQUksQ0FBQ3BDLEVBQUUsQ0FBQ3NDLFVBQVUsS0FBS0QsSUFBSTtZQUM3QixPQUFPO1FBQ1Q7SUFDRjtBQUNGLEdBQ0lFLDJCQUEyQixTQUFTQSx5QkFBeUJQLEtBQUs7SUFDcEV6RixtQkFBbUJ5RixNQUFNUSxPQUFPLElBQUkxRixhQUFha0YsTUFBTVEsT0FBTyxDQUFDdkMsTUFBTTtJQUVyRTRCLGdCQUFnQkcsTUFBTVMsTUFBTSxFQUFFLFlBQVlGO0FBQzVDLEdBQ0lHLHdCQUF3QixTQUFTQSxzQkFBc0JWLEtBQUs7SUFDOUR6RixtQkFBbUJ5RixNQUFNUSxPQUFPLElBQUkxRixhQUFha0YsTUFBTVEsT0FBTyxDQUFDdkMsTUFBTTtJQUVyRXNCLGFBQWFTLE1BQU1TLE1BQU0sRUFBRSxZQUFZRjtBQUN6QyxHQUNJSSxtQkFBbUIsU0FBU0EsaUJBQWlCQyxHQUFHO0lBQ2xELE9BQU9qSCxLQUFLa0gsV0FBVyxJQUFJRCxJQUFJRSxTQUFTLElBQUlGLElBQUlHLGVBQWUsQ0FBQ0QsU0FBUyxJQUFJRixJQUFJSSxJQUFJLENBQUNGLFNBQVMsSUFBSTtBQUNyRyxHQUNJRyxvQkFBb0IsU0FBU0Esa0JBQWtCTCxHQUFHO0lBQ3BELE9BQU9qSCxLQUFLdUgsV0FBVyxJQUFJTixJQUFJTyxVQUFVLElBQUlQLElBQUlHLGVBQWUsQ0FBQ0ksVUFBVSxJQUFJUCxJQUFJSSxJQUFJLENBQUNHLFVBQVUsSUFBSTtBQUN4RyxHQUNJQyxxQkFBcUIsU0FBU0EsbUJBQW1CakYsQ0FBQyxFQUFFa0YsUUFBUTtJQUM5RDlCLGFBQWFwRCxHQUFHLFVBQVVrRjtJQUUxQixJQUFJLENBQUNDLFFBQVFuRixFQUFFb0YsVUFBVSxHQUFHO1FBQzFCSCxtQkFBbUJqRixFQUFFb0YsVUFBVSxFQUFFRjtJQUNuQztBQUNGLEdBQ0lHLHdCQUF3QixTQUFTQSxzQkFBc0JyRixDQUFDLEVBQUVrRixRQUFRO0lBQ3BFeEIsZ0JBQWdCMUQsR0FBRyxVQUFVa0Y7SUFFN0IsSUFBSSxDQUFDQyxRQUFRbkYsRUFBRW9GLFVBQVUsR0FBRztRQUMxQkMsc0JBQXNCckYsRUFBRW9GLFVBQVUsRUFBRUY7SUFDdEM7QUFDRixHQUNJQyxVQUFVLFNBQVNBLFFBQVFuRixDQUFDO0lBQzlCLE9BQU8sQ0FBQyxDQUFFLEVBQUNBLEtBQUtBLE1BQU10QyxlQUFlc0MsRUFBRXNGLFFBQVEsS0FBSyxLQUFLdEYsTUFBTXZDLEtBQUtvSCxJQUFJLElBQUk3RSxNQUFNeEMsUUFBUSxDQUFDd0MsRUFBRXNGLFFBQVEsSUFBSSxDQUFDdEYsRUFBRW9GLFVBQVU7QUFDeEgsR0FDSUcsZ0JBQWdCLFNBQVNBLGNBQWNsQyxPQUFPLEVBQUVtQyxJQUFJO0lBQ3RELElBQUlDLE1BQU1ELFNBQVMsTUFBTSxVQUFVLFVBQy9CRSxTQUFTLFdBQVdELEtBQ3BCRSxTQUFTLFdBQVdGO0lBQ3hCLE9BQU9qRyxLQUFLb0csR0FBRyxDQUFDLEdBQUdULFFBQVE5QixXQUFXN0QsS0FBS29HLEdBQUcsQ0FBQ2xJLFdBQVcsQ0FBQ2dJLE9BQU8sRUFBRS9ILEtBQUssQ0FBQytILE9BQU8sSUFBS2xJLENBQUFBLElBQUksQ0FBQyxVQUFVaUksSUFBSSxJQUFJL0gsV0FBVyxDQUFDaUksT0FBTyxJQUFJaEksS0FBSyxDQUFDZ0ksT0FBTyxJQUFJdEMsT0FBTyxDQUFDcUMsT0FBTyxHQUFHckMsT0FBTyxDQUFDc0MsT0FBTztBQUN4TCxHQUNJRSxvQkFBb0IsU0FBU0Esa0JBQWtCN0YsQ0FBQyxFQUFFOEYsV0FBVztJQUMvRCx1TUFBdU07SUFDdk0sSUFBSUMsSUFBSVIsY0FBY3ZGLEdBQUcsTUFDckJnRyxJQUFJVCxjQUFjdkYsR0FBRztJQUV6QixJQUFJbUYsUUFBUW5GLElBQUk7UUFDZEEsSUFBSW1CO0lBQ04sT0FBTztRQUNMMEUsa0JBQWtCN0YsRUFBRW9GLFVBQVUsRUFBRVU7SUFDbEM7SUFFQTlGLEVBQUVpRyxhQUFhLEdBQUdGO0lBQ2xCL0YsRUFBRWtHLGFBQWEsR0FBR0Y7SUFFbEIsSUFBSSxDQUFDRixhQUFhO1FBQ2hCOUYsRUFBRW1HLFVBQVUsR0FBR25HLEVBQUVnRixVQUFVLElBQUk7UUFDL0JoRixFQUFFb0csVUFBVSxHQUFHcEcsRUFBRTJFLFNBQVMsSUFBSTtJQUNoQztBQUNGLEdBQ0kwQixZQUFZLFNBQVNBLFVBQVVoRCxPQUFPLEVBQUVpRCxRQUFRLEVBQUVySCxLQUFLO0lBQ3pELElBQUltQixRQUFRaUQsUUFBUWpELEtBQUs7SUFFekIsSUFBSSxDQUFDQSxPQUFPO1FBQ1Y7SUFDRjtJQUVBLElBQUlqQixhQUFhaUIsS0FBSyxDQUFDa0csU0FBUyxHQUFHO1FBQ2pDQSxXQUFXdkksYUFBYXVJLFVBQVVqRCxZQUFZaUQ7SUFDaEQ7SUFFQSxJQUFJckgsU0FBUyxNQUFNO1FBQ2pCbUIsTUFBTTZCLGNBQWMsSUFBSTdCLE1BQU02QixjQUFjLENBQUNxRSxTQUFTcEcsT0FBTyxDQUFDLFlBQVksT0FBT3FHLFdBQVc7SUFDOUYsT0FBTztRQUNMbkcsS0FBSyxDQUFDa0csU0FBUyxHQUFHckg7SUFDcEI7QUFDRixHQUNJdUgsb0JBQW9CLFNBQVNBLGtCQUFrQm5ELE9BQU87SUFDeEQsT0FBTzdGLEtBQUtpSixnQkFBZ0IsQ0FBQ3BELG1CQUFtQnFELFVBQVVyRCxVQUFVQSxRQUFRc0QsSUFBSSxJQUFJLENBQUN0RCxRQUFRK0IsVUFBVSxJQUFJLENBQUMsR0FBR3VCLElBQUksSUFBSXREO0FBQ3pILEdBQ0ksMERBQTBEO0FBQzlEdUQsWUFBWSxDQUFDLEdBQ1QsMENBQTBDO0FBQzlDQyxhQUFhLFNBQVNBLFdBQVc3RyxDQUFDO0lBQ2hDLGlLQUFpSztJQUNqSyxJQUFJQSxNQUFNeEMsTUFBTTtRQUNkb0osVUFBVUUsSUFBSSxHQUFHRixVQUFVRyxHQUFHLEdBQUc7UUFDakNILFVBQVVJLEtBQUssR0FBR0osVUFBVUssS0FBSyxHQUFHdkosWUFBWXdKLFdBQVcsSUFBSWxILEVBQUVtSCxVQUFVLElBQUl4SixNQUFNdUosV0FBVyxJQUFJO1FBQ3BHTixVQUFVUSxNQUFNLEdBQUdSLFVBQVVTLE1BQU0sR0FBRyxDQUFDckgsRUFBRXNILFdBQVcsSUFBSSxLQUFLLEtBQUs1SixZQUFZNkosWUFBWSxHQUFHN0osWUFBWTZKLFlBQVksR0FBR3ZILEVBQUVzSCxXQUFXLElBQUkzSixNQUFNNEosWUFBWSxJQUFJO1FBQy9KLE9BQU9YO0lBQ1Q7SUFFQSxJQUFJbkMsTUFBTXpFLEVBQUV3SCxhQUFhLElBQUkvSixNQUN6QmdLLElBQUksQ0FBQ3RJLGFBQWFhLEVBQUUwSCxLQUFLLElBQUk7UUFDL0JaLE1BQU05RyxFQUFFMEgsS0FBSyxHQUFHNUMsa0JBQWtCTDtRQUNsQ3NDLEtBQUsvRyxFQUFFMkgsS0FBSyxHQUFHbkQsaUJBQWlCQztRQUNoQ3dDLE9BQU9qSCxFQUFFMEgsS0FBSyxHQUFHNUMsa0JBQWtCTCxPQUFPO1FBQzFDNEMsUUFBUXJILEVBQUUySCxLQUFLLEdBQUduRCxpQkFBaUJDLE9BQU87SUFDNUMsSUFBSSxDQUFDekUsRUFBRXNGLFFBQVEsSUFBSSxDQUFDbkcsYUFBYWEsRUFBRThHLElBQUksS0FBSyxDQUFDM0gsYUFBYWEsRUFBRStHLEdBQUcsSUFBSS9HLElBQUloQyxTQUFTZ0MsRUFBRSxDQUFDLEVBQUUsQ0FBQzRILHFCQUFxQjtJQUUzRyxJQUFJekksYUFBYXNJLEVBQUVSLEtBQUssS0FBSyxDQUFDOUgsYUFBYXNJLEVBQUVULEtBQUssR0FBRztRQUNuRFMsRUFBRVIsS0FBSyxHQUFHUSxFQUFFWCxJQUFJLEdBQUdXLEVBQUVULEtBQUs7UUFDMUJTLEVBQUVKLE1BQU0sR0FBR0ksRUFBRVYsR0FBRyxHQUFHVSxFQUFFTCxNQUFNO0lBQzdCLE9BQU8sSUFBSWpJLGFBQWFzSSxFQUFFVCxLQUFLLEdBQUc7UUFDaEMsbUtBQW1LO1FBQ25LUyxJQUFJO1lBQ0ZULE9BQU9TLEVBQUVSLEtBQUssR0FBR1EsRUFBRVgsSUFBSTtZQUN2Qk0sUUFBUUssRUFBRUosTUFBTSxHQUFHSSxFQUFFVixHQUFHO1lBQ3hCRSxPQUFPUSxFQUFFUixLQUFLO1lBQ2RILE1BQU1XLEVBQUVYLElBQUk7WUFDWk8sUUFBUUksRUFBRUosTUFBTTtZQUNoQk4sS0FBS1UsRUFBRVYsR0FBRztRQUNaO0lBQ0Y7SUFFQSxPQUFPVTtBQUNULEdBQ0lJLGlCQUFpQixTQUFTQSxlQUFldkQsTUFBTSxFQUFFeEUsSUFBSSxFQUFFZ0ksWUFBWTtJQUNyRSxJQUFJQyxPQUFPekQsT0FBT3lELElBQUksRUFDbEI3QyxXQUFXNkMsSUFBSSxDQUFDRCxhQUFhLEVBQzdCRSxZQUFZMUQsT0FBTzJELFVBQVUsQ0FBQ25JLEtBQUssRUFDbkNvSTtJQUVKLElBQUlsSixZQUFZa0csV0FBVztRQUN6QmdELFNBQVNoRCxTQUFTaUQsS0FBSyxDQUFDSixLQUFLSyxhQUFhLElBQUk5RCxRQUFReUQsSUFBSSxDQUFDRCxlQUFlLFNBQVMsSUFBSTtZQUFDeEQsT0FBTytELFlBQVk7U0FBQztJQUM5RztJQUVBLElBQUlMLGFBQWExRCxPQUFPZ0UsYUFBYSxDQUFDeEksVUFBVSxPQUFPO1FBQ3JEb0ksU0FBUztJQUNYO0lBRUEsT0FBT0E7QUFDVCxHQUNJSyxhQUFhLFNBQVNBLFdBQVdqRSxNQUFNLEVBQUVrRSxPQUFPO0lBQ2xELG9PQUFvTztJQUNwTyxJQUFJeEksSUFBSWhDLFNBQVNzRyxPQUFPLENBQUMsRUFBRSxFQUN2QnlDLEtBQ0FELE1BQ0EyQjtJQUVKLElBQUksQ0FBQ3pJLEVBQUVzRixRQUFRLElBQUl0RixNQUFNeEMsTUFBTTtRQUM3QixJQUFJLENBQUMyQixhQUFhbUYsT0FBT3dDLElBQUksR0FBRztZQUM5QjJCLFNBQVM7Z0JBQ1AxQyxHQUFHO2dCQUNIQyxHQUFHO1lBQ0wsR0FBRyxtRkFBbUY7WUFFdEYsT0FBTztnQkFDTGMsTUFBTXhDLE9BQU93QyxJQUFJLEdBQUcyQixPQUFPMUMsQ0FBQztnQkFDNUJnQixLQUFLekMsT0FBT3lDLEdBQUcsR0FBRzBCLE9BQU96QyxDQUFDO2dCQUMxQmdCLE9BQU8xQyxPQUFPMEMsS0FBSztnQkFDbkJJLFFBQVE5QyxPQUFPOEMsTUFBTTtZQUN2QjtRQUNGO1FBRUFOLE9BQU94QyxPQUFPb0UsR0FBRyxJQUFJcEUsT0FBT3FFLElBQUksSUFBSXJFLE9BQU9zRSxXQUFXLElBQUk7UUFDMUQ3QixNQUFNekMsT0FBT29FLEdBQUcsSUFBSXBFLE9BQU91RSxJQUFJLElBQUk7UUFDbkMsT0FBTztZQUNML0IsTUFBTUE7WUFDTkMsS0FBS0E7WUFDTEMsT0FBTyxDQUFDMUMsT0FBT3NCLEdBQUcsSUFBSXRCLE9BQU93RSxJQUFJLElBQUl4RSxPQUFPeUUsV0FBVyxJQUFJLEtBQUtqQztZQUNoRU0sUUFBUSxDQUFDOUMsT0FBT3NCLEdBQUcsSUFBSXRCLE9BQU8wRSxJQUFJLElBQUksS0FBS2pDO1FBQzdDO0lBQ0Y7SUFFQSxPQUFPa0Msa0JBQWtCakosR0FBR3dJO0FBQzlCLEdBQ0lVLFVBQVUsQ0FBQyxHQUNYLGdEQUFnRDtBQUNwREQsb0JBQW9CLFNBQVNBLGtCQUFrQjVGLE9BQU8sRUFBRW1GLE9BQU87SUFDN0RBLFVBQVV4SyxTQUFTd0ssUUFBUSxDQUFDLEVBQUU7SUFDOUIsSUFBSVcsUUFBUTlGLFFBQVErRixPQUFPLElBQUkvRixRQUFRZ0csZUFBZSxFQUNsRDVFLE1BQU1wQixRQUFRbUUsYUFBYSxJQUFJL0osTUFDL0JxSixNQUNBRyxPQUNBRixLQUNBTSxRQUNBaUMsUUFDQUMsSUFDQUMsSUFDQUMsSUFDQUMsSUFDQUMsTUFDQTNDLE9BQ0FJLFFBQ0F3QztJQUVKLElBQUl2RyxZQUFZN0YsTUFBTTtRQUNwQnVKLE1BQU12QyxpQkFBaUJDO1FBQ3ZCcUMsT0FBT2hDLGtCQUFrQkw7UUFDekJ3QyxRQUFRSCxPQUFRckMsQ0FBQUEsSUFBSUcsZUFBZSxDQUFDc0MsV0FBVyxJQUFJN0QsUUFBUThELFVBQVUsSUFBSTFDLElBQUlJLElBQUksQ0FBQ3FDLFdBQVcsSUFBSTtRQUNqR0csU0FBU04sTUFBTyxFQUFDMUQsUUFBUWlFLFdBQVcsSUFBSSxLQUFLLEtBQUs3QyxJQUFJRyxlQUFlLENBQUMyQyxZQUFZLEdBQUc5QyxJQUFJRyxlQUFlLENBQUMyQyxZQUFZLEdBQUdsRSxRQUFRaUUsV0FBVyxJQUFJN0MsSUFBSUksSUFBSSxDQUFDMEMsWUFBWSxJQUFJLElBQUksMlBBQTJQO0lBQ3phLE9BQU8sSUFBSWlCLFlBQVloTCxRQUFRMkIsYUFBYXFKLFVBQVU7UUFDcEQsT0FBT25GLFFBQVF1RSxxQkFBcUI7SUFDdEMsT0FBTztRQUNMZCxPQUFPQyxNQUFNO1FBRWIsSUFBSW9DLE9BQU87WUFDVFEsT0FBT3RHLFFBQVErRixPQUFPO1lBQ3RCcEMsUUFBUTJDLEtBQUszQyxLQUFLO1lBQ2xCSSxTQUFTdUMsS0FBS3ZDLE1BQU07UUFDdEIsT0FBTztZQUNMLElBQUkvRCxRQUFRd0csT0FBTyxJQUFLRixDQUFBQSxPQUFPdEcsUUFBUXdHLE9BQU8sQ0FBQ0MsT0FBTyxHQUFHO2dCQUN2RGhELE9BQU82QyxLQUFLNUQsQ0FBQyxJQUFJO2dCQUNqQmdCLE1BQU00QyxLQUFLM0QsQ0FBQyxJQUFJO2dCQUNoQmdCLFFBQVEyQyxLQUFLM0MsS0FBSztnQkFDbEJJLFNBQVN1QyxLQUFLdkMsTUFBTTtZQUN0QjtZQUVBLElBQUksQ0FBQ0osT0FBTztnQkFDVjRDLEtBQUtwRCxrQkFBa0JuRDtnQkFDdkJzRyxPQUFPQyxHQUFHRyxTQUFTLEtBQUs7Z0JBQ3hCL0MsUUFBUSxDQUFDZ0QsV0FBV0osR0FBRzVDLEtBQUssS0FBSzNELFFBQVE2RCxXQUFXLElBQUksS0FBTXlDLENBQUFBLE9BQU8sSUFBSUssV0FBV0osR0FBR0ssZUFBZSxJQUFJRCxXQUFXSixHQUFHTSxnQkFBZ0I7Z0JBQ3hJOUMsU0FBUyxDQUFDNEMsV0FBV0osR0FBR3hDLE1BQU0sS0FBSy9ELFFBQVFrRSxZQUFZLElBQUksS0FBTW9DLENBQUFBLE9BQU8sSUFBSUssV0FBV0osR0FBR08sY0FBYyxJQUFJSCxXQUFXSixHQUFHUSxpQkFBaUI7WUFDN0k7UUFDRjtRQUVBbkQsUUFBUUQ7UUFDUkssU0FBU0Q7SUFDWDtJQUVBLElBQUkvRCxZQUFZbUYsU0FBUztRQUN2QixPQUFPO1lBQ0wxQixNQUFNQTtZQUNOQyxLQUFLQTtZQUNMQyxPQUFPQyxRQUFRSDtZQUNmTSxRQUFRQyxTQUFTTjtRQUNuQjtJQUNGO0lBRUF1QyxTQUFTak0saUVBQWVBLENBQUNtTCxTQUFTLE1BQU02QixRQUFRLENBQUNoTixpRUFBZUEsQ0FBQ2dHO0lBQ2pFa0csS0FBS0QsT0FBT25CLEtBQUssQ0FBQztRQUNoQnBDLEdBQUdlO1FBQ0hkLEdBQUdlO0lBQ0w7SUFDQXlDLEtBQUtGLE9BQU9uQixLQUFLLENBQUM7UUFDaEJwQyxHQUFHa0I7UUFDSGpCLEdBQUdlO0lBQ0w7SUFDQTBDLEtBQUtILE9BQU9uQixLQUFLLENBQUM7UUFDaEJwQyxHQUFHa0I7UUFDSGpCLEdBQUdxQjtJQUNMO0lBQ0FxQyxLQUFLSixPQUFPbkIsS0FBSyxDQUFDO1FBQ2hCcEMsR0FBR2U7UUFDSGQsR0FBR3FCO0lBQ0w7SUFDQVAsT0FBT3RILEtBQUtrSixHQUFHLENBQUNhLEdBQUd4RCxDQUFDLEVBQUV5RCxHQUFHekQsQ0FBQyxFQUFFMEQsR0FBRzFELENBQUMsRUFBRTJELEdBQUczRCxDQUFDO0lBQ3RDZ0IsTUFBTXZILEtBQUtrSixHQUFHLENBQUNhLEdBQUd2RCxDQUFDLEVBQUV3RCxHQUFHeEQsQ0FBQyxFQUFFeUQsR0FBR3pELENBQUMsRUFBRTBELEdBQUcxRCxDQUFDO0lBQ3JDLE9BQU87UUFDTGMsTUFBTUE7UUFDTkMsS0FBS0E7UUFDTEMsT0FBT3hILEtBQUtvRyxHQUFHLENBQUMyRCxHQUFHeEQsQ0FBQyxFQUFFeUQsR0FBR3pELENBQUMsRUFBRTBELEdBQUcxRCxDQUFDLEVBQUUyRCxHQUFHM0QsQ0FBQyxJQUFJZTtRQUMxQ00sUUFBUTVILEtBQUtvRyxHQUFHLENBQUMyRCxHQUFHdkQsQ0FBQyxFQUFFd0QsR0FBR3hELENBQUMsRUFBRXlELEdBQUd6RCxDQUFDLEVBQUUwRCxHQUFHMUQsQ0FBQyxJQUFJZTtJQUM3QztBQUNGLEdBQ0l1RCxnQkFBZ0IsU0FBU0EsY0FBY0MsU0FBUyxFQUFFQyxJQUFJLEVBQUU1RSxHQUFHLEVBQUU4QyxHQUFHLEVBQUVwSCxNQUFNLEVBQUVtSixpQkFBaUI7SUFDN0YsSUFBSTFDLE9BQU8sQ0FBQyxHQUNSMkMsR0FDQTdJLEdBQ0E4STtJQUVKLElBQUlILE1BQU07UUFDUixJQUFJbEosV0FBVyxLQUFLa0osZ0JBQWdCN0ssT0FBTztZQUN6QyxxTUFBcU07WUFDck1vSSxLQUFLNkMsR0FBRyxHQUFHRixJQUFJLEVBQUU7WUFDakJDLElBQUlILEtBQUsxSSxNQUFNO1lBRWYsSUFBSTVDLFVBQVVzTCxJQUFJLENBQUMsRUFBRSxHQUFHO2dCQUN0QixnTUFBZ007Z0JBQ2hNLElBQUszSSxJQUFJLEdBQUdBLElBQUk4SSxHQUFHOUksSUFBSztvQkFDdEI2SSxDQUFDLENBQUM3SSxFQUFFLEdBQUdULE1BQU1vSixJQUFJLENBQUMzSSxFQUFFLEVBQUVQO2dCQUN4QjtZQUNGLE9BQU87Z0JBQ0wsSUFBS08sSUFBSSxHQUFHQSxJQUFJOEksR0FBRzlJLElBQUs7b0JBQ3RCNkksQ0FBQyxDQUFDN0ksRUFBRSxHQUFHMkksSUFBSSxDQUFDM0ksRUFBRSxHQUFHUDtnQkFDbkI7WUFDRjtZQUVBc0UsT0FBTyxLQUFLLHNkQUFzZDtZQUVsZThDLE9BQU87UUFDVCxPQUFPLElBQUkxSixZQUFZd0wsT0FBTztZQUM1QnpDLEtBQUs2QyxHQUFHLEdBQUcsU0FBVTNMLEtBQUs7Z0JBQ3hCLElBQUlpSixTQUFTc0MsS0FBS0ssSUFBSSxDQUFDTixXQUFXdEwsUUFDOUJzQyxNQUNBQztnQkFFSixJQUFJRixXQUFXLEdBQUc7b0JBQ2hCLElBQUlwQyxVQUFVZ0osU0FBUzt3QkFDckIzRyxPQUFPLENBQUM7d0JBRVIsSUFBS0MsS0FBSzBHLE9BQVE7NEJBQ2hCM0csSUFBSSxDQUFDQyxFQUFFLEdBQUcwRyxNQUFNLENBQUMxRyxFQUFFLEdBQUdGO3dCQUN4Qjt3QkFFQTRHLFNBQVMzRztvQkFDWCxPQUFPO3dCQUNMMkcsVUFBVTVHO29CQUNaO2dCQUNGO2dCQUVBLE9BQU80RyxRQUFRLG1NQUFtTTtZQUNwTjtRQUNGLE9BQU87WUFDTEgsS0FBSzZDLEdBQUcsR0FBR0o7UUFDYjtJQUNGO0lBRUEsSUFBSTVFLE9BQU9BLFFBQVEsR0FBRztRQUNwQm1DLEtBQUtuQyxHQUFHLEdBQUdBO0lBQ2I7SUFFQSxJQUFJOEMsT0FBT0EsUUFBUSxHQUFHO1FBQ3BCWCxLQUFLVyxHQUFHLEdBQUdBO0lBQ2I7SUFFQSxJQUFJK0IsbUJBQW1CO1FBQ3JCMUMsS0FBSytDLFFBQVEsR0FBRztJQUNsQjtJQUVBLE9BQU8vQztBQUNULEdBQ0lnRCxlQUFlLFNBQVNBLGFBQWExSCxPQUFPO0lBQzlDLDhVQUE4VTtJQUM5VSxJQUFJSDtJQUNKLE9BQU8sQ0FBQ0csV0FBVyxDQUFDQSxRQUFRMkgsWUFBWSxJQUFJM0gsWUFBWTFGLFFBQVEsUUFBUSxDQUFDdUYsT0FBT0csUUFBUTJILFlBQVksQ0FBQyxpQkFBZ0IsTUFBTyxVQUFVOUgsU0FBUyxXQUFZbEMsQ0FBQUEsaUJBQWlCaUssSUFBSSxDQUFDNUgsUUFBUTZILFFBQVEsR0FBRyxPQUFPN0gsUUFBUTJILFlBQVksQ0FBQyx1QkFBdUIsTUFBSyxJQUFLLE9BQU9ELGFBQWExSCxRQUFRK0IsVUFBVTtBQUN6UyxHQUNJK0YsaUJBQWlCLFNBQVNBLGVBQWV2SixRQUFRLEVBQUV3SixVQUFVO0lBQy9ELElBQUl2SixJQUFJRCxTQUFTRSxNQUFNLEVBQ25COUI7SUFFSixNQUFPNkIsSUFBSztRQUNWN0IsSUFBSTRCLFFBQVEsQ0FBQ0MsRUFBRTtRQUNmN0IsRUFBRXFMLFdBQVcsR0FBR3JMLEVBQUVzTCxhQUFhLEdBQUdGLGFBQWEsT0FBT2hNO1FBQ3REN0IsS0FBS2dPLEdBQUcsQ0FBQ3ZMLEdBQUc7WUFDVndMLE1BQU07WUFDTkMsWUFBWUwsYUFBYSxTQUFTO1FBQ3BDO0lBQ0Y7QUFDRixHQUNJTSxXQUFXLFNBQVNBLFNBQVNySSxPQUFPO0lBQ3RDLElBQUltRCxrQkFBa0JuRCxTQUFTc0ksUUFBUSxLQUFLLFNBQVM7UUFDbkQsT0FBTztJQUNUO0lBRUF0SSxVQUFVQSxRQUFRK0IsVUFBVTtJQUU1QixJQUFJL0IsV0FBV0EsUUFBUWlDLFFBQVEsS0FBSyxHQUFHO1FBQ3JDLHNEQUFzRDtRQUN0RCxPQUFPb0csU0FBU3JJO0lBQ2xCO0FBQ0YsR0FDSXVJLGFBQ0FDLGVBQ0EsMHJCQUEwckI7QUFDOXJCQyxjQUFjLFNBQVNBLFlBQVl6SSxPQUFPLEVBQUUwRSxJQUFJO0lBQzlDMUUsVUFBVTlGLEtBQUt3TyxLQUFLLENBQUNDLE9BQU8sQ0FBQzNJLFFBQVEsQ0FBQyxFQUFFO0lBQ3hDMEUsT0FBT0EsUUFBUSxDQUFDO0lBQ2hCLElBQUlrRSxVQUFVQyxTQUFTL0wsYUFBYSxDQUFDLFFBQ2pDQyxRQUFRNkwsUUFBUTdMLEtBQUssRUFDckIrTCxPQUFPOUksUUFBUStJLFVBQVUsRUFDekJDLFlBQVksR0FDWkMsYUFBYSxHQUNiQyxVQUFVbEosUUFBUXNCLFNBQVMsRUFDM0I2SCxXQUFXbkosUUFBUTJCLFVBQVUsRUFDN0J5SCxjQUFjcEosUUFBUW9KLFdBQVcsRUFDakNDLGVBQWVySixRQUFRcUosWUFBWSxFQUNuQ0MsZ0JBQWdCLEdBQ2hCQyxVQUFVLEdBQ1ZDLFNBQVMsR0FDVEMsY0FDQUMsZUFDQUMsZUFDQUMsVUFDQUMsZ0JBQ0FDO0lBRUosSUFBSXZCLGVBQWU3RCxLQUFLcUYsT0FBTyxLQUFLLE9BQU87UUFDekNGLGlCQUFpQjtRQUNqQkMsZUFBZTtJQUNqQixPQUFPLElBQUk5TixnQkFBZ0I7UUFDekI2TixpQkFBaUI7UUFDakJDLGVBQWU7SUFDakI7SUFFQSxJQUFJLENBQUN4SSxTQUFTLEdBQUcsU0FBVTFGLEtBQUssRUFBRW9PLEtBQUs7UUFDckMsSUFBSSxDQUFDQyxVQUFVeEwsTUFBTSxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUNpRixHQUFHO1FBQ2xCO1FBRUEsSUFBSSxDQUFDQSxHQUFHLENBQUMsQ0FBQzlILE9BQU9vTztJQUNuQjtJQUVBLElBQUksQ0FBQ3JJLFVBQVUsR0FBRyxTQUFVL0YsS0FBSyxFQUFFb08sS0FBSztRQUN0QyxJQUFJLENBQUNDLFVBQVV4TCxNQUFNLEVBQUU7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQ2dGLElBQUk7UUFDbkI7UUFFQSxJQUFJLENBQUNBLElBQUksQ0FBQyxDQUFDN0gsT0FBT29PO0lBQ3BCO0lBRUEsSUFBSSxDQUFDdkcsSUFBSSxHQUFHLFNBQVU3SCxLQUFLLEVBQUVvTyxLQUFLO1FBQ2hDLElBQUksQ0FBQ0MsVUFBVXhMLE1BQU0sRUFBRTtZQUNyQixPQUFPLENBQUV1QixDQUFBQSxRQUFRMkIsVUFBVSxHQUFHc0gsVUFBUztRQUN6QztRQUVBLElBQUlpQixNQUFNbEssUUFBUTJCLFVBQVUsR0FBR3dILFVBQzNCZ0IsWUFBWWxCO1FBRWhCLElBQUksQ0FBQ2lCLE1BQU0sS0FBS0EsTUFBTSxDQUFDLE1BQU0sQ0FBQ0YsT0FBTztZQUNuQyw4SUFBOEk7WUFDOUliLFdBQVduSixRQUFRMkIsVUFBVTtZQUM3QnpILEtBQUtrUSxZQUFZLENBQUMsSUFBSSxFQUFFO2dCQUN0QjNHLE1BQU07Z0JBQ045QixZQUFZO1lBQ2Q7WUFDQSxJQUFJLENBQUM4QixJQUFJLENBQUMsQ0FBQzBGO1lBRVgsSUFBSXpFLEtBQUsyRixNQUFNLEVBQUU7Z0JBQ2YzRixLQUFLMkYsTUFBTTtZQUNiO1lBRUE7UUFDRjtRQUVBek8sUUFBUSxDQUFDQSxPQUFPLDBEQUEwRDtRQUUxRSxJQUFJQSxRQUFRLEdBQUc7WUFDYnFOLGFBQWFyTixRQUFRLE1BQU07WUFDM0JBLFFBQVE7UUFDVixPQUFPLElBQUlBLFFBQVEyTixTQUFTO1lBQzFCTixhQUFhck4sUUFBUTJOLFVBQVU7WUFDL0IzTixRQUFRMk47UUFDVixPQUFPO1lBQ0xOLGFBQWE7UUFDZjtRQUVBLElBQUlBLGNBQWNrQixXQUFXO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUNHLEtBQUssRUFBRTtnQkFDZnZOLEtBQUssQ0FBQ2YsZUFBZSxHQUFHNk4saUJBQWlCLENBQUNaLGFBQWEsUUFBUSxDQUFDRCxZQUFZYztZQUM5RTtZQUVBLElBQUliLGFBQWFLLGlCQUFpQixHQUFHO2dCQUNuQ3ZNLE1BQU13TixZQUFZLEdBQUd0QixhQUFhSyxnQkFBZ0I7WUFDcEQ7UUFDRjtRQUVBdEosUUFBUTJCLFVBQVUsR0FBRy9GLFFBQVE7UUFDN0J1TixXQUFXbkosUUFBUTJCLFVBQVUsRUFBRSwyTEFBMkw7SUFDNU47SUFFQSxJQUFJLENBQUMrQixHQUFHLEdBQUcsU0FBVTlILEtBQUssRUFBRW9PLEtBQUs7UUFDL0IsSUFBSSxDQUFDQyxVQUFVeEwsTUFBTSxFQUFFO1lBQ3JCLE9BQU8sQ0FBRXVCLENBQUFBLFFBQVFzQixTQUFTLEdBQUcwSCxTQUFRO1FBQ3ZDO1FBRUEsSUFBSWtCLE1BQU1sSyxRQUFRc0IsU0FBUyxHQUFHNEgsU0FDMUJpQixZQUFZbkI7UUFFaEIsSUFBSSxDQUFDa0IsTUFBTSxLQUFLQSxNQUFNLENBQUMsTUFBTSxDQUFDRixPQUFPO1lBQ25DLDhJQUE4STtZQUM5SWQsVUFBVWxKLFFBQVFzQixTQUFTO1lBQzNCcEgsS0FBS2tRLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3RCMUcsS0FBSztnQkFDTHBDLFdBQVc7WUFDYjtZQUNBLElBQUksQ0FBQ29DLEdBQUcsQ0FBQyxDQUFDd0Y7WUFFVixJQUFJeEUsS0FBSzJGLE1BQU0sRUFBRTtnQkFDZjNGLEtBQUsyRixNQUFNO1lBQ2I7WUFFQTtRQUNGO1FBRUF6TyxRQUFRLENBQUNBLE9BQU8sMERBQTBEO1FBRTFFLElBQUlBLFFBQVEsR0FBRztZQUNib04sWUFBWXBOLFFBQVEsTUFBTTtZQUMxQkEsUUFBUTtRQUNWLE9BQU8sSUFBSUEsUUFBUTROLFFBQVE7WUFDekJSLFlBQVlwTixRQUFRNE4sU0FBUztZQUM3QjVOLFFBQVE0TjtRQUNWLE9BQU87WUFDTFIsWUFBWTtRQUNkO1FBRUEsSUFBSUEsYUFBYW1CLFdBQVc7WUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQ0csS0FBSyxFQUFFO2dCQUNmdk4sS0FBSyxDQUFDZixlQUFlLEdBQUc2TixpQkFBaUIsQ0FBQ1osYUFBYSxRQUFRLENBQUNELFlBQVljO1lBQzlFO1FBQ0Y7UUFFQTlKLFFBQVFzQixTQUFTLEdBQUcxRixRQUFRO1FBQzVCc04sVUFBVWxKLFFBQVFzQixTQUFTO0lBQzdCO0lBRUEsSUFBSSxDQUFDa0osWUFBWSxHQUFHO1FBQ2xCLE9BQU9oQjtJQUNUO0lBRUEsSUFBSSxDQUFDaUIsYUFBYSxHQUFHO1FBQ25CLE9BQU9sQjtJQUNUO0lBRUEsSUFBSSxDQUFDbUIsT0FBTyxHQUFHO1FBQ2I1QixPQUFPRixRQUFRRyxVQUFVO1FBRXpCLE1BQU9ELEtBQU07WUFDWGMsV0FBV2QsS0FBSzZCLFdBQVc7WUFDM0IzSyxRQUFRNEssV0FBVyxDQUFDOUI7WUFDcEJBLE9BQU9jO1FBQ1Q7UUFFQSxJQUFJNUosWUFBWTRJLFFBQVE3RyxVQUFVLEVBQUU7WUFDbEMseURBQXlEO1lBQ3pEL0IsUUFBUTZLLFdBQVcsQ0FBQ2pDO1FBQ3RCO0lBQ0Y7SUFFQSxJQUFJLENBQUNrQyxNQUFNLEdBQUc7UUFDWmhDLE9BQU85SSxRQUFRK0ksVUFBVTtRQUV6QixJQUFJRCxTQUFTRixTQUFTO1lBQ3BCO1FBQ0Y7UUFFQSxNQUFPRSxLQUFNO1lBQ1hjLFdBQVdkLEtBQUs2QixXQUFXO1lBQzNCL0IsUUFBUWdDLFdBQVcsQ0FBQzlCO1lBQ3BCQSxPQUFPYztRQUNUO1FBRUE1SixRQUFRNEssV0FBVyxDQUFDaEM7UUFDcEIsSUFBSSxDQUFDbUMsU0FBUztJQUNoQjtJQUVBLElBQUksQ0FBQ0EsU0FBUyxHQUFHLFNBQVVmLEtBQUs7UUFDOUIsSUFBSWdCLGVBQWVoTCxRQUFRNkQsV0FBVyxLQUFLNEYsY0FDdkNsRCxJQUNBN0QsR0FDQUM7UUFDSnVHLFVBQVVsSixRQUFRc0IsU0FBUztRQUMzQjZILFdBQVduSixRQUFRMkIsVUFBVTtRQUU3QixJQUFJcUosZ0JBQWdCaEwsUUFBUWtFLFlBQVksS0FBS3dGLGlCQUFpQmQsUUFBUXFDLFlBQVksS0FBS3RCLGlCQUFpQlAsZ0JBQWdCcEosUUFBUW9KLFdBQVcsSUFBSUMsaUJBQWlCckosUUFBUXFKLFlBQVksSUFBSSxDQUFDVyxPQUFPO1lBQzlMLFFBQVEsd0VBQXdFO1FBQ2xGO1FBRUEsSUFBSWhCLGFBQWFDLFlBQVk7WUFDM0J2RyxJQUFJLElBQUksQ0FBQ2UsSUFBSTtZQUNiZCxJQUFJLElBQUksQ0FBQ2UsR0FBRztZQUNaLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUN6RCxRQUFRMkIsVUFBVTtZQUM3QixJQUFJLENBQUMrQixHQUFHLENBQUMsQ0FBQzFELFFBQVFzQixTQUFTO1FBQzdCO1FBRUFpRixLQUFLcEQsa0JBQWtCbkQsVUFBVSxtWUFBbVk7UUFFcGEsSUFBSSxDQUFDZ0wsZ0JBQWdCaEIsT0FBTztZQUMxQmpOLE1BQU1tTyxPQUFPLEdBQUc7WUFDaEJuTyxNQUFNNEcsS0FBSyxHQUFHO1lBQ2Q1RyxNQUFNd04sWUFBWSxHQUFHO1lBQ3JCakIsZ0JBQWdCbk4sS0FBS29HLEdBQUcsQ0FBQyxHQUFHdkMsUUFBUW9KLFdBQVcsR0FBR3BKLFFBQVE2RCxXQUFXLEdBQUcsc0lBQXNJO1lBRTlNLElBQUl5RixlQUFlO2dCQUNqQkEsaUJBQWlCM0MsV0FBV0osR0FBRzRFLFdBQVcsSUFBSzNDLENBQUFBLGdCQUFnQjdCLFdBQVdKLEdBQUdnRSxZQUFZLElBQUk7WUFDL0Y7UUFDRjtRQUVBeE4sTUFBTW1PLE9BQU8sR0FBRztRQUNoQm5PLE1BQU11TCxRQUFRLEdBQUc7UUFDakJ2TCxNQUFNcU8sUUFBUSxHQUFHO1FBQ2pCck8sTUFBTXNPLGFBQWEsR0FBRztRQUN0QnRPLE1BQU0ySixTQUFTLEdBQUc7UUFDbEIzSixNQUFNNEcsS0FBSyxHQUFHO1FBQ2Q1RyxNQUFNd04sWUFBWSxHQUFHakIsZ0JBQWdCLE1BQU0sd0xBQXdMO1FBRW5PLElBQUlkLGVBQWU7WUFDakJ6TCxNQUFNdU8sYUFBYSxHQUFHL0UsR0FBRytFLGFBQWE7UUFDeEM7UUFFQTdCLGVBQWV6SixRQUFRNkQsV0FBVztRQUNsQzZGLGdCQUFnQjFKLFFBQVFrRSxZQUFZO1FBQ3BDa0YsY0FBY3BKLFFBQVFvSixXQUFXO1FBQ2pDQyxlQUFlckosUUFBUXFKLFlBQVk7UUFDbkNFLFVBQVV2SixRQUFRb0osV0FBVyxHQUFHSztRQUNoQ0QsU0FBU3hKLFFBQVFxSixZQUFZLEdBQUdLO1FBQ2hDQyxnQkFBZ0JmLFFBQVFxQyxZQUFZO1FBQ3BDbE8sTUFBTW1PLE9BQU8sR0FBRztRQUVoQixJQUFJeEksS0FBS0MsR0FBRztZQUNWLElBQUksQ0FBQ2MsSUFBSSxDQUFDZjtZQUNWLElBQUksQ0FBQ2dCLEdBQUcsQ0FBQ2Y7UUFDWDtJQUNGO0lBRUEsSUFBSSxDQUFDaUcsT0FBTyxHQUFHQTtJQUNmLElBQUksQ0FBQzVJLE9BQU8sR0FBR0E7SUFDZixJQUFJLENBQUNzSyxLQUFLLEdBQUc7SUFDYixJQUFJLENBQUNRLE1BQU07QUFDYixHQUNJUyxZQUFZLFNBQVNBLFVBQVVDLFFBQVE7SUFDekMsSUFBSWpRLG1CQUFtQnNOLFNBQVNySCxJQUFJLEVBQUU7UUFDcEMsSUFBSWlLLE1BQU1oUSxVQUFVQSxPQUFPaVEsU0FBUztRQUNwQ3ZSLE9BQU9zQjtRQUNQckIsT0FBT3lPO1FBQ1B4TyxjQUFjRCxLQUFLbUgsZUFBZTtRQUNsQ2pILFFBQVFGLEtBQUtvSCxJQUFJO1FBQ2pCakgsV0FBV2lDLGVBQWU7UUFDMUJyQixtQkFBbUIsQ0FBQyxDQUFDTSxPQUFPa1EsWUFBWTtRQUN4Q25SLGtCQUFrQmdDLGVBQWU7UUFDakNoQyxnQkFBZ0J1QyxLQUFLLENBQUM2TyxPQUFPLEdBQUc7UUFDaEMxUSxpQkFBaUJWLGdCQUFnQnVDLEtBQUssQ0FBQzhPLE1BQU0sS0FBSyxTQUFTLFNBQVM7UUFDcEU3USxhQUFheVEsT0FBT0EsSUFBSUssU0FBUyxDQUFDNUksV0FBVyxHQUFHNkksT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLHdIQUF3SDtRQUVuTWxSLGlCQUFpQixrQkFBa0JSLGVBQWUsaUJBQWlCRixRQUFRc1IsT0FBUUEsQ0FBQUEsSUFBSU8sY0FBYyxHQUFHLEtBQUtQLElBQUlRLGdCQUFnQixHQUFHO1FBRXBJekQsZ0JBQWdCO1lBQ2QsZ1hBQWdYO1lBQ2hYLElBQUkwRCxNQUFNMVAsZUFBZSxRQUNyQjJQLFFBQVEzUCxlQUFlLFFBQ3ZCNFAsYUFBYUQsTUFBTXBQLEtBQUssRUFDeEJzUCxTQUFTL1IsT0FDVGdTO1lBRUpGLFdBQVdsQixPQUFPLEdBQUc7WUFDckJrQixXQUFXOUQsUUFBUSxHQUFHO1lBQ3RCNEQsSUFBSW5QLEtBQUssQ0FBQzZPLE9BQU8sR0FBRztZQUNwQk0sSUFBSXRCLFdBQVcsQ0FBQ3VCO1lBQ2hCRSxPQUFPekIsV0FBVyxDQUFDc0I7WUFDbkJJLE1BQU1ILE1BQU1sQixZQUFZLEdBQUcsS0FBS2lCLElBQUk3QyxZQUFZLEVBQUUsb0tBQW9LO1lBRXROZ0QsT0FBT3hCLFdBQVcsQ0FBQ3FCO1lBQ25CLE9BQU9JO1FBQ1Q7UUFFQXhSLG9CQUFvQixTQUFVeVIsS0FBSztZQUNqQyw2TkFBNk47WUFDN04sSUFBSUMsV0FBV0QsTUFBTUUsS0FBSyxDQUFDLE1BQ3ZCQyxZQUFZLENBQUMsbUJBQW1CblMsV0FBVyxvREFBb0QscUJBQXFCQSxXQUFXLDREQUE0RGdTLEtBQUksRUFBR0UsS0FBSyxDQUFDLE1BQ3hNek8sTUFBTSxDQUFDLEdBQ1BRLElBQUk7WUFFUixNQUFPLEVBQUVBLElBQUksQ0FBQyxFQUFHO2dCQUNmUixHQUFHLENBQUN3TyxRQUFRLENBQUNoTyxFQUFFLENBQUMsR0FBR2tPLFNBQVMsQ0FBQ2xPLEVBQUU7Z0JBQy9CUixHQUFHLENBQUMwTyxTQUFTLENBQUNsTyxFQUFFLENBQUMsR0FBR2dPLFFBQVEsQ0FBQ2hPLEVBQUU7WUFDakMsRUFBRSw2R0FBNkc7WUFHL0csSUFBSTtnQkFDRm5FLFlBQVk2RixnQkFBZ0IsQ0FBQyxRQUFRLE1BQU10RyxPQUFPK1MsY0FBYyxDQUFDLENBQUMsR0FBRyxXQUFXO29CQUM5RUMsS0FBSyxTQUFTQTt3QkFDWmhTLG1CQUFtQjtvQkFDckI7Z0JBQ0Y7WUFDRixFQUFFLE9BQU8rQixHQUFHLENBQUM7WUFFYixPQUFPcUI7UUFDVCxFQUFFO1FBRUYrQixhQUFhM0YsTUFBTSxlQUFlMkIsYUFBYSwwSkFBMEo7UUFHek1nRSxhQUFhNUYsTUFBTSxhQUFhNEIsYUFBYSxvSEFBb0g7UUFHakt6QixTQUFTQSxNQUFNNEYsZ0JBQWdCLENBQUMsY0FBY25FLGFBQWEsc0dBQXNHO1FBRWpLZ0UsYUFBYTNGLE1BQU0sZUFBZTtZQUNoQyxJQUFLLElBQUkrRCxLQUFLVixRQUFTO2dCQUNyQixJQUFJQSxPQUFPLENBQUNVLEVBQUUsQ0FBQzBPLFNBQVMsRUFBRTtvQkFDeEJwUCxPQUFPLENBQUNVLEVBQUUsQ0FBQzJPLE9BQU87Z0JBQ3BCO1lBQ0Y7UUFDRjtRQUVBNVMsT0FBT08sZUFBZWU7SUFDeEI7SUFFQSxJQUFJdEIsTUFBTTtRQUNSZSxnQkFBZ0JmLEtBQUs2UyxPQUFPLENBQUNDLE9BQU87UUFFcEM1UixXQUFXbEIsS0FBSytTLElBQUksQ0FBQzlILE9BQU8sSUFBSSxZQUFhO1FBRTdDekssZUFBZVIsS0FBS3dPLEtBQUssQ0FBQ3dFLFdBQVc7UUFDckNsUixpQkFBaUJ0QixhQUFhc0I7UUFDOUJDLHVCQUF1QnZCLGFBQWF1QjtRQUNwQ3RCLFdBQVdULEtBQUt3TyxLQUFLLENBQUNDLE9BQU87UUFDN0J0TixpQkFBaUJuQixLQUFLK1MsSUFBSSxDQUFDRSxhQUFhO1FBQ3hDNUUsY0FBYyxDQUFDLENBQUM3TixhQUFhO0lBQy9CLE9BQU8sSUFBSThRLFVBQVU7UUFDbkI0QixRQUFRQyxJQUFJLENBQUM7SUFDZjtBQUNGO0FBRUEsSUFBSUMsa0JBQWtCLFdBQVcsR0FBRTtJQUNqQyxTQUFTQSxnQkFBZ0JyTSxNQUFNO1FBQzdCLElBQUksQ0FBQzJELFVBQVUsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQzNELE1BQU0sR0FBR0EsVUFBVSxJQUFJO0lBQzlCO0lBRUEsSUFBSXNNLFNBQVNELGdCQUFnQjNULFNBQVM7SUFFdEM0VCxPQUFPck4sZ0JBQWdCLEdBQUcsU0FBU0EsaUJBQWlCekQsSUFBSSxFQUFFb0YsUUFBUTtRQUNoRSxJQUFJakIsT0FBTyxJQUFJLENBQUNnRSxVQUFVLENBQUNuSSxLQUFLLElBQUssS0FBSSxDQUFDbUksVUFBVSxDQUFDbkksS0FBSyxHQUFHLEVBQUU7UUFFL0QsSUFBSSxDQUFDLENBQUNtRSxLQUFLbUwsT0FBTyxDQUFDbEssV0FBVztZQUM1QmpCLEtBQUszQixJQUFJLENBQUM0QztRQUNaO0lBQ0Y7SUFFQTBMLE9BQU9qTixtQkFBbUIsR0FBRyxTQUFTQSxvQkFBb0I3RCxJQUFJLEVBQUVvRixRQUFRO1FBQ3RFLElBQUlqQixPQUFPLElBQUksQ0FBQ2dFLFVBQVUsQ0FBQ25JLEtBQUssRUFDNUIrQixJQUFJb0MsUUFBUUEsS0FBS21MLE9BQU8sQ0FBQ2xLO1FBQzdCckQsS0FBSyxLQUFLb0MsS0FBS3JCLE1BQU0sQ0FBQ2YsR0FBRztJQUMzQjtJQUVBK08sT0FBT3RJLGFBQWEsR0FBRyxTQUFTQSxjQUFjeEksSUFBSTtRQUNoRCxJQUFJK1EsUUFBUSxJQUFJO1FBRWhCLElBQUkzSTtRQUNILEtBQUksQ0FBQ0QsVUFBVSxDQUFDbkksS0FBSyxJQUFJLEVBQUUsRUFBRXFDLE9BQU8sQ0FBQyxTQUFVK0MsUUFBUTtZQUN0RCxPQUFPQSxTQUFTMkYsSUFBSSxDQUFDZ0csT0FBTztnQkFDMUIvUSxNQUFNQTtnQkFDTndFLFFBQVF1TSxNQUFNdk0sTUFBTTtZQUN0QixPQUFPLFNBQVU0RCxDQUFBQSxTQUFTLEtBQUk7UUFDaEM7UUFDQSxPQUFPQSxRQUFRLHdEQUF3RDtJQUN6RTtJQUVBLE9BQU95STtBQUNUO0FBRU8sSUFBSUcsWUFBWSxXQUFXLEdBQUUsU0FBVUMsZ0JBQWdCO0lBQzVEbFUsZUFBZWlVLFdBQVdDO0lBRTFCLFNBQVNELFVBQVV4TSxNQUFNLEVBQUV5RCxJQUFJO1FBQzdCLElBQUlpSjtRQUVKQSxTQUFTRCxpQkFBaUJsRyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUk7UUFDNUMvTSxnQkFBZ0I4USxVQUFVO1FBQzFCdEssU0FBU3RHLFNBQVNzRyxPQUFPLENBQUMsRUFBRSxFQUFFLDBEQUEwRDtRQUV4RjBNLE9BQU9DLE1BQU0sR0FBR3ZTLGtCQUFrQkEsZUFBZTRGLFFBQVE7UUFFekQsSUFBSSxDQUFDaEcsZUFBZTtZQUNsQkEsZ0JBQWdCZixLQUFLNlMsT0FBTyxDQUFDQyxPQUFPO1FBQ3RDO1FBRUFXLE9BQU9qSixJQUFJLEdBQUdBLE9BQU8zRyxNQUFNMkcsUUFBUSxDQUFDO1FBQ3BDaUosT0FBTzFNLE1BQU0sR0FBR0E7UUFDaEIwTSxPQUFPakwsQ0FBQyxHQUFHaUwsT0FBT2hMLENBQUMsR0FBR2dMLE9BQU9FLFFBQVEsR0FBRztRQUN4Q0YsT0FBT0csY0FBYyxHQUFHbkgsV0FBV2pDLEtBQUtvSixjQUFjLEtBQUs7UUFDM0RILE9BQU9JLGNBQWMsR0FBR0MsTUFBTXRKLEtBQUtxSixjQUFjLElBQUksSUFBSXBILFdBQVdqQyxLQUFLcUosY0FBYyxLQUFLO1FBQzVGSixPQUFPTSxRQUFRLEdBQUd2SixLQUFLdUosUUFBUTtRQUMvQk4sT0FBT08sVUFBVSxHQUFHeEosS0FBS3dKLFVBQVUsSUFBSTtRQUN2Q1AsT0FBT1EsVUFBVSxHQUFHO1FBQ3BCUixPQUFPUyxpQkFBaUIsR0FBRyxDQUFDLENBQUMxSixLQUFLMEosaUJBQWlCO1FBQ25EbFUsS0FBS21VLFdBQVcsQ0FBQ3BOLFFBQVEsTUFBTSw4Q0FBOEM7UUFFN0UsSUFBSXhFLE9BQU8sQ0FBQ2lJLEtBQUtqSSxJQUFJLElBQUksS0FBSSxFQUFHeUcsV0FBVyxJQUN2Q29MLFNBQVMsQ0FBQzdSLEtBQUtzUCxPQUFPLENBQUMsUUFBUSxDQUFDdFAsS0FBS3NQLE9BQU8sQ0FBQyxNQUM3Q3dDLGVBQWU5UixLQUFLc1AsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEdBQzdDeUMsUUFBUUQsZUFBZSxhQUFhRCxTQUFTLE1BQU0sUUFDbkRHLFFBQVFILFNBQVMsTUFBTSxPQUN2QkksU0FBUyxDQUFDLENBQUUsRUFBQ2pTLEtBQUtzUCxPQUFPLENBQUMsUUFBUSxDQUFDdFAsS0FBS3NQLE9BQU8sQ0FBQyxXQUFXdFAsU0FBUyxRQUFPLEdBQzNFa1MsU0FBUyxDQUFDLENBQUUsRUFBQ2xTLEtBQUtzUCxPQUFPLENBQUMsUUFBUSxDQUFDdFAsS0FBS3NQLE9BQU8sQ0FBQyxVQUFVdFAsU0FBUyxRQUFPLEdBQzFFbVMsa0JBQWtCbEssS0FBS2tLLGVBQWUsSUFBSSxHQUMxQ3RWLE9BQU9ELHVCQUF1QnNVLFNBQzlCa0IsV0FBV2xVLFNBQVMrSixLQUFLb0ssT0FBTyxJQUFJcEssS0FBS3FLLE1BQU0sSUFBSTlOLFNBQ25EK04sWUFBWSxDQUFDLEdBQ2JDLGNBQWMsR0FDZEMsd0JBQXdCLE9BQ3hCQyxzQkFBc0J6SyxLQUFLeUssbUJBQW1CLElBQUksSUFDbERDLHdCQUF3QjFLLEtBQUswSyxxQkFBcUIsSUFBSSxJQUN0REMseUJBQXlCM0ssS0FBSzJLLHNCQUFzQixJQUFJLElBQ3hEQyx1QkFBdUI1SyxLQUFLNEssb0JBQW9CLElBQUksSUFDcERDLGNBQWM3SyxLQUFLOEssYUFBYSxJQUFJOUgsY0FDcEMrSCxZQUFZLEdBQ1pDLFVBQVV6TyxPQUFPME8sS0FBSyxJQUFJelYsS0FBSytTLElBQUksQ0FBQzJDLFFBQVEsQ0FBQzNPLFNBQzdDNE8sVUFBVXhILFNBQVNwSCxTQUNuQjZPLGVBQWUsU0FBU0EsYUFBYTdNLFFBQVEsRUFBRThNLElBQUk7WUFDckQsT0FBT3BKLFdBQVcrSSxRQUFROUMsR0FBRyxDQUFDM0wsUUFBUWdDLFVBQVU4TTtRQUNsRCxHQUNJQyxXQUFXL08sT0FBT2tELGFBQWEsSUFBSS9KLE1BQ25DNlYsU0FDQUMsYUFDQUMsZUFDQUMsZUFDQUMsZUFDQUMsZUFDQUMsV0FDQUMsaUJBQ0FDLGlCQUNBaEwsTUFDQUgsTUFDQUssTUFDQUgsTUFDQWtMLE9BQ0FDLFNBQ0FDLGdCQUNBQyxPQUNBQyxLQUNBQyxPQUNBQyxPQUNBQyxRQUNBQyxZQUNBQyxrQkFDQWxMLFFBQ0FtTCxhQUNBQywyQkFDQUMsZUFDQUMsZUFDQUMsZUFDQUMsc0JBQ0FDLHFCQUNBQyxhQUNBQyxTQUNBQyxnQkFBZ0IsU0FBU0EsY0FBY2xWLENBQUM7WUFDMUMsNERBQTREO1lBQzVELGtNQUFrTTtZQUNsTTRELGdCQUFnQjVEO1lBRWhCQSxFQUFFbVYsd0JBQXdCLElBQUluVixFQUFFbVYsd0JBQXdCO1lBQ3hELE9BQU87UUFDVCxHQUNJLHVYQUF1WDtRQUMzWEMsU0FBUyxTQUFTQSxPQUFPQyxjQUFjO1lBQ3JDLElBQUkxWSxLQUFLNFUsVUFBVSxJQUFJNVUsS0FBSzJZLFVBQVUsSUFBSy9DLENBQUFBLHlCQUF5QjJCLEtBQUksR0FBSTtnQkFDMUUsSUFBSWxVLElBQUlzRSxRQUNKaVIsbUJBQW1CNVksS0FBSzRVLFVBQVUsR0FBRyxJQUNyQyw2REFBNkQ7Z0JBQ2pFN0IsUUFDSThGLFFBQ0FDLE1BQ0FDLFVBQ0FDLFVBQ0FDLFNBQ0FDLFNBQ0FDO2dCQUNKdkQsd0JBQXdCO2dCQUN4QnBSLGFBQWF3RCxTQUFTLEdBQUduSCxLQUFLa0gsV0FBVyxJQUFJLE9BQU9sSCxLQUFLa0gsV0FBVyxHQUFHMk8sU0FBU3pPLGVBQWUsQ0FBQ0QsU0FBUyxJQUFJLE9BQU8wTyxTQUFTek8sZUFBZSxDQUFDRCxTQUFTLEdBQUcwTyxTQUFTeE8sSUFBSSxDQUFDRixTQUFTO2dCQUNoTHhELGFBQWE2RCxVQUFVLEdBQUd4SCxLQUFLdUgsV0FBVyxJQUFJLE9BQU92SCxLQUFLdUgsV0FBVyxHQUFHc08sU0FBU3pPLGVBQWUsQ0FBQ0ksVUFBVSxJQUFJLE9BQU9xTyxTQUFTek8sZUFBZSxDQUFDSSxVQUFVLEdBQUdxTyxTQUFTeE8sSUFBSSxDQUFDRyxVQUFVO2dCQUNwTDBRLFdBQVcvWSxLQUFLK1ksUUFBUSxHQUFHdlUsYUFBYTZELFVBQVU7Z0JBQ2xEMlEsV0FBV2haLEtBQUtnWixRQUFRLEdBQUd4VSxhQUFhd0QsU0FBUztnQkFFakQsTUFBTzNFLEtBQUssQ0FBQ3dWLE9BQVE7b0JBQ25CLCtGQUErRjtvQkFDL0ZBLFNBQVNyUSxRQUFRbkYsRUFBRW9GLFVBQVU7b0JBQzdCc0ssU0FBUzhGLFNBQVNyVSxlQUFlbkIsRUFBRW9GLFVBQVU7b0JBQzdDcVEsT0FBT0QsU0FBUzt3QkFDZG5PLFFBQVE3SCxLQUFLb0csR0FBRyxDQUFDbEksWUFBWTZKLFlBQVksRUFBRS9KLEtBQUs4SixXQUFXLElBQUk7d0JBQy9ETCxPQUFPekgsS0FBS29HLEdBQUcsQ0FBQ2xJLFlBQVl3SixXQUFXLEVBQUUxSixLQUFLMkosVUFBVSxJQUFJO3dCQUM1REwsTUFBTTt3QkFDTkMsS0FBSztvQkFDUCxJQUFJMkksT0FBTzlILHFCQUFxQjtvQkFDaENnTyxVQUFVQyxVQUFVO29CQUVwQixJQUFJN0QsUUFBUTt3QkFDVjhELE1BQU1wRyxPQUFPeEosYUFBYSxHQUFHd0osT0FBTy9LLFNBQVM7d0JBRTdDLElBQUltUixNQUFNLEdBQUc7NEJBQ1hELFVBQVVDO3dCQUNaLE9BQU8sSUFBSUgsV0FBV0YsS0FBS3BPLE1BQU0sR0FBR3FMLDBCQUEwQm9ELEtBQUs7NEJBQ2pFdkQsd0JBQXdCOzRCQUN4QnNELFVBQVVyVyxLQUFLa0osR0FBRyxDQUFDb04sS0FBS1AsbUJBQW9CLEtBQUkvVixLQUFLb0csR0FBRyxDQUFDLEdBQUc2UCxLQUFLcE8sTUFBTSxHQUFHc08sWUFBWWpELHNCQUFxQixJQUFLO3dCQUNsSCxPQUFPLElBQUlpRCxXQUFXRixLQUFLMU8sR0FBRyxHQUFHeUwsdUJBQXVCOUMsT0FBTy9LLFNBQVMsRUFBRTs0QkFDeEU0Tix3QkFBd0I7NEJBQ3hCc0QsVUFBVSxDQUFDclcsS0FBS2tKLEdBQUcsQ0FBQ2dILE9BQU8vSyxTQUFTLEVBQUU0USxtQkFBb0IsS0FBSS9WLEtBQUtvRyxHQUFHLENBQUMsR0FBRytQLFdBQVdGLEtBQUsxTyxHQUFHLElBQUl5TCxtQkFBa0IsSUFBSzt3QkFDMUg7d0JBRUEsSUFBSXFELFNBQVM7NEJBQ1huRyxPQUFPL0ssU0FBUyxJQUFJa1I7d0JBQ3RCO29CQUNGO29CQUVBLElBQUk5RCxRQUFRO3dCQUNWK0QsTUFBTXBHLE9BQU96SixhQUFhLEdBQUd5SixPQUFPMUssVUFBVTt3QkFFOUMsSUFBSThRLE1BQU0sR0FBRzs0QkFDWEYsVUFBVUU7d0JBQ1osT0FBTyxJQUFJSixXQUFXRCxLQUFLeE8sS0FBSyxHQUFHd0wseUJBQXlCcUQsS0FBSzs0QkFDL0R2RCx3QkFBd0I7NEJBQ3hCcUQsVUFBVXBXLEtBQUtrSixHQUFHLENBQUNvTixLQUFLUCxtQkFBb0IsS0FBSS9WLEtBQUtvRyxHQUFHLENBQUMsR0FBRzZQLEtBQUt4TyxLQUFLLEdBQUd5TyxZQUFZakQscUJBQW9CLElBQUs7d0JBQ2hILE9BQU8sSUFBSWlELFdBQVdELEtBQUszTyxJQUFJLEdBQUc2TCx3QkFBd0JqRCxPQUFPMUssVUFBVSxFQUFFOzRCQUMzRXVOLHdCQUF3Qjs0QkFDeEJxRCxVQUFVLENBQUNwVyxLQUFLa0osR0FBRyxDQUFDZ0gsT0FBTzFLLFVBQVUsRUFBRXVRLG1CQUFvQixLQUFJL1YsS0FBS29HLEdBQUcsQ0FBQyxHQUFHOFAsV0FBV0QsS0FBSzNPLElBQUksSUFBSTZMLG9CQUFtQixJQUFLO3dCQUM3SDt3QkFFQSxJQUFJaUQsU0FBUzs0QkFDWGxHLE9BQU8xSyxVQUFVLElBQUk0UTt3QkFDdkI7b0JBQ0Y7b0JBRUEsSUFBSUosVUFBV0ksQ0FBQUEsV0FBV0MsT0FBTSxHQUFJO3dCQUNsQ3JZLEtBQUt1WSxRQUFRLENBQUNyRyxPQUFPMUssVUFBVSxFQUFFMEssT0FBTy9LLFNBQVM7d0JBRWpEcVIsbUJBQW1CclosS0FBSytZLFFBQVEsR0FBR0UsU0FBU2paLEtBQUtnWixRQUFRLEdBQUdFO29CQUM5RDtvQkFFQTdWLElBQUkwUDtnQkFDTjtZQUNGO1lBRUEsSUFBSXdFLE9BQU87Z0JBQ1QsSUFBSW5PLElBQUlwSixLQUFLb0osQ0FBQyxFQUNWQyxJQUFJckosS0FBS3FKLENBQUM7Z0JBRWQsSUFBSTRMLGNBQWM7b0JBQ2hCalYsS0FBS3NaLE1BQU0sR0FBR2xRLElBQUlpRSxXQUFXK0ksUUFBUTdCLFFBQVE7b0JBQzdDdlUsS0FBS3VVLFFBQVEsR0FBR25MO29CQUNoQmdOLFFBQVE3QixRQUFRLEdBQUduTCxJQUFJO29CQUN2QmdOLFFBQVFtRCxlQUFlLENBQUMsR0FBR25EO2dCQUM3QixPQUFPO29CQUNMLElBQUlRLGFBQWE7d0JBQ2YsSUFBSXZCLFFBQVE7NEJBQ1ZyVixLQUFLd1osTUFBTSxHQUFHblEsSUFBSXVOLFlBQVl4TSxHQUFHOzRCQUNqQ3dNLFlBQVl4TSxHQUFHLENBQUNmO3dCQUNsQjt3QkFFQSxJQUFJK0wsUUFBUTs0QkFDVnBWLEtBQUtzWixNQUFNLEdBQUdsUSxJQUFJd04sWUFBWXpNLElBQUk7NEJBQ2xDeU0sWUFBWXpNLElBQUksQ0FBQ2Y7d0JBQ25CO29CQUNGLE9BQU8sSUFBSTRMLFFBQVE7d0JBQ2pCLElBQUlLLFFBQVE7NEJBQ1ZyVixLQUFLd1osTUFBTSxHQUFHblEsSUFBSWdFLFdBQVcrSSxRQUFRL00sQ0FBQzs0QkFDdEMrTSxRQUFRL00sQ0FBQyxHQUFHQSxJQUFJO3dCQUNsQjt3QkFFQSxJQUFJK0wsUUFBUTs0QkFDVnBWLEtBQUtzWixNQUFNLEdBQUdsUSxJQUFJaUUsV0FBVytJLFFBQVFoTixDQUFDOzRCQUN0Q2dOLFFBQVFoTixDQUFDLEdBQUdBLElBQUk7d0JBQ2xCO3dCQUVBZ04sUUFBUW1ELGVBQWUsQ0FBQyxHQUFHbkQ7b0JBQzdCLE9BQU87d0JBQ0wsSUFBSWYsUUFBUTs0QkFDVnJWLEtBQUt3WixNQUFNLEdBQUduUSxJQUFJZ0UsV0FBVzFGLE9BQU9sRSxLQUFLLENBQUMyRyxHQUFHLElBQUk7NEJBQ2pEekMsT0FBT2xFLEtBQUssQ0FBQzJHLEdBQUcsR0FBR2YsSUFBSTt3QkFDekI7d0JBRUEsSUFBSStMLFFBQVE7NEJBQ1ZwVixLQUFLc1osTUFBTSxHQUFHbFEsSUFBSWlFLFdBQVcxRixPQUFPbEUsS0FBSyxDQUFDMEcsSUFBSSxJQUFJOzRCQUNsRHhDLE9BQU9sRSxLQUFLLENBQUMwRyxJQUFJLEdBQUdmLElBQUk7d0JBQzFCO29CQUNGO2dCQUNGO2dCQUVBLElBQUk4TixtQkFBbUIsQ0FBQ3dCLGtCQUFrQixDQUFDVCxlQUFlO29CQUN4REEsZ0JBQWdCLE1BQU0sMERBQTBEO29CQUVoRixJQUFJL00sZUFBZWxMLE1BQU0sUUFBUSxjQUFjLE9BQU87d0JBQ3BELElBQUlvVixRQUFROzRCQUNWcFYsS0FBS29KLENBQUMsSUFBSXBKLEtBQUtzWixNQUFNO3dCQUN2Qjt3QkFFQSxJQUFJakUsUUFBUTs0QkFDVnJWLEtBQUtxSixDQUFDLElBQUlySixLQUFLd1osTUFBTTt3QkFDdkI7d0JBRUFmLE9BQU87b0JBQ1Q7b0JBRUFSLGdCQUFnQjtnQkFDbEI7WUFDRjtZQUVBVixRQUFRO1FBQ1YsR0FDSSwyVkFBMlY7UUFDL1ZrQyxTQUFTLFNBQVNBLE9BQU9DLFlBQVksRUFBRUMsUUFBUTtZQUM3QyxJQUFJdlEsSUFBSXBKLEtBQUtvSixDQUFDLEVBQ1ZDLElBQUlySixLQUFLcUosQ0FBQyxFQUNWdVEsY0FDQTNNO1lBRUosSUFBSSxDQUFDdEYsT0FBTzBPLEtBQUssRUFBRTtnQkFDakIsdUhBQXVIO2dCQUN2SEQsVUFBVXhWLEtBQUsrUyxJQUFJLENBQUMyQyxRQUFRLENBQUMzTztZQUMvQjtZQUVBeU8sUUFBUXlELE9BQU8sSUFBSWpaLEtBQUttVSxXQUFXLENBQUNwTixRQUFRLE1BQU0scUJBQXFCO1lBRXZFLElBQUlxTixRQUFRO2dCQUNWaFYsS0FBS29KLENBQUMsR0FBR2lFLFdBQVcrSSxRQUFRaE4sQ0FBQztnQkFDN0JwSixLQUFLcUosQ0FBQyxHQUFHZ0UsV0FBVytJLFFBQVEvTSxDQUFDO1lBQy9CLE9BQU8sSUFBSTRMLGNBQWM7Z0JBQ3ZCalYsS0FBS29KLENBQUMsR0FBR3BKLEtBQUt1VSxRQUFRLEdBQUdsSCxXQUFXK0ksUUFBUTdCLFFBQVE7WUFDdEQsT0FBTyxJQUFJcUMsYUFBYTtnQkFDdEI1VyxLQUFLcUosQ0FBQyxHQUFHdU4sWUFBWXhNLEdBQUc7Z0JBQ3hCcEssS0FBS29KLENBQUMsR0FBR3dOLFlBQVl6TSxJQUFJO1lBQzNCLE9BQU87Z0JBQ0xuSyxLQUFLcUosQ0FBQyxHQUFHZ0UsV0FBVzFGLE9BQU9sRSxLQUFLLENBQUMyRyxHQUFHLElBQUksQ0FBQzZDLEtBQUtwRCxrQkFBa0JsQyxPQUFNLEtBQU1zRixHQUFHN0MsR0FBRyxLQUFLO2dCQUN2RnBLLEtBQUtvSixDQUFDLEdBQUdpRSxXQUFXMUYsT0FBT2xFLEtBQUssQ0FBQzBHLElBQUksSUFBSSxDQUFDOEMsTUFBTSxDQUFDLEdBQUc5QyxJQUFJLEtBQUs7WUFDL0Q7WUFFQSxJQUFJLENBQUNzTixTQUFTQyxTQUFTQyxNQUFLLEtBQU0sQ0FBQ2dDLFlBQWEzWixDQUFBQSxLQUFLMlksVUFBVSxJQUFJM1ksS0FBSzhaLFVBQVUsR0FBRztnQkFDbkYsSUFBSW5DLFFBQVE7b0JBQ1ZwVCxPQUFPNkUsQ0FBQyxHQUFHcEosS0FBS29KLENBQUM7b0JBQ2pCN0UsT0FBTzhFLENBQUMsR0FBR3JKLEtBQUtxSixDQUFDO29CQUNqQnVRLGVBQWVqQyxPQUFPcFQ7b0JBRXRCLElBQUlxVixhQUFheFEsQ0FBQyxLQUFLcEosS0FBS29KLENBQUMsRUFBRTt3QkFDN0JwSixLQUFLb0osQ0FBQyxHQUFHd1EsYUFBYXhRLENBQUM7d0JBQ3ZCbU8sUUFBUTtvQkFDVjtvQkFFQSxJQUFJcUMsYUFBYXZRLENBQUMsS0FBS3JKLEtBQUtxSixDQUFDLEVBQUU7d0JBQzdCckosS0FBS3FKLENBQUMsR0FBR3VRLGFBQWF2USxDQUFDO3dCQUN2QmtPLFFBQVE7b0JBQ1Y7Z0JBQ0Y7Z0JBRUEsSUFBSUUsT0FBTztvQkFDVG1DLGVBQWVuQyxNQUFNelgsS0FBS29KLENBQUM7b0JBRTNCLElBQUl3USxpQkFBaUI1WixLQUFLb0osQ0FBQyxFQUFFO3dCQUMzQnBKLEtBQUtvSixDQUFDLEdBQUd3UTt3QkFFVCxJQUFJM0UsY0FBYzs0QkFDaEJqVixLQUFLdVUsUUFBUSxHQUFHcUY7d0JBQ2xCO3dCQUVBckMsUUFBUTtvQkFDVjtnQkFDRjtnQkFFQSxJQUFJRyxPQUFPO29CQUNUa0MsZUFBZWxDLE1BQU0xWCxLQUFLcUosQ0FBQztvQkFFM0IsSUFBSXVRLGlCQUFpQjVaLEtBQUtxSixDQUFDLEVBQUU7d0JBQzNCckosS0FBS3FKLENBQUMsR0FBR3VRO29CQUNYO29CQUVBckMsUUFBUTtnQkFDVjtZQUNGO1lBRUFBLFNBQVNrQixPQUFPO1lBRWhCLElBQUksQ0FBQ2lCLGNBQWM7Z0JBQ2pCMVosS0FBS3NaLE1BQU0sR0FBR3RaLEtBQUtvSixDQUFDLEdBQUdBO2dCQUN2QnBKLEtBQUt3WixNQUFNLEdBQUd4WixLQUFLcUosQ0FBQyxHQUFHQTtnQkFFdkI2QixlQUFlbEwsTUFBTSxlQUFlO1lBQ3RDO1FBQ0YsR0FDSStaLGdCQUFnQixTQUFTQSxjQUFjbE0sSUFBSSxFQUFFOUIsR0FBRyxFQUFFOUMsR0FBRyxFQUFFdEUsTUFBTTtZQUMvRCxJQUFJb0gsT0FBTyxNQUFNO2dCQUNmQSxNQUFNLENBQUNuSTtZQUNUO1lBRUEsSUFBSXFGLE9BQU8sTUFBTTtnQkFDZkEsTUFBTXJGO1lBQ1I7WUFFQSxJQUFJdkIsWUFBWXdMLE9BQU87Z0JBQ3JCLE9BQU8sU0FBVW1NLENBQUM7b0JBQ2hCLElBQUlDLGdCQUFnQixDQUFDamEsS0FBS3VULFNBQVMsR0FBRyxJQUFJLElBQUl2VCxLQUFLeVUsY0FBYyxFQUFFLGdKQUFnSjtvQkFFbk4sT0FBTzVHLEtBQUtLLElBQUksQ0FBQ2xPLE1BQU0sQ0FBQ2dhLElBQUkvUSxNQUFNQSxNQUFNLENBQUMrUSxJQUFJL1EsR0FBRSxJQUFLZ1IsZ0JBQWdCRCxJQUFJak8sTUFBTUEsTUFBTSxDQUFDaU8sSUFBSWpPLEdBQUUsSUFBS2tPLGdCQUFnQkQsQ0FBQUEsSUFBS3JWLFVBQVVBO2dCQUNqSTtZQUNGO1lBRUEsSUFBSTVCLFNBQVM4SyxPQUFPO2dCQUNsQixPQUFPLFNBQVVtTSxDQUFDO29CQUNoQixJQUFJOVUsSUFBSTJJLEtBQUsxSSxNQUFNLEVBQ2YrVSxVQUFVLEdBQ1ZDLFNBQVN2VyxTQUNUb1AsS0FDQXBDO29CQUVKLE1BQU8sRUFBRTFMLElBQUksQ0FBQyxFQUFHO3dCQUNmOE4sTUFBTW5GLElBQUksQ0FBQzNJLEVBQUU7d0JBQ2IwTCxNQUFNb0MsTUFBTWdIO3dCQUVaLElBQUlwSixNQUFNLEdBQUc7NEJBQ1hBLE1BQU0sQ0FBQ0E7d0JBQ1Q7d0JBRUEsSUFBSUEsTUFBTXVKLFVBQVVuSCxPQUFPakgsT0FBT2lILE9BQU8vSixLQUFLOzRCQUM1Q2lSLFVBQVVoVjs0QkFDVmlWLFNBQVN2Sjt3QkFDWDtvQkFDRjtvQkFFQSxPQUFPL0MsSUFBSSxDQUFDcU0sUUFBUTtnQkFDdEI7WUFDRjtZQUVBLE9BQU94RixNQUFNN0csUUFBUSxTQUFVbU0sQ0FBQztnQkFDOUIsT0FBT0E7WUFDVCxJQUFJO2dCQUNGLE9BQU9uTSxPQUFPbEo7WUFDaEI7UUFDRixHQUNJeVYscUJBQXFCLFNBQVNBLG1CQUFtQnZNLElBQUksRUFBRTdCLElBQUksRUFBRUcsSUFBSSxFQUFFRCxJQUFJLEVBQUVHLElBQUksRUFBRWdPLE1BQU0sRUFBRTFWLE1BQU07WUFDL0YwVixTQUFTQSxVQUFVQSxTQUFTelcsVUFBVXlXLFNBQVNBLFNBQVN6VyxTQUFTLDZFQUE2RTtZQUU5SSxJQUFJdkIsWUFBWXdMLE9BQU87Z0JBQ3JCLE9BQU8sU0FBVXlNLEtBQUs7b0JBQ3BCLElBQUlMLGdCQUFnQixDQUFDamEsS0FBS3VULFNBQVMsR0FBRyxJQUFJLElBQUl2VCxLQUFLeVUsY0FBYyxFQUM3RHJMLElBQUlrUixNQUFNbFIsQ0FBQyxFQUNYQyxJQUFJaVIsTUFBTWpSLENBQUMsRUFDWGtDLFFBQ0FnUCxJQUNBQyxJQUFJLGdKQUFnSjtvQkFFeEpGLE1BQU1sUixDQUFDLEdBQUdBLElBQUlBLElBQUkrQyxPQUFPQSxPQUFPLENBQUMvQyxJQUFJK0MsSUFBRyxJQUFLOE4sZ0JBQWdCN1EsSUFBSTRDLE9BQU9BLE9BQU8sQ0FBQzVDLElBQUk0QyxJQUFHLElBQUtpTyxnQkFBZ0I3UTtvQkFDNUdrUixNQUFNalIsQ0FBQyxHQUFHQSxJQUFJQSxJQUFJZ0QsT0FBT0EsT0FBTyxDQUFDaEQsSUFBSWdELElBQUcsSUFBSzROLGdCQUFnQjVRLElBQUk2QyxPQUFPQSxPQUFPLENBQUM3QyxJQUFJNkMsSUFBRyxJQUFLK04sZ0JBQWdCNVE7b0JBQzVHa0MsU0FBU3NDLEtBQUtLLElBQUksQ0FBQ2xPLE1BQU1zYTtvQkFFekIsSUFBSS9PLFdBQVcrTyxPQUFPO3dCQUNwQkEsTUFBTWxSLENBQUMsR0FBR21DLE9BQU9uQyxDQUFDO3dCQUNsQmtSLE1BQU1qUixDQUFDLEdBQUdrQyxPQUFPbEMsQ0FBQztvQkFDcEI7b0JBRUEsSUFBSTFFLFdBQVcsR0FBRzt3QkFDaEIyVixNQUFNbFIsQ0FBQyxJQUFJekU7d0JBQ1gyVixNQUFNalIsQ0FBQyxJQUFJMUU7b0JBQ2I7b0JBRUEsSUFBSTBWLFNBQVN6VyxTQUFTO3dCQUNwQjJXLEtBQUtELE1BQU1sUixDQUFDLEdBQUdBO3dCQUNmb1IsS0FBS0YsTUFBTWpSLENBQUMsR0FBR0E7d0JBRWYsSUFBSWtSLEtBQUtBLEtBQUtDLEtBQUtBLEtBQUtILFFBQVE7NEJBQzlCQyxNQUFNbFIsQ0FBQyxHQUFHQTs0QkFDVmtSLE1BQU1qUixDQUFDLEdBQUdBO3dCQUNaO29CQUNGO29CQUVBLE9BQU9pUjtnQkFDVDtZQUNGO1lBRUEsSUFBSXZYLFNBQVM4SyxPQUFPO2dCQUNsQixPQUFPLFNBQVVoSixDQUFDO29CQUNoQixJQUFJSyxJQUFJMkksS0FBSzFJLE1BQU0sRUFDZitVLFVBQVUsR0FDVk8sVUFBVTdXLFNBQ1Z3RixHQUNBQyxHQUNBaVIsT0FDQUk7b0JBRUosTUFBTyxFQUFFeFYsSUFBSSxDQUFDLEVBQUc7d0JBQ2ZvVixRQUFRek0sSUFBSSxDQUFDM0ksRUFBRTt3QkFDZmtFLElBQUlrUixNQUFNbFIsQ0FBQyxHQUFHdkUsRUFBRXVFLENBQUM7d0JBQ2pCQyxJQUFJaVIsTUFBTWpSLENBQUMsR0FBR3hFLEVBQUV3RSxDQUFDO3dCQUNqQnFSLE9BQU90UixJQUFJQSxJQUFJQyxJQUFJQTt3QkFFbkIsSUFBSXFSLE9BQU9ELFNBQVM7NEJBQ2xCUCxVQUFVaFY7NEJBQ1Z1VixVQUFVQzt3QkFDWjtvQkFDRjtvQkFFQSxPQUFPRCxXQUFXSixTQUFTeE0sSUFBSSxDQUFDcU0sUUFBUSxHQUFHclY7Z0JBQzdDO1lBQ0Y7WUFFQSxPQUFPLFNBQVVtVixDQUFDO2dCQUNoQixPQUFPQTtZQUNUO1FBQ0YsR0FDSVcsa0JBQWtCLFNBQVNBO1lBQzdCLElBQUlDLFFBQVFDLGNBQWNoTixNQUFNaU47WUFDaEM3RCxZQUFZO1lBRVosSUFBSUwsYUFBYTtnQkFDZkEsWUFBWW5GLFNBQVM7Z0JBQ3JCelIsS0FBS2dNLElBQUksR0FBR0EsT0FBTyxDQUFDNEssWUFBWXpGLGFBQWE7Z0JBQzdDblIsS0FBS2tNLElBQUksR0FBR0EsT0FBTyxDQUFDMEssWUFBWTFGLFlBQVk7Z0JBQzVDbFIsS0FBS21NLElBQUksR0FBR0EsT0FBT25NLEtBQUtxTSxJQUFJLEdBQUdBLE9BQU87Z0JBQ3RDNEssWUFBWTtZQUNkLE9BQU8sSUFBSSxDQUFDLENBQUM3TCxLQUFLd1AsTUFBTSxFQUFFO2dCQUN4QkEsU0FBU2hQLFdBQVdSLEtBQUt3UCxNQUFNLEVBQUVqVCxPQUFPYyxVQUFVLEdBQUcsa0tBQWtLO2dCQUV2TixJQUFJd00sY0FBYztvQkFDaEJqVixLQUFLZ00sSUFBSSxHQUFHQSxPQUFPNE8sT0FBT3pRLElBQUk7b0JBQzlCbkssS0FBS21NLElBQUksR0FBR0EsT0FBT3lPLE9BQU96USxJQUFJLEdBQUd5USxPQUFPdlEsS0FBSztvQkFDN0NySyxLQUFLa00sSUFBSSxHQUFHQSxPQUFPbE0sS0FBS3FNLElBQUksR0FBR0EsT0FBTztnQkFDeEMsT0FBTyxJQUFJLENBQUM3SixhQUFhNEksS0FBS3dQLE1BQU0sQ0FBQ3pPLElBQUksS0FBSyxDQUFDM0osYUFBYTRJLEtBQUt3UCxNQUFNLENBQUN2TyxJQUFJLEdBQUc7b0JBQzdFdU8sU0FBU3hQLEtBQUt3UCxNQUFNO29CQUNwQjVhLEtBQUtnTSxJQUFJLEdBQUdBLE9BQU80TyxPQUFPNU8sSUFBSTtvQkFDOUJoTSxLQUFLa00sSUFBSSxHQUFHQSxPQUFPME8sT0FBTzFPLElBQUk7b0JBQzlCbE0sS0FBS21NLElBQUksR0FBR0EsT0FBT3lPLE9BQU96TyxJQUFJO29CQUM5Qm5NLEtBQUtxTSxJQUFJLEdBQUdBLE9BQU91TyxPQUFPdk8sSUFBSTtnQkFDaEMsT0FBTztvQkFDTHdPLGVBQWVqUCxXQUFXakUsUUFBUUEsT0FBT2MsVUFBVTtvQkFDbkR6SSxLQUFLZ00sSUFBSSxHQUFHQSxPQUFPbkosS0FBS0MsS0FBSyxDQUFDMFQsYUFBYXRCLE9BQU8sUUFBUTBGLE9BQU96USxJQUFJLEdBQUcwUSxhQUFhMVEsSUFBSTtvQkFDekZuSyxLQUFLa00sSUFBSSxHQUFHQSxPQUFPckosS0FBS0MsS0FBSyxDQUFDMFQsYUFBYXJCLE9BQU8sUUFBUXlGLE9BQU94USxHQUFHLEdBQUd5USxhQUFhelEsR0FBRztvQkFDdkZwSyxLQUFLbU0sSUFBSSxHQUFHQSxPQUFPdEosS0FBS0MsS0FBSyxDQUFDa0osT0FBUTRPLENBQUFBLE9BQU92USxLQUFLLEdBQUd3USxhQUFheFEsS0FBSztvQkFDdkVySyxLQUFLcU0sSUFBSSxHQUFHQSxPQUFPeEosS0FBS0MsS0FBSyxDQUFDb0osT0FBUTBPLENBQUFBLE9BQU9uUSxNQUFNLEdBQUdvUSxhQUFhcFEsTUFBTTtnQkFDM0U7Z0JBRUEsSUFBSXVCLE9BQU9HLE1BQU07b0JBQ2ZuTSxLQUFLZ00sSUFBSSxHQUFHRztvQkFDWm5NLEtBQUttTSxJQUFJLEdBQUdBLE9BQU9IO29CQUNuQkEsT0FBT2hNLEtBQUtnTSxJQUFJO2dCQUNsQjtnQkFFQSxJQUFJRSxPQUFPRyxNQUFNO29CQUNmck0sS0FBS2tNLElBQUksR0FBR0c7b0JBQ1pyTSxLQUFLcU0sSUFBSSxHQUFHQSxPQUFPSDtvQkFDbkJBLE9BQU9sTSxLQUFLa00sSUFBSTtnQkFDbEI7Z0JBRUEsSUFBSStJLGNBQWM7b0JBQ2hCalYsS0FBS2lNLFdBQVcsR0FBR0Q7b0JBQ25CaE0sS0FBS29NLFdBQVcsR0FBR0Q7Z0JBQ3JCO2dCQUVBOEssWUFBWTtZQUNkO1lBRUEsSUFBSTdMLEtBQUsyUCxRQUFRLEVBQUU7Z0JBQ2pCbE4sT0FBT3pDLEtBQUsyUCxRQUFRLEtBQUssT0FBTzNQLEtBQUt5QyxJQUFJLElBQUksQ0FBQyxJQUFJekMsS0FBSzJQLFFBQVE7Z0JBQy9ERCxZQUFZL1gsU0FBUzhLLFNBQVN4TCxZQUFZd0w7Z0JBRTFDLElBQUlvSCxjQUFjO29CQUNoQndDLFFBQVFzQyxjQUFjZSxZQUFZak4sT0FBT0EsS0FBSzBHLFFBQVEsRUFBRXZJLE1BQU1HLE1BQU07b0JBQ3BFdUwsUUFBUTtnQkFDVixPQUFPO29CQUNMLElBQUk3SixLQUFLbU4sTUFBTSxFQUFFO3dCQUNmckQsU0FBU3lDLG1CQUFtQlUsWUFBWWpOLE9BQU9BLEtBQUttTixNQUFNLEVBQUVoUCxNQUFNRyxNQUFNRCxNQUFNRyxNQUFNd0IsS0FBS3dNLE1BQU0sRUFBRXpELGNBQWMsQ0FBQyxJQUFJO29CQUN0SCxPQUFPO3dCQUNMLElBQUl4QixRQUFROzRCQUNWcUMsUUFBUXNDLGNBQWNlLFlBQVlqTixPQUFPQSxLQUFLekUsQ0FBQyxJQUFJeUUsS0FBSzFELElBQUksSUFBSTBELEtBQUt4RixVQUFVLEVBQUUyRCxNQUFNRyxNQUFNeUssY0FBYyxDQUFDLElBQUk7d0JBQ2xIO3dCQUVBLElBQUl2QixRQUFROzRCQUNWcUMsUUFBUXFDLGNBQWNlLFlBQVlqTixPQUFPQSxLQUFLeEUsQ0FBQyxJQUFJd0UsS0FBS3pELEdBQUcsSUFBSXlELEtBQUs3RixTQUFTLEVBQUVrRSxNQUFNRyxNQUFNdUssY0FBYyxDQUFDLElBQUk7d0JBQ2hIO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRixHQUNJcUUsa0JBQWtCLFNBQVNBO1lBQzdCamIsS0FBSzhaLFVBQVUsR0FBRztZQUVsQjVPLGVBQWVsTCxNQUFNLGlCQUFpQjtRQUN4QyxHQUNJa2IsbUJBQW1CLFNBQVNBO1lBQzlCbGIsS0FBSzhaLFVBQVUsR0FBRztRQUNwQixHQUNJcUIsVUFBVSxTQUFTQSxRQUFRekgsT0FBTyxFQUFFNUYsaUJBQWlCO1lBQ3ZELElBQUlELE1BQU1pTixXQUFXTSxPQUFPQztZQUU1QixJQUFJM0gsV0FBVy9SLGVBQWU7Z0JBQzVCLElBQUkrUixZQUFZLE1BQU07b0JBQ3BCN0YsT0FBT3pDLEtBQUt5QyxJQUFJLElBQUl6QyxLQUFLMlAsUUFBUSxJQUFJLENBQUM7b0JBQ3RDRCxZQUFZL1gsU0FBUzhLLFNBQVN4TCxZQUFZd0w7b0JBQzFDNkYsVUFBVTt3QkFDUjRILFlBQVksQ0FBQ2xRLEtBQUttUSxlQUFlLElBQUluUSxLQUFLa1EsVUFBVSxJQUFJLElBQUcsSUFBTXJHLENBQUFBLGVBQWUsS0FBSztvQkFDdkY7b0JBRUEsSUFBSUEsY0FBYzt3QkFDaEJ2QixRQUFRYSxRQUFRLEdBQUc1RyxjQUFjM04sTUFBTThhLFlBQVlqTixPQUFPQSxLQUFLMEcsUUFBUSxFQUFFcEksTUFBTUgsTUFBTSxHQUFHOEI7b0JBQzFGLE9BQU87d0JBQ0wsSUFBSXNILFFBQVE7NEJBQ1YxQixPQUFPLENBQUN3QixNQUFNLEdBQUd2SCxjQUFjM04sTUFBTThhLFlBQVlqTixPQUFPQSxLQUFLbU4sTUFBTSxJQUFJbk4sS0FBS3pFLENBQUMsSUFBSXlFLEtBQUsxRCxJQUFJLEVBQUVnQyxNQUFNSCxNQUFNNEssY0FBYyxDQUFDLElBQUksR0FBRzlJLHFCQUFxQjlOLEtBQUs2VSxVQUFVLEtBQUs7d0JBQ3pLO3dCQUVBLElBQUlRLFFBQVE7NEJBQ1YzQixPQUFPLENBQUN5QixNQUFNLEdBQUd4SCxjQUFjM04sTUFBTThhLFlBQVlqTixPQUFPQSxLQUFLbU4sTUFBTSxJQUFJbk4sS0FBS3hFLENBQUMsSUFBSXdFLEtBQUt6RCxHQUFHLEVBQUVpQyxNQUFNSCxNQUFNMEssY0FBYyxDQUFDLElBQUksR0FBRzlJLHFCQUFxQjlOLEtBQUs2VSxVQUFVLEtBQUs7d0JBQ3hLO3dCQUVBLElBQUloSCxLQUFLbU4sTUFBTSxJQUFJalksU0FBUzhLLFNBQVN0TCxVQUFVc0wsSUFBSSxDQUFDLEVBQUUsR0FBRzs0QkFDdkQ2RixRQUFROEgsV0FBVyxHQUFHdEcsUUFBUSxNQUFNQzs0QkFDcEN6QixRQUFRMkcsTUFBTSxHQUFHeE0sS0FBS3dNLE1BQU0sRUFBRSxpUkFBaVI7d0JBQ2pUO29CQUNGO2dCQUNGO2dCQUVBcmEsS0FBSzhaLFVBQVUsR0FBRztnQkFDbEJ1QixxQkFBcUIsQ0FBQzNHLE1BQU10SixLQUFLaVEsa0JBQWtCLElBQUlqUSxLQUFLaVEsa0JBQWtCLEdBQUdqUSxLQUFLcUosY0FBYyxLQUFLLElBQUksSUFBSSxJQUFJelUsS0FBS3lVLGNBQWMsR0FBRztnQkFFM0ksSUFBSSxDQUFDZixRQUFRck4sUUFBUSxFQUFFO29CQUNyQnFOLFFBQVFyTixRQUFRLEdBQUc7d0JBQ2pCNEMsS0FBS3BHLEtBQUtvRyxHQUFHLENBQUNtQyxLQUFLcVEsV0FBVyxJQUFJLEdBQUcsaUJBQWlCclEsT0FBT0EsS0FBS3NRLFdBQVcsR0FBRzt3QkFDaEYzUCxLQUFLLENBQUMySSxNQUFNdEosS0FBS3FRLFdBQVcsSUFBSXJRLEtBQUtxUSxXQUFXLEdBQUdKLHVCQUF1QixLQUFLOVksVUFBVW1SLFlBQVlBLFFBQVE0SCxVQUFVLEdBQUcsT0FBTyxJQUFJO3dCQUNySUssV0FBV047b0JBQ2I7Z0JBQ0Y7Z0JBRUFyYixLQUFLb2IsS0FBSyxHQUFHQSxRQUFReGEsS0FBS3NGLEVBQUUsQ0FBQzBRLGVBQWVqUCxRQUFRO29CQUNsRCtMLFNBQVNBO29CQUNUbk4sTUFBTTtvQkFDTnFWLFNBQVM7b0JBQ1R0VixZQUFZMlU7b0JBQ1pZLGFBQWFYO29CQUNiWSxVQUFVMVEsS0FBSzJRLFFBQVEsR0FBRzdRLGlCQUFpQnVPO29CQUMzQ3VDLGdCQUFnQjVRLEtBQUsyUSxRQUFRLEdBQUc7d0JBQUMvYjt3QkFBTTt3QkFBaUI7cUJBQWdCLEdBQUc2TixRQUFRQSxLQUFLd00sTUFBTSxHQUFHO3dCQUFDO3dCQUFPO3FCQUFLLEdBQUcsRUFBRTtnQkFDckg7Z0JBRUEsSUFBSSxDQUFDalAsS0FBSzJRLFFBQVEsRUFBRTtvQkFDbEIsSUFBSW5GLGFBQWE7d0JBQ2ZBLFlBQVk1RixLQUFLLEdBQUcsTUFBTSx5WEFBeVg7b0JBQ3JaO29CQUVBb0ssTUFBTTNDLE1BQU0sQ0FBQyxLQUFLLE1BQU0sT0FBTyw2SEFBNkg7b0JBRTVKZ0IsT0FBTyxNQUFNO29CQUNielosS0FBS2ljLElBQUksR0FBR2pjLEtBQUtvSixDQUFDO29CQUNsQnBKLEtBQUtrYyxJQUFJLEdBQUdsYyxLQUFLcUosQ0FBQztvQkFFbEIsSUFBSTRMLGNBQWM7d0JBQ2hCalYsS0FBS21jLFdBQVcsR0FBR25jLEtBQUtvSixDQUFDO29CQUMzQjtvQkFFQWdTLE1BQU1nQixJQUFJLENBQUM7b0JBQ1gzQyxPQUFPLE1BQU07b0JBRWIsSUFBSTdDLGFBQWE7d0JBQ2ZBLFlBQVk1RixLQUFLLEdBQUcsT0FBTyx3WEFBd1g7b0JBQ3JaO2dCQUNGO1lBQ0YsT0FBTyxJQUFJaUcsV0FBVztnQkFDcEJqWCxLQUFLcWMsV0FBVztZQUNsQjtRQUNGLEdBQ0lDLGVBQWUsU0FBU0EsYUFBYUMsVUFBVTtZQUNqRCxJQUFJQyxRQUFRN1AsUUFDUjlIO1lBQ0o4SCxTQUFTak0saUVBQWVBLENBQUNpSCxPQUFPYyxVQUFVLEVBQUU7WUFFNUMsSUFBSThULGNBQWN2YyxLQUFLdVQsU0FBUyxJQUFJLENBQUM1RyxPQUFPOFAsTUFBTSxDQUFDRCxTQUFTLElBQUk3YixzREFBUUEsS0FBSztnQkFDM0UseVJBQXlSO2dCQUN6UmtFLElBQUkyWCxNQUFNRSxPQUFPLEdBQUdsUixLQUFLLENBQUM7b0JBQ3hCcEMsR0FBR3lOO29CQUNIeE4sR0FBR3lOO2dCQUNMO2dCQUNBbkssT0FBT25CLEtBQUssQ0FBQzNHLEdBQUdBO2dCQUNoQmdTLGdCQUFnQmhTLEVBQUV1RSxDQUFDO2dCQUNuQjBOLGdCQUFnQmpTLEVBQUV3RSxDQUFDO1lBQ3JCO1lBRUEsSUFBSXNELE9BQU84UCxNQUFNLENBQUM1WSxrQkFBa0I7Z0JBQ2xDLHdGQUF3RjtnQkFDeEY4SSxTQUFTO1lBQ1g7UUFDRixHQUNJZ1EsdUJBQXVCLFNBQVNBO1lBQ2xDLElBQUkxQyxnQkFBZ0IsSUFBSWphLEtBQUt5VSxjQUFjLEVBQ3ZDbUksVUFBVXJHLFVBQVVwTyxrQkFBa0J1TyxZQUFZLEdBQ2xEbUcsVUFBVXRHLFVBQVUxTyxpQkFBaUI2TyxZQUFZLEdBQ2pEb0csY0FDQTFULEdBQ0FDO1lBRUosSUFBSTJMLFFBQVE7Z0JBQ1YsOEdBQThHO2dCQUM5R29CLFFBQVFoTixDQUFDLEdBQUdvTixhQUFhdEIsT0FBTyxRQUFRO2dCQUN4Q2tCLFFBQVEvTSxDQUFDLEdBQUdtTixhQUFhckIsT0FBTyxRQUFRO2dCQUN4Q2lCLFFBQVFtRCxlQUFlO1lBQ3pCO1lBRUErQyxhQUFhO1lBQ2IvUCxRQUFRbkQsQ0FBQyxHQUFHcEosS0FBSytZLFFBQVEsR0FBRzZEO1lBQzVCclEsUUFBUWxELENBQUMsR0FBR3JKLEtBQUtnWixRQUFRLEdBQUc2RDtZQUM1QmxRLFVBQVVBLE9BQU9uQixLQUFLLENBQUNlLFNBQVNBO1lBQ2hDc0ssZ0JBQWdCdEssUUFBUW5ELENBQUMsRUFBRSxzQ0FBc0M7WUFFakUwTixnQkFBZ0J2SyxRQUFRbEQsQ0FBQztZQUV6QixJQUFJa08sT0FBTztnQkFDVDhCLG1CQUFtQnJaLEtBQUsrWSxRQUFRLEVBQUUvWSxLQUFLZ1osUUFBUTtnQkFDL0NQLE9BQU87WUFDVDtZQUVBSixjQUFjM1gsaUVBQWVBLENBQUNpSDtZQUU5QixJQUFJaVAsYUFBYTtnQkFDZitEO2dCQUNBM0QsZ0JBQWdCSixZQUFZeE0sR0FBRztnQkFDL0IyTSxnQkFBZ0JILFlBQVl6TSxJQUFJO1lBQ2xDLE9BQU87Z0JBQ0wsOE1BQThNO2dCQUM5TSxJQUFJNFMsY0FBYztvQkFDaEJ0RCxPQUFPLE1BQU07b0JBQ2JrQjtnQkFDRixPQUFPO29CQUNMM2EsS0FBS3FjLFdBQVc7Z0JBQ2xCO2dCQUVBLElBQUlwSCxjQUFjO29CQUNoQjZILGVBQWVuVixPQUFPK0UsZUFBZSxHQUFHO3dCQUFDMEosUUFBUTRHLE9BQU8sR0FBR3JWLE9BQU84RSxPQUFPLEdBQUdyRCxDQUFDO3dCQUFFZ04sUUFBUTZHLE9BQU8sR0FBR3RWLE9BQU84RSxPQUFPLEdBQUdwRCxDQUFDO3FCQUFDLEdBQUcsQ0FBQ1Esa0JBQWtCbEMsT0FBTyxDQUFDaEYscUJBQXFCLElBQUksS0FBSSxFQUFHd1EsS0FBSyxDQUFDO29CQUN4TG1FLGlCQUFpQnRYLEtBQUtzWCxjQUFjLEdBQUc1VyxpRUFBZUEsQ0FBQ2lILFFBQVE2RCxLQUFLLENBQUM7d0JBQ25FcEMsR0FBR2lFLFdBQVd5UCxZQUFZLENBQUMsRUFBRSxLQUFLO3dCQUNsQ3pULEdBQUdnRSxXQUFXeVAsWUFBWSxDQUFDLEVBQUUsS0FBSztvQkFDcEM7b0JBQ0FyRCxPQUFPLE1BQU07b0JBQ2JyUSxJQUFJcEosS0FBSytZLFFBQVEsR0FBR3pCLGVBQWVsTyxDQUFDLEdBQUd3VDtvQkFDdkN2VCxJQUFJaU8sZUFBZWpPLENBQUMsR0FBR3JKLEtBQUtnWixRQUFRLEdBQUc2RDtvQkFDdkM5RixnQkFBZ0IvVyxLQUFLb0osQ0FBQyxFQUFFLHlGQUF5RjtvQkFFakg0TixnQkFBZ0JoWCxLQUFLcUosQ0FBQyxHQUFHeEcsS0FBS3FhLEtBQUssQ0FBQzdULEdBQUdELEtBQUsxRjtnQkFDOUMsT0FBTztvQkFDTCx5Q0FBeUM7b0JBQ3pDLHNEQUFzRDtvQkFDdEQsd0RBQXdEO29CQUN4RHNULGdCQUFnQlIsYUFBYXJCLE9BQU8sT0FBTyxxR0FBcUc7b0JBRWhKNEIsZ0JBQWdCUCxhQUFhdEIsT0FBTztnQkFDdEM7WUFDRjtZQUVBLElBQUkrQixhQUFhZ0QsZUFBZTtnQkFDOUIsSUFBSWxELGdCQUFnQjVLLE1BQU07b0JBQ3hCNEssZ0JBQWdCNUssT0FBTyxDQUFDNEssZ0JBQWdCNUssSUFBRyxJQUFLOE47Z0JBQ2xELE9BQU8sSUFBSWxELGdCQUFnQi9LLE1BQU07b0JBQy9CK0ssZ0JBQWdCL0ssT0FBTyxDQUFDQSxPQUFPK0ssYUFBWSxJQUFLa0Q7Z0JBQ2xEO2dCQUVBLElBQUksQ0FBQ2hGLGNBQWM7b0JBQ2pCLElBQUkrQixnQkFBZ0IzSyxNQUFNO3dCQUN4QjJLLGdCQUFnQjNLLE9BQU8sQ0FBQzJLLGdCQUFnQjNLLElBQUcsSUFBSzROO29CQUNsRCxPQUFPLElBQUlqRCxnQkFBZ0I5SyxNQUFNO3dCQUMvQjhLLGdCQUFnQjlLLE9BQU8sQ0FBQ0EsT0FBTzhLLGFBQVksSUFBS2lEO29CQUNsRDtnQkFDRjtZQUNGO1lBRUFqYSxLQUFLbWQsTUFBTSxHQUFHcEcsZ0JBQWdCblUsT0FBT21VO1lBQ3JDL1csS0FBS29kLE1BQU0sR0FBR3BHLGdCQUFnQnBVLE9BQU9vVTtRQUN2QyxHQUNJK0YsYUFBYSxTQUFTQTtZQUN4QixPQUFPL2MsS0FBS29iLEtBQUssSUFBSXBiLEtBQUtvYixLQUFLLENBQUNpQyxRQUFRO1FBQzFDLEdBQ0lDLG9CQUFvQixTQUFTQTtZQUMvQixJQUFJcGMsZ0JBQWdCdUgsVUFBVSxJQUFJLENBQUNzVSxnQkFBZ0IsQ0FBQy9jLEtBQUsyWSxVQUFVLEVBQUU7Z0JBQ25FLGdMQUFnTDtnQkFDaEx6WCxnQkFBZ0J1SCxVQUFVLENBQUM4SSxXQUFXLENBQUNyUTtZQUN6QztRQUNGLEdBQ0ksb0RBQW9EO1FBQ3hEcWMsVUFBVSxTQUFTQSxRQUFRbGEsQ0FBQyxFQUFFcU4sS0FBSztZQUNqQyxJQUFJeEw7WUFFSixJQUFJLENBQUN5UixXQUFXM1csS0FBS3VULFNBQVMsSUFBSSxDQUFDbFEsS0FBSyxDQUFDQSxFQUFFRixJQUFJLEtBQUssZUFBZUUsRUFBRUYsSUFBSSxLQUFLLGFBQVksS0FBTSxDQUFDdU4sU0FBUzVNLGFBQWFxUyxZQUFZLE1BQU0zVSxpQkFBaUIsQ0FBQ3hCLEtBQUswTCxZQUFZLENBQUN2SSxJQUFJLENBQUMsRUFBRTtnQkFDbEwsc1VBQXNVO2dCQUN0VWlWLHVCQUF1Qi9VLEtBQUtzVCxXQUFXMVAsZ0JBQWdCNUQsSUFBSSx3UEFBd1A7Z0JBRW5UO1lBQ0Y7WUFFQXlVLGNBQWNpRjtZQUNkekUsVUFBVSxPQUFPLDRUQUE0VDtZQUU3VXRZLEtBQUswTCxZQUFZLEdBQUdySTtZQUVwQixJQUFJN0IsaUJBQWlCLENBQUM2QixFQUFFRixJQUFJLENBQUMsRUFBRTtnQkFDN0IsNktBQTZLO2dCQUM3SzBVLG1CQUFtQixDQUFDeFUsRUFBRUYsSUFBSSxDQUFDc1AsT0FBTyxDQUFDLFdBQVdwUCxFQUFFbWEsYUFBYSxJQUFJbmEsRUFBRXNFLE1BQU0sR0FBRytPLFVBQVUsK01BQStNO2dCQUVyU2pRLGFBQWFvUixrQkFBa0IsWUFBWTRGO2dCQUUzQ2hYLGFBQWFvUixrQkFBa0IsYUFBYTZGLFNBQVMsNElBQTRJO2dCQUdqTWpYLGFBQWFvUixrQkFBa0IsZUFBZTRGO2dCQUU5Q2hYLGFBQWFpUSxVQUFVLGNBQWM5TztZQUN2QyxPQUFPO2dCQUNMaVEsbUJBQW1CO2dCQUVuQnBSLGFBQWFpUSxVQUFVLGFBQWFnSCxTQUFTLCtJQUErSTtZQUU5TDtZQUVBMUYsZ0JBQWdCO1lBRWhCLElBQUksQ0FBQ25XLG9CQUFvQixDQUFDZ1csa0JBQWtCO2dCQUMxQ3BSLGFBQWFpUSxVQUFVLFdBQVcrRztnQkFFbENwYSxLQUFLQSxFQUFFc0UsTUFBTSxJQUFJbEIsYUFBYXBELEVBQUVzRSxNQUFNLEVBQUUsV0FBVzhWLFlBQVksb0pBQW9KO1lBQ3JOO1lBRUE3RixhQUFhM0IsWUFBWS9ILElBQUksQ0FBQ2xPLE1BQU1xRCxFQUFFc0UsTUFBTSxLQUFLeUQsS0FBS3VTLGNBQWMsS0FBSyxTQUFTLENBQUNqTjtZQUVuRixJQUFJa0gsWUFBWTtnQkFDZG5SLGFBQWFwRCxFQUFFc0UsTUFBTSxFQUFFLFVBQVU4VixZQUFZLG9JQUFvSTtnQkFHakx2UyxlQUFlbEwsTUFBTSxhQUFhO2dCQUVsQ2tMLGVBQWVsTCxNQUFNLFNBQVM7Z0JBRTlCd08sZUFBZStHLFVBQVUsT0FBTyx3SEFBd0g7Z0JBR3hKNkMsc0JBQXNCO2dCQUN0QjtZQUNGO1lBRUFMLDRCQUE0QixDQUFDRixvQkFBb0J6QyxXQUFXQyxVQUFVclYsS0FBS29MLElBQUksQ0FBQzJNLHlCQUF5QixLQUFLLFNBQVMvWCxLQUFLb0wsSUFBSSxDQUFDd1MsZ0JBQWdCLElBQUl2YSxLQUFNQSxDQUFBQSxFQUFFd2EsT0FBTyxJQUFJeGEsRUFBRXlhLEtBQUssR0FBRyxLQUFLLFFBQVExSSxTQUFTLE1BQU0sS0FBSywwUUFBMFE7WUFFN2RnRCxzQkFBc0IsQ0FBQ0wsNkJBQTZCLENBQUMvWCxLQUFLOFUsaUJBQWlCO1lBRTNFLElBQUlzRCxxQkFBcUI7Z0JBQ3ZCblIsZ0JBQWdCNUQ7Z0JBRWhCb0QsYUFBYTVGLE1BQU0sb0JBQW9Cb0csa0JBQWtCLHNHQUFzRztZQUVqSztZQUVBLElBQUk1RCxFQUFFMGEsY0FBYyxFQUFFO2dCQUNwQixrREFBa0Q7Z0JBQ2xEMWEsSUFBSStULFFBQVEvVCxFQUFFMGEsY0FBYyxDQUFDLEVBQUU7Z0JBQy9CMUcsVUFBVWhVLEVBQUVtRSxVQUFVO1lBQ3hCLE9BQU8sSUFBSW5FLEVBQUUyYSxTQUFTLEVBQUU7Z0JBQ3RCM0csVUFBVWhVLEVBQUUyYSxTQUFTLEVBQUUsNkJBQTZCO1lBQ3RELE9BQU87Z0JBQ0w1RyxRQUFRQyxVQUFVO1lBQ3BCO1lBRUFyVjtZQUVBMEQsa0JBQWtCK1MsU0FBUywwUkFBMFI7WUFHclQzQixnQkFBZ0I5VyxLQUFLZ1osUUFBUSxHQUFHM1YsRUFBRTJILEtBQUssRUFBRSxxR0FBcUc7WUFFOUk2TCxnQkFBZ0I3VyxLQUFLK1ksUUFBUSxHQUFHMVYsRUFBRTBILEtBQUs7WUFFdkNHLGVBQWVsTCxNQUFNLGFBQWE7WUFFbEMsSUFBSStYLDZCQUE2Qi9YLEtBQUs0VSxVQUFVLEVBQUU7Z0JBQ2hEMUwsa0JBQWtCdkIsT0FBT2MsVUFBVTtZQUNyQztZQUVBLElBQUlkLE9BQU9jLFVBQVUsSUFBSXpJLEtBQUs0VSxVQUFVLElBQUksQ0FBQ2dDLGVBQWUsQ0FBQzNCLGdCQUFnQnROLE9BQU9jLFVBQVUsQ0FBQ2EsYUFBYSxJQUFJLENBQUNwSSxnQkFBZ0J1SCxVQUFVLElBQUksQ0FBQ2QsT0FBTzhFLE9BQU8sRUFBRTtnQkFDOUosNkdBQTZHO2dCQUM3R3ZMLGdCQUFnQnVDLEtBQUssQ0FBQzRHLEtBQUssR0FBRzFDLE9BQU9jLFVBQVUsQ0FBQ3FILFdBQVcsR0FBRztnQkFDOURuSSxPQUFPYyxVQUFVLENBQUM2SSxXQUFXLENBQUNwUTtZQUNoQztZQUVBeWI7WUFDQTNjLEtBQUtvYixLQUFLLElBQUlwYixLQUFLb2IsS0FBSyxDQUFDNkMsSUFBSTtZQUM3QmplLEtBQUs4WixVQUFVLEdBQUc7WUFDbEJsWixLQUFLa1EsWUFBWSxDQUFDOEYsZUFBZWpQLFFBQVErTixXQUFXLE9BQU8sa0VBQWtFO1lBRTdIa0IsZUFBZWhXLEtBQUtrUSxZQUFZLENBQUNuSixRQUFRO2dCQUN2Q3lSLFVBQVU7WUFDWixHQUFHLE9BQU8scUZBQXFGO1lBRS9GcFosS0FBS29iLEtBQUssR0FBR3BiLEtBQUs2VSxVQUFVLEdBQUc7WUFFL0IsSUFBSXpKLEtBQUs4UyxXQUFXLElBQUksQ0FBQ2pKLGdCQUFnQixDQUFDMkIsZUFBZXhMLEtBQUs4UyxXQUFXLEtBQUssT0FBTztnQkFDbkZ2VyxPQUFPbEUsS0FBSyxDQUFDMGEsTUFBTSxHQUFHaEssVUFBVWdLLE1BQU07WUFDeEM7WUFFQW5lLEtBQUt1VCxTQUFTLEdBQUc7WUFDakIyRCxrQkFBa0IsQ0FBQyxDQUFFOUwsQ0FBQUEsS0FBS2dULE1BQU0sSUFBSXBlLEtBQUtzTCxVQUFVLENBQUMrUyxJQUFJO1lBQ3hEbEgsa0JBQWtCLENBQUMsQ0FBRS9MLENBQUFBLEtBQUtzUyxNQUFNLElBQUkxZCxLQUFLc0wsVUFBVSxDQUFDZ1QsSUFBSTtZQUV4RCxJQUFJbFQsS0FBS21ILE1BQU0sS0FBSyxTQUFTbkgsS0FBS21ULFlBQVksRUFBRTtnQkFDOUNyWixJQUFJcVEsU0FBU3BRLE1BQU07Z0JBRW5CLE1BQU8sRUFBRUQsSUFBSSxDQUFDLEVBQUc7b0JBQ2Z0RSxLQUFLZ08sR0FBRyxDQUFDMkcsUUFBUSxDQUFDclEsRUFBRSxFQUFFO3dCQUNwQnFOLFFBQVFuSCxLQUFLbVQsWUFBWSxJQUFJblQsS0FBS21ILE1BQU0sSUFBSzNRLENBQUFBLG1CQUFtQixTQUFTLGFBQWFBLGNBQWE7b0JBQ3JHO2dCQUNGO1lBQ0Y7WUFFQXNKLGVBQWVsTCxNQUFNLFNBQVM7UUFDaEMsR0FDSSx5Q0FBeUM7UUFDN0MwZCxTQUFTLFNBQVNBLE9BQU9yYSxDQUFDO1lBQ3hCLElBQUltYixnQkFBZ0JuYixHQUNoQnFFLFNBQ0FxUixVQUNBQyxVQUNBOVQsR0FDQXFWLElBQ0FDO1lBRUosSUFBSSxDQUFDN0QsV0FBV2xWLG9CQUFvQixDQUFDekIsS0FBS3VULFNBQVMsSUFBSSxDQUFDbFEsR0FBRztnQkFDekQrVSx1QkFBdUIvVSxLQUFLc1QsV0FBVzFQLGdCQUFnQjVELElBQUksdVBBQXVQO2dCQUVsVDtZQUNGO1lBRUFyRCxLQUFLMEwsWUFBWSxHQUFHckk7WUFDcEJxRSxVQUFVckUsRUFBRTBhLGNBQWM7WUFFMUIsSUFBSXJXLFNBQVM7Z0JBQ1gsa0RBQWtEO2dCQUNsRHJFLElBQUlxRSxPQUFPLENBQUMsRUFBRTtnQkFFZCxJQUFJckUsTUFBTStULFNBQVMvVCxFQUFFbUUsVUFBVSxLQUFLNlAsU0FBUztvQkFDM0MsNEtBQTRLO29CQUM1S25TLElBQUl3QyxRQUFRdkMsTUFBTTtvQkFFbEIsTUFBTyxFQUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDN0IsSUFBSXFFLE9BQU8sQ0FBQ3hDLEVBQUUsRUFBRXNDLFVBQVUsS0FBSzZQLFdBQVdoVSxFQUFFc0UsTUFBTSxLQUFLQSxPQUFRLENBQUMsRUFBRSxxVUFBcVU7b0JBRzNaLElBQUl6QyxJQUFJLEdBQUc7d0JBQ1Q7b0JBQ0Y7Z0JBQ0Y7WUFDRixPQUFPLElBQUk3QixFQUFFMmEsU0FBUyxJQUFJM0csV0FBV2hVLEVBQUUyYSxTQUFTLEtBQUszRyxTQUFTO2dCQUM1RCw2UkFBNlI7Z0JBQzdSO1lBQ0Y7WUFFQSxJQUFJUSxvQkFBb0JFLDZCQUE2QixDQUFDQyxlQUFlO2dCQUNuRSxzUUFBc1E7Z0JBQ3RRekwsUUFBUW5ELENBQUMsR0FBRy9GLEVBQUUwSCxLQUFLLEdBQUl3TCxDQUFBQSxVQUFVcE8sa0JBQWtCdU8sWUFBWTtnQkFDL0RuSyxRQUFRbEQsQ0FBQyxHQUFHaEcsRUFBRTJILEtBQUssR0FBSXVMLENBQUFBLFVBQVUxTyxpQkFBaUI2TyxZQUFZO2dCQUM5RC9KLFVBQVVBLE9BQU9uQixLQUFLLENBQUNlLFNBQVNBO2dCQUNoQ3dNLFdBQVd4TSxRQUFRbkQsQ0FBQztnQkFDcEI0UCxXQUFXek0sUUFBUWxELENBQUM7Z0JBQ3BCa1IsS0FBSzFYLEtBQUs0YixHQUFHLENBQUMxRixXQUFXbEM7Z0JBQ3pCMkQsS0FBSzNYLEtBQUs0YixHQUFHLENBQUN6RixXQUFXbEM7Z0JBRXpCLElBQUl5RCxPQUFPQyxNQUFPRCxDQUFBQSxLQUFLakYsbUJBQW1Ca0YsS0FBS2xGLGVBQWMsS0FBTTVULGNBQWNxVyw4QkFBOEJDLGVBQWU7b0JBQzVIQSxnQkFBZ0J1QyxLQUFLQyxNQUFNcEYsU0FBUyxNQUFNO29CQUUxQyxJQUFJMkMsNkJBQTZCQyxrQkFBa0JELDJCQUEyQjt3QkFDNUV0UixhQUFhNUYsTUFBTSxvQkFBb0JvRyxrQkFBa0IscUhBQXFIO29CQUVoTDtvQkFFQSxJQUFJakgsS0FBS29MLElBQUksQ0FBQ3NULHFCQUFxQixLQUFLLFNBQVN0SixVQUFVQyxRQUFRO3dCQUNqRXJWLEtBQUs2VSxVQUFVLEdBQUdtRCxrQkFBa0IsTUFBTSxNQUFNO3dCQUNoRDNWLFlBQVlyQyxLQUFLb0wsSUFBSSxDQUFDdVQsVUFBVSxLQUFLM2UsS0FBS29MLElBQUksQ0FBQ3VULFVBQVUsQ0FBQ3pRLElBQUksQ0FBQ2xPLE1BQU13ZTtvQkFDdkU7b0JBRUEsSUFBSTljLGNBQWNxVyw4QkFBOEJDLGVBQWU7d0JBQzdEeUYsVUFBVWU7d0JBQ1Y7b0JBQ0Y7Z0JBQ0Y7WUFDRjtZQUVBLElBQUksQ0FBQ3hlLEtBQUs4VSxpQkFBaUIsSUFBSyxFQUFDaUQsNkJBQTZCQyxpQkFBaUJELDhCQUE4QkMsYUFBWSxLQUFNd0csY0FBY0ksVUFBVSxLQUFLLE9BQU87Z0JBQ2pLM1gsZ0JBQWdCdVg7Z0JBRWhCcEcsc0JBQXNCO1lBQ3hCLE9BQU8sSUFBSUEscUJBQXFCO2dCQUM5QkEsc0JBQXNCO1lBQ3hCO1lBRUEsSUFBSXBZLEtBQUs0VSxVQUFVLEVBQUU7Z0JBQ25CZ0Isd0JBQXdCO1lBQzFCO1lBRUF5RCxtQkFBbUJoVyxFQUFFMEgsS0FBSyxFQUFFMUgsRUFBRTJILEtBQUssRUFBRW1NO1FBQ3ZDLEdBQ0lrQyxxQkFBcUIsU0FBU0EsbUJBQW1CTixRQUFRLEVBQUVDLFFBQVEsRUFBRTZGLFlBQVk7WUFDbkYsSUFBSUMsZ0JBQWdCLElBQUk5ZSxLQUFLd1UsY0FBYyxFQUN2Q3lGLGdCQUFnQixJQUFJamEsS0FBS3lVLGNBQWMsRUFDdkNzSyxlQUFlL2UsS0FBSytZLFFBQVEsRUFDNUJpRyxlQUFlaGYsS0FBS2daLFFBQVEsRUFDNUJpRyxvQkFBb0JqSSxlQUNwQmtJLFFBQVFsZixLQUFLb0osQ0FBQyxFQUNkK1YsUUFBUW5mLEtBQUtxSixDQUFDLEVBQ2QrVixXQUFXcGYsS0FBS2ljLElBQUksRUFDcEJvRCxXQUFXcmYsS0FBS2tjLElBQUksRUFDcEJvRCxrQkFBa0J0ZixLQUFLbWMsV0FBVyxFQUNsQ29ELFlBQVloSSxPQUNaaUksU0FDQUMsU0FDQXJXLEdBQ0FDLEdBQ0F1SCxLQUNBOE87WUFDSjFmLEtBQUsrWSxRQUFRLEdBQUdBO1lBQ2hCL1ksS0FBS2daLFFBQVEsR0FBR0E7WUFFaEIsSUFBSXpDLFNBQVM7Z0JBQ1h3QyxZQUFZNVEsa0JBQWtCdU87Z0JBQzlCc0MsWUFBWW5SLGlCQUFpQjZPO1lBQy9CO1lBRUEsSUFBSXpCLGNBQWM7Z0JBQ2hCNUwsSUFBSXhHLEtBQUtxYSxLQUFLLENBQUM1RixlQUFlak8sQ0FBQyxHQUFHMlAsVUFBVUQsV0FBV3pCLGVBQWVsTyxDQUFDLElBQUkxRjtnQkFDM0VrTixNQUFNNVEsS0FBS3FKLENBQUMsR0FBR0E7Z0JBRWYsSUFBSXVILE1BQU0sS0FBSztvQkFDYm9HLGlCQUFpQjtvQkFDakJoWCxLQUFLcUosQ0FBQyxHQUFHQTtnQkFDWCxPQUFPLElBQUl1SCxNQUFNLENBQUMsS0FBSztvQkFDckJvRyxpQkFBaUI7b0JBQ2pCaFgsS0FBS3FKLENBQUMsR0FBR0E7Z0JBQ1g7Z0JBRUEsSUFBSXJKLEtBQUtvSixDQUFDLEtBQUsyTixpQkFBaUJsVSxLQUFLNGIsR0FBRyxDQUFDekgsZ0JBQWdCM04sS0FBS2lNLGlCQUFpQjtvQkFDN0V0VixLQUFLcUosQ0FBQyxHQUFHQTtvQkFDVEQsSUFBSTJOLGdCQUFnQixDQUFDQyxnQkFBZ0IzTixDQUFBQSxJQUFLeVY7Z0JBQzVDLE9BQU87b0JBQ0wxVixJQUFJMk47Z0JBQ047WUFDRixPQUFPO2dCQUNMLElBQUlwSyxRQUFRO29CQUNWK1MsT0FBTzNHLFdBQVdwTSxPQUFPb0IsQ0FBQyxHQUFHaUwsV0FBV3JNLE9BQU9nVCxDQUFDLEdBQUdoVCxPQUFPdEosQ0FBQztvQkFDM0QyVixXQUFXRCxXQUFXcE0sT0FBT2lULENBQUMsR0FBRzVHLFdBQVdyTSxPQUFPa1QsQ0FBQyxHQUFHbFQsT0FBT21ULENBQUM7b0JBQy9EL0csV0FBVzJHO2dCQUNiO2dCQUVBRCxVQUFVekcsV0FBV2xDO2dCQUNyQjBJLFVBQVV6RyxXQUFXbEM7Z0JBRXJCLElBQUk0SSxVQUFVbkssbUJBQW1CbUssVUFBVSxDQUFDbkssaUJBQWlCO29CQUMzRG1LLFVBQVU7Z0JBQ1o7Z0JBRUEsSUFBSUQsVUFBVWxLLG1CQUFtQmtLLFVBQVUsQ0FBQ2xLLGlCQUFpQjtvQkFDM0RrSyxVQUFVO2dCQUNaO2dCQUVBLElBQUksQ0FBQ3hmLEtBQUsyVSxRQUFRLElBQUkzVSxLQUFLNlUsVUFBVSxLQUFNMkssQ0FBQUEsV0FBV0MsT0FBTSxHQUFJO29CQUM5REMsT0FBTzFmLEtBQUs2VSxVQUFVO29CQUV0QixJQUFJLENBQUM2SyxNQUFNO3dCQUNUMWYsS0FBSzZVLFVBQVUsR0FBRzZLLE9BQU90SyxVQUFVdlMsS0FBSzRiLEdBQUcsQ0FBQ2UsV0FBVzNjLEtBQUs0YixHQUFHLENBQUNnQixXQUFXLE1BQU1wSyxTQUFTLE1BQU07d0JBRWhHLElBQUlxSyxRQUFRcmQsWUFBWXJDLEtBQUtvTCxJQUFJLENBQUN1VCxVQUFVLEdBQUc7NEJBQzdDM2UsS0FBS29MLElBQUksQ0FBQ3VULFVBQVUsQ0FBQ3pRLElBQUksQ0FBQ2xPLE1BQU1BLEtBQUswTCxZQUFZO3dCQUNuRDtvQkFDRjtvQkFFQSxJQUFJZ1UsU0FBUyxLQUFLO3dCQUNoQkQsVUFBVTtvQkFDWixPQUFPLElBQUlDLFNBQVMsS0FBSzt3QkFDdkJGLFVBQVU7b0JBQ1o7Z0JBQ0Y7Z0JBRUFwVyxJQUFJeEcsT0FBT21VLGdCQUFnQnlJLFVBQVVWO2dCQUNyQ3pWLElBQUl6RyxPQUFPb1UsZ0JBQWdCeUksVUFBVVg7WUFDdkM7WUFFQSxJQUFJLENBQUNySCxTQUFTQyxTQUFTQyxNQUFLLEtBQU8zWCxDQUFBQSxLQUFLb0osQ0FBQyxLQUFLQSxLQUFLcEosS0FBS3FKLENBQUMsS0FBS0EsS0FBSyxDQUFDNEwsWUFBVyxHQUFJO2dCQUNqRixJQUFJMEMsUUFBUTtvQkFDVnBULE9BQU82RSxDQUFDLEdBQUdBO29CQUNYN0UsT0FBTzhFLENBQUMsR0FBR0E7b0JBQ1hxVyxPQUFPL0gsT0FBT3BUO29CQUNkNkUsSUFBSXhHLE9BQU84YyxLQUFLdFcsQ0FBQztvQkFDakJDLElBQUl6RyxPQUFPOGMsS0FBS3JXLENBQUM7Z0JBQ25CO2dCQUVBLElBQUlvTyxPQUFPO29CQUNUck8sSUFBSXhHLE9BQU82VSxNQUFNck87Z0JBQ25CO2dCQUVBLElBQUlzTyxPQUFPO29CQUNUck8sSUFBSXpHLE9BQU84VSxNQUFNck87Z0JBQ25CO1lBQ0Y7WUFFQSxJQUFJNE4sV0FBVztnQkFDYixJQUFJN04sSUFBSStDLE1BQU07b0JBQ1ovQyxJQUFJK0MsT0FBT3RKLEtBQUtDLEtBQUssQ0FBQyxDQUFDc0csSUFBSStDLElBQUcsSUFBSzhOO2dCQUNyQyxPQUFPLElBQUk3USxJQUFJNEMsTUFBTTtvQkFDbkI1QyxJQUFJNEMsT0FBT25KLEtBQUtDLEtBQUssQ0FBQyxDQUFDc0csSUFBSTRDLElBQUcsSUFBS2lPO2dCQUNyQztnQkFFQSxJQUFJLENBQUNoRixjQUFjO29CQUNqQixJQUFJNUwsSUFBSWdELE1BQU07d0JBQ1poRCxJQUFJeEcsS0FBS0MsS0FBSyxDQUFDdUosT0FBTyxDQUFDaEQsSUFBSWdELElBQUcsSUFBSzROO29CQUNyQyxPQUFPLElBQUk1USxJQUFJNkMsTUFBTTt3QkFDbkI3QyxJQUFJeEcsS0FBS0MsS0FBSyxDQUFDb0osT0FBTyxDQUFDN0MsSUFBSTZDLElBQUcsSUFBSytOO29CQUNyQztnQkFDRjtZQUNGO1lBRUEsSUFBSWphLEtBQUtvSixDQUFDLEtBQUtBLEtBQUtwSixLQUFLcUosQ0FBQyxLQUFLQSxLQUFLLENBQUM0TCxjQUFjO2dCQUNqRCxJQUFJQSxjQUFjO29CQUNoQmpWLEtBQUttYyxXQUFXLEdBQUduYyxLQUFLb0osQ0FBQyxHQUFHcEosS0FBS2ljLElBQUksR0FBRzdTO29CQUN4Q21PLFFBQVE7Z0JBQ1YsT0FBTztvQkFDTCxJQUFJbEMsUUFBUTt3QkFDVnJWLEtBQUtxSixDQUFDLEdBQUdySixLQUFLa2MsSUFBSSxHQUFHN1M7d0JBQ3JCa08sUUFBUSxNQUFNLHlWQUF5VjtvQkFDelc7b0JBRUEsSUFBSW5DLFFBQVE7d0JBQ1ZwVixLQUFLb0osQ0FBQyxHQUFHcEosS0FBS2ljLElBQUksR0FBRzdTO3dCQUNyQm1PLFFBQVE7b0JBQ1Y7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDc0gsZ0JBQWdCM1QsZUFBZWxMLE1BQU0sUUFBUSxjQUFjLE9BQU87b0JBQ3JFLElBQUksQ0FBQ0EsS0FBSzJZLFVBQVUsSUFBSTNZLEtBQUt1VCxTQUFTLEVBQUU7d0JBQ3RDdlQsS0FBSzJZLFVBQVUsR0FBR0wsVUFBVTt3QkFFNUJwTixlQUFlbEwsTUFBTSxhQUFhO29CQUNwQztnQkFDRixPQUFPO29CQUNMLDJDQUEyQztvQkFDM0NBLEtBQUsrWSxRQUFRLEdBQUdnRztvQkFDaEIvZSxLQUFLZ1osUUFBUSxHQUFHZ0c7b0JBQ2hCaEksZ0JBQWdCaUk7b0JBQ2hCamYsS0FBS29KLENBQUMsR0FBRzhWO29CQUNUbGYsS0FBS3FKLENBQUMsR0FBRzhWO29CQUNUbmYsS0FBS2ljLElBQUksR0FBR21EO29CQUNacGYsS0FBS2tjLElBQUksR0FBR21EO29CQUNacmYsS0FBS21jLFdBQVcsR0FBR21EO29CQUNuQi9ILFFBQVFnSTtnQkFDVjtZQUNGO1FBQ0YsR0FDSSx5Q0FBeUM7UUFDN0M5QixZQUFZLFNBQVNBLFVBQVVwYSxDQUFDLEVBQUVxTixLQUFLO1lBQ3JDLElBQUksQ0FBQ2lHLFdBQVcsQ0FBQzNXLEtBQUt1VCxTQUFTLElBQUlsUSxLQUFLZ1UsV0FBVyxRQUFRLENBQUMzRyxTQUFVck4sQ0FBQUEsRUFBRTJhLFNBQVMsSUFBSTNhLEVBQUUyYSxTQUFTLEtBQUszRyxXQUFXaFUsRUFBRXNFLE1BQU0sS0FBS0EsVUFBVXRFLEVBQUUwYSxjQUFjLElBQUksQ0FBQzFXLFlBQVloRSxFQUFFMGEsY0FBYyxFQUFFMUcsUUFBTyxHQUFJO2dCQUNuTSw2UkFBNlI7Z0JBQzdSZSx1QkFBdUIvVSxLQUFLc1QsV0FBVzFQLGdCQUFnQjVELElBQUksa1BBQWtQO2dCQUU3UztZQUNGO1lBRUFyRCxLQUFLdVQsU0FBUyxHQUFHO1lBQ2pCLElBQUlpTCxnQkFBZ0JuYixHQUNoQjBjLGNBQWMvZixLQUFLMlksVUFBVSxFQUM3QnFILHVCQUF1QmhnQixLQUFLb0wsSUFBSSxDQUFDd1MsZ0JBQWdCLElBQUl2YSxLQUFNQSxDQUFBQSxFQUFFd2EsT0FBTyxJQUFJeGEsRUFBRXlhLEtBQUssR0FBRyxJQUNsRm1DLHlCQUF5QnJmLEtBQUtzZixXQUFXLENBQUMsT0FBTzVDLG9CQUNqRDVWLFNBQ0F4QyxHQUNBaWIsZ0JBQ0FDLGFBQ0FDO1lBRUosSUFBSXhJLGtCQUFrQjtnQkFDcEI5USxnQkFBZ0I4USxrQkFBa0IsWUFBWTRGO2dCQUU5QzFXLGdCQUFnQjhRLGtCQUFrQixhQUFhNkY7Z0JBRS9DM1csZ0JBQWdCOFEsa0JBQWtCLGVBQWU0RjtnQkFFakQxVyxnQkFBZ0IyUCxVQUFVLGNBQWM5TztZQUMxQyxPQUFPO2dCQUNMYixnQkFBZ0IyUCxVQUFVLGFBQWFnSDtZQUN6QztZQUVBM1csZ0JBQWdCbEcsTUFBTSxvQkFBb0JvRztZQUUxQyxJQUFJLENBQUNwRixvQkFBb0IsQ0FBQ2dXLGtCQUFrQjtnQkFDMUM5USxnQkFBZ0IyUCxVQUFVLFdBQVcrRztnQkFFckNwYSxLQUFLQSxFQUFFc0UsTUFBTSxJQUFJWixnQkFBZ0IxRCxFQUFFc0UsTUFBTSxFQUFFLFdBQVc4VjtZQUN4RDtZQUVBbEcsUUFBUTtZQUVSLElBQUl3SSxhQUFhO2dCQUNmcEssY0FBY3JSLGdCQUFnQlI7Z0JBQzlCOUQsS0FBSzJZLFVBQVUsR0FBRztZQUNwQjtZQUVBM1MsdUJBQXVCeVM7WUFFdkIsSUFBSWIsY0FBYyxDQUFDb0ksc0JBQXNCO2dCQUN2QyxJQUFJM2MsR0FBRztvQkFDTDBELGdCQUFnQjFELEVBQUVzRSxNQUFNLEVBQUUsVUFBVThWO29CQUVwQ3pkLEtBQUswTCxZQUFZLEdBQUc4UztnQkFDdEI7Z0JBRUFoUSxlQUFlK0csVUFBVTtnQkFFekJySyxlQUFlbEwsTUFBTSxXQUFXO2dCQUVoQ2tMLGVBQWVsTCxNQUFNLFNBQVM7Z0JBRTlCNFgsYUFBYTtnQkFDYjtZQUNGO1lBRUExUyxJQUFJcVEsU0FBU3BRLE1BQU07WUFFbkIsTUFBTyxFQUFFRCxJQUFJLENBQUMsRUFBRztnQkFDZndFLFVBQVU2TCxRQUFRLENBQUNyUSxFQUFFLEVBQUUsVUFBVWtHLEtBQUttSCxNQUFNLElBQUtuSCxDQUFBQSxLQUFLbUgsTUFBTSxLQUFLLFFBQVEzUSxpQkFBaUIsSUFBRztZQUMvRjtZQUVBSTtZQUVBLElBQUlxQixHQUFHO2dCQUNMcUUsVUFBVXJFLEVBQUUwYSxjQUFjO2dCQUUxQixJQUFJclcsU0FBUztvQkFDWCxrREFBa0Q7b0JBQ2xEckUsSUFBSXFFLE9BQU8sQ0FBQyxFQUFFO29CQUVkLElBQUlyRSxNQUFNK1QsU0FBUy9ULEVBQUVtRSxVQUFVLEtBQUs2UCxTQUFTO3dCQUMzQyw0S0FBNEs7d0JBQzVLblMsSUFBSXdDLFFBQVF2QyxNQUFNO3dCQUVsQixNQUFPLEVBQUVELElBQUksQ0FBQyxLQUFLLENBQUM3QixJQUFJcUUsT0FBTyxDQUFDeEMsRUFBRSxFQUFFc0MsVUFBVSxLQUFLNlAsV0FBV2hVLEVBQUVzRSxNQUFNLEtBQUtBLE9BQVEsQ0FBQzt3QkFFcEYsSUFBSXpDLElBQUksS0FBSyxDQUFDd0wsT0FBTzs0QkFDbkI7d0JBQ0Y7b0JBQ0Y7Z0JBQ0Y7Z0JBRUExUSxLQUFLMEwsWUFBWSxHQUFHOFM7Z0JBQ3BCeGUsS0FBSytZLFFBQVEsR0FBRzFWLEVBQUUwSCxLQUFLO2dCQUN2Qi9LLEtBQUtnWixRQUFRLEdBQUczVixFQUFFMkgsS0FBSztZQUN6QjtZQUVBLElBQUlnVix3QkFBd0J4QixlQUFlO2dCQUN6Q3ZYLGdCQUFnQnVYO2dCQUVoQnBHLHNCQUFzQjtnQkFFdEJsTixlQUFlbEwsTUFBTSxXQUFXO1lBQ2xDLE9BQU8sSUFBSXdlLGlCQUFpQixDQUFDdUIsYUFBYTtnQkFDeEMzSCxzQkFBc0I7Z0JBRXRCLElBQUlOLGVBQWdCMU0sQ0FBQUEsS0FBS3lDLElBQUksSUFBSXpDLEtBQUt3UCxNQUFNLEdBQUc7b0JBQzdDLHFMQUFxTDtvQkFDckxPLFFBQVEvUCxLQUFLc0ksT0FBTyxJQUFJdEksS0FBS2tWLFVBQVU7Z0JBQ3pDO2dCQUVBcFYsZUFBZWxMLE1BQU0sV0FBVztnQkFFaEMsSUFBSSxDQUFDLENBQUMwQixjQUFjOGMsY0FBY3JiLElBQUksS0FBSyxXQUFVLEtBQU1xYixjQUFjcmIsSUFBSSxDQUFDc1AsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHO29CQUN0RyxpS0FBaUs7b0JBQ2pLdkgsZUFBZWxMLE1BQU0sU0FBUztvQkFFOUIsSUFBSThELGFBQWFxUyxZQUFZLEtBQUs7d0JBQ2hDakwsZUFBZWxMLE1BQU0sZUFBZTtvQkFDdEM7b0JBRUFvZ0IsY0FBYzVCLGNBQWM3VyxNQUFNLElBQUlBLFFBQVEsd0JBQXdCO29CQUV0RXdPLFlBQVlyUztvQkFFWnVjLGlCQUFpQixTQUFTQTt3QkFDeEIscW5CQUFxbkI7d0JBQ3JuQixJQUFJbEssY0FBYytCLGlCQUFpQmxZLEtBQUsyVyxPQUFPLE1BQU0sQ0FBQzNXLEtBQUt1VCxTQUFTLElBQUksQ0FBQ2lMLGNBQWMrQixnQkFBZ0IsRUFBRTs0QkFDdkcsSUFBSUgsWUFBWUksS0FBSyxFQUFFO2dDQUNyQiwyRUFBMkU7Z0NBQzNFSixZQUFZSSxLQUFLOzRCQUNuQixPQUFPLElBQUk5SixTQUFTK0osV0FBVyxFQUFFO2dDQUMvQk4saUJBQWlCekosU0FBUytKLFdBQVcsQ0FBQztnQ0FDdENOLGVBQWVPLGNBQWMsQ0FBQyxTQUFTLE1BQU0sTUFBTTdmLE1BQU0sR0FBR2IsS0FBSzBMLFlBQVksQ0FBQ2lWLE9BQU8sRUFBRTNnQixLQUFLMEwsWUFBWSxDQUFDa1YsT0FBTyxFQUFFNWdCLEtBQUsrWSxRQUFRLEVBQUUvWSxLQUFLZ1osUUFBUSxFQUFFLE9BQU8sT0FBTyxPQUFPLE9BQU8sR0FBRztnQ0FDL0tvSCxZQUFZelUsYUFBYSxDQUFDd1U7NEJBQzVCO3dCQUNGO29CQUNGO29CQUVBLElBQUksQ0FBQ3plLGNBQWMsQ0FBQzhjLGNBQWMrQixnQkFBZ0IsRUFBRTt3QkFDbEQsNEhBQTRIO3dCQUM1SDNmLEtBQUtzZixXQUFXLENBQUMsTUFBTUcsaUJBQWlCLHNwQkFBc3BCO29CQUNoc0I7Z0JBQ0Y7WUFDRixPQUFPO2dCQUNMbEYsUUFBUS9QLEtBQUtzSSxPQUFPLElBQUl0SSxLQUFLa1YsVUFBVSxHQUFHLDhFQUE4RTtnQkFFeEgsSUFBSSxDQUFDdGdCLEtBQUs4VSxpQkFBaUIsSUFBSTBKLGlCQUFrQnBULENBQUFBLEtBQUt1UyxjQUFjLEtBQUssU0FBUyxDQUFDMUgsWUFBWS9ILElBQUksQ0FBQ2xPLE1BQU13ZSxjQUFjN1csTUFBTSxNQUFNb1ksZUFBZ0IsRUFBQ2hJLDZCQUE2QkMsaUJBQWlCRCw4QkFBOEJDLGFBQVksS0FBTXdHLGNBQWNJLFVBQVUsS0FBSyxPQUFPO29CQUNyUnhHLHNCQUFzQjtvQkFFdEJuUixnQkFBZ0J1WDtnQkFDbEIsT0FBTztvQkFDTHBHLHNCQUFzQjtnQkFDeEI7Z0JBRUFsTixlQUFlbEwsTUFBTSxXQUFXO1lBQ2xDO1lBRUErYyxnQkFBZ0JrRCx1QkFBdUI1WixRQUFRLENBQUNyRyxLQUFLb2IsS0FBSyxDQUFDL1UsUUFBUSxLQUFLLGtEQUFrRDtZQUUxSDBaLGVBQWU3VSxlQUFlbEwsTUFBTSxXQUFXO1lBQy9DLE9BQU87UUFDVCxHQUNJNmdCLGVBQWUsU0FBU0EsYUFBYXhkLENBQUM7WUFDeEMsSUFBSUEsS0FBS3JELEtBQUsyWSxVQUFVLElBQUksQ0FBQy9CLGFBQWE7Z0JBQ3hDLElBQUk3RCxTQUFTMVAsRUFBRXNFLE1BQU0sSUFBSUEsT0FBT2MsVUFBVSxFQUN0QzZRLFNBQVN2RyxPQUFPMUssVUFBVSxHQUFHMEssT0FBT3ZKLFVBQVUsRUFDOUNnUSxTQUFTekcsT0FBTy9LLFNBQVMsR0FBRytLLE9BQU90SixVQUFVO2dCQUVqRCxJQUFJNlAsVUFBVUUsUUFBUTtvQkFDcEIsSUFBSTdNLFFBQVE7d0JBQ1ZrSyxpQkFBaUJ5QyxTQUFTM00sT0FBT29CLENBQUMsR0FBR3lMLFNBQVM3TSxPQUFPZ1QsQ0FBQzt3QkFDdEQ3SSxpQkFBaUIwQyxTQUFTN00sT0FBT2tULENBQUMsR0FBR3ZHLFNBQVMzTSxPQUFPaVQsQ0FBQztvQkFDeEQsT0FBTzt3QkFDTC9JLGlCQUFpQnlDO3dCQUNqQnhDLGlCQUFpQjBDO29CQUNuQjtvQkFFQXpHLE9BQU92SixVQUFVLElBQUk4UDtvQkFDckJ2RyxPQUFPdEosVUFBVSxJQUFJK1A7b0JBQ3JCSCxtQkFBbUJyWixLQUFLK1ksUUFBUSxFQUFFL1ksS0FBS2daLFFBQVE7Z0JBQ2pEO1lBQ0Y7UUFDRixHQUNJOEgsVUFBVSxTQUFTQSxRQUFRemQsQ0FBQztZQUM5QixzZUFBc2U7WUFDdGUsSUFBSTBkLE9BQU9qZCxZQUNQa2Qsa0JBQWtCRCxPQUFPNUssWUFBWSxLQUNyQzhLLGtCQUFrQkYsT0FBT3BMLGNBQWMsSUFDdkN1TCxvQkFBb0JGLG1CQUFtQjlJLGtCQUFrQi9CLFdBQ3pEb0ssbUJBQW1CdmdCLEtBQUswTCxZQUFZLElBQUkxTCxLQUFLMEwsWUFBWSxDQUFDNlUsZ0JBQWdCLEVBQzFFWSwyQkFBMkJILG1CQUFtQjdJLHlCQUF5QmhDLFdBQ3ZFaUwsVUFBVS9kLEVBQUVnZSxTQUFTLElBQUloZSxFQUFFZ2UsU0FBUyxJQUFJLFFBQVFMLG1CQUFtQkUsbUJBQW1CLDBUQUEwVDtZQUdwWixJQUFJLENBQUNBLHFCQUFxQkQsbUJBQW1CamhCLEtBQUtvTCxJQUFJLENBQUNrVyxtQkFBbUIsS0FBSyxLQUFJLEtBQU1qZSxFQUFFbVYsd0JBQXdCLEVBQUU7Z0JBQ25IblYsRUFBRW1WLHdCQUF3QjtZQUM1QjtZQUVBLElBQUl3SSxtQkFBbUIsQ0FBRWhoQixDQUFBQSxLQUFLMEwsWUFBWSxJQUFJMUwsS0FBSzBMLFlBQVksQ0FBQzZVLGdCQUFnQixLQUFNLEVBQUNXLHFCQUFxQkUsV0FBVyxDQUFDRCx3QkFBdUIsR0FBSTtnQkFDakosK0hBQStIO2dCQUMvSCxJQUFJQyxXQUFXRixtQkFBbUI7b0JBQ2hDL0ksdUJBQXVCaEM7Z0JBQ3pCO2dCQUVBK0IsZ0JBQWdCL0I7Z0JBQ2hCO1lBQ0Y7WUFFQSxJQUFJblcsS0FBS3VULFNBQVMsSUFBSTBOLG1CQUFtQkQsaUJBQWlCO2dCQUN4RCxJQUFJLENBQUNJLFdBQVcsQ0FBQy9kLEVBQUVrZSxNQUFNLElBQUksQ0FBQ1AsbUJBQW1CVCxrQkFBa0I7b0JBQ2pFdFosZ0JBQWdCNUQ7Z0JBQ2xCO1lBQ0Y7WUFFQSxJQUFJLENBQUMyZCxtQkFBbUIsQ0FBQ0MsbUJBQW1CLENBQUMzSSxTQUFTO2dCQUNwRCw4REFBOEQ7Z0JBQzlEalYsS0FBS0EsRUFBRXNFLE1BQU0sSUFBSzNILENBQUFBLEtBQUswTCxZQUFZLEdBQUdySSxDQUFBQTtnQkFFdEM2SCxlQUFlbEwsTUFBTSxTQUFTO1lBQ2hDO1FBQ0YsR0FDSXdoQixnQkFBZ0IsU0FBU0EsY0FBYzNjLENBQUM7WUFDMUMsT0FBTzhILFNBQVM7Z0JBQ2R2RCxHQUFHdkUsRUFBRXVFLENBQUMsR0FBR3VELE9BQU9vQixDQUFDLEdBQUdsSixFQUFFd0UsQ0FBQyxHQUFHc0QsT0FBT2dULENBQUMsR0FBR2hULE9BQU90SixDQUFDO2dCQUM3Q2dHLEdBQUd4RSxFQUFFdUUsQ0FBQyxHQUFHdUQsT0FBT2lULENBQUMsR0FBRy9hLEVBQUV3RSxDQUFDLEdBQUdzRCxPQUFPa1QsQ0FBQyxHQUFHbFQsT0FBT21ULENBQUM7WUFDL0MsSUFBSTtnQkFDRjFXLEdBQUd2RSxFQUFFdUUsQ0FBQztnQkFDTkMsR0FBR3hFLEVBQUV3RSxDQUFDO1lBQ1I7UUFDRjtRQUVBbU8sTUFBTXJELFVBQVViLEdBQUcsQ0FBQzNMO1FBQ3BCNlAsT0FBT0EsSUFBSXlHLElBQUksSUFBSSx5RUFBeUU7UUFDNUYsZ0RBQWdEO1FBRWhENUosT0FBT29OLFNBQVMsR0FBRyxTQUFVdmEsS0FBSyxFQUFFd2EsS0FBSztZQUN2QyxJQUFJQyxJQUFJQyxJQUFJaFYsSUFBSUM7WUFDaEIwUSxRQUFRclcsU0FBU2xILEtBQUswTCxZQUFZLEVBQUUsT0FBTyx1RUFBdUU7WUFFbEgsSUFBSWdXLFNBQVMsQ0FBQzFoQixLQUFLNmhCLE9BQU8sQ0FBQzNhLFNBQVNsSCxLQUFLMEwsWUFBWSxHQUFHO2dCQUN0RGlXLEtBQUt6WCxXQUFXaEQsU0FBU2xILEtBQUswTCxZQUFZO2dCQUMxQ2tXLEtBQUsxWCxXQUFXdkM7Z0JBQ2hCaUYsS0FBSzRVLGNBQWM7b0JBQ2pCcFksR0FBR3VZLEdBQUd4WCxJQUFJLEdBQUd3WCxHQUFHdFgsS0FBSyxHQUFHO29CQUN4QmhCLEdBQUdzWSxHQUFHdlgsR0FBRyxHQUFHdVgsR0FBR2xYLE1BQU0sR0FBRztnQkFDMUI7Z0JBQ0FvQyxLQUFLMlUsY0FBYztvQkFDakJwWSxHQUFHd1ksR0FBR3pYLElBQUksR0FBR3lYLEdBQUd2WCxLQUFLLEdBQUc7b0JBQ3hCaEIsR0FBR3VZLEdBQUd4WCxHQUFHLEdBQUd3WCxHQUFHblgsTUFBTSxHQUFHO2dCQUMxQjtnQkFDQW9NLGlCQUFpQmpLLEdBQUd4RCxDQUFDLEdBQUd5RCxHQUFHekQsQ0FBQztnQkFDNUIwTixpQkFBaUJsSyxHQUFHdkQsQ0FBQyxHQUFHd0QsR0FBR3hELENBQUM7WUFDOUI7WUFFQSxJQUFJLENBQUNySixLQUFLMlksVUFBVSxFQUFFO2dCQUNwQjNZLEtBQUsyWSxVQUFVLEdBQUdMLFVBQVU7Z0JBRTVCcE4sZUFBZWxMLE1BQU0sYUFBYTtZQUNwQztRQUNGO1FBRUFxVSxPQUFPZ0ssSUFBSSxHQUFHWDtRQUVkckosT0FBT2IsT0FBTyxHQUFHLFNBQVVuUSxDQUFDO1lBQzFCLE9BQU9vYSxVQUFVcGEsS0FBS3JELEtBQUswTCxZQUFZLEVBQUU7UUFDM0M7UUFFQTJJLE9BQU95TixhQUFhLEdBQUc7WUFDckIsT0FBTzloQixLQUFLMlksVUFBVSxHQUFHLElBQUksQ0FBQzdVLGFBQWE2UixXQUFVLElBQUs7UUFDNUQ7UUFFQXRCLE9BQU8wTixjQUFjLEdBQUc7WUFDdEIsT0FBTyxDQUFDamUsYUFBYXFTLFNBQVEsSUFBSztRQUNwQztRQUVBOUIsT0FBT3dOLE9BQU8sR0FBRyxTQUFVbGEsTUFBTSxFQUFFcWEsU0FBUztZQUMxQyxPQUFPN04sVUFBVTBOLE9BQU8sQ0FBQzdoQixLQUFLMkgsTUFBTSxFQUFFQSxRQUFRcWE7UUFDaEQ7UUFFQTNOLE9BQU80TixZQUFZLEdBQUcsU0FBVUMsSUFBSSxFQUFFQyxpQkFBaUI7WUFDckQsMERBQTBEO1lBQzFELElBQUlDLE9BQU9GLFNBQVMsY0FBY3ZnQixnQkFBZ0J1Z0IsT0FBTzNmLFVBQVUyZixTQUFTLENBQUNqTixlQUFlLFlBQVksU0FDcEd1SyxTQUNBQyxTQUNBNEMsT0FDQUMsV0FDQVgsSUFDQUM7WUFFSixJQUFJUSxTQUFTLFdBQVc7Z0JBQ3RCVCxLQUFLelgsV0FBV2xLLEtBQUsySCxNQUFNO2dCQUMzQmlhLEtBQUsxWCxXQUFXZ1k7WUFDbEI7WUFFQTFDLFVBQVU0QyxTQUFTLFVBQVVwaUIsS0FBS29KLENBQUMsR0FBRzJOLGdCQUFnQnFMLFNBQVMsYUFBYXpnQixjQUFjNGdCLFdBQVcsQ0FBQzVhLFFBQVF1TixTQUFTeU0sR0FBR3hYLElBQUksR0FBR3dYLEdBQUd0WCxLQUFLLEdBQUcsSUFBS3VYLENBQUFBLEdBQUd6WCxJQUFJLEdBQUd5WCxHQUFHdlgsS0FBSyxHQUFHO1lBRXRLLElBQUk0SyxjQUFjO2dCQUNoQixPQUFPdUssVUFBVSxJQUFJLHNCQUFzQjtZQUM3QyxPQUFPO2dCQUNMMkMsb0JBQW9CQSxxQkFBcUI7Z0JBQ3pDMUMsVUFBVTJDLFNBQVMsVUFBVXBpQixLQUFLcUosQ0FBQyxHQUFHMk4sZ0JBQWdCb0wsU0FBUyxhQUFhemdCLGNBQWM0Z0IsV0FBVyxDQUFDNWEsUUFBUXdOLFNBQVN3TSxHQUFHdlgsR0FBRyxHQUFHdVgsR0FBR2xYLE1BQU0sR0FBRyxJQUFLbVgsQ0FBQUEsR0FBR3hYLEdBQUcsR0FBR3dYLEdBQUduWCxNQUFNLEdBQUc7Z0JBQ3RLNFgsUUFBUXhmLEtBQUs0YixHQUFHLENBQUNlLFVBQVVDO2dCQUMzQjZDLFlBQVlELFFBQVEsSUFBSUYsb0JBQW9CLEtBQUszQyxVQUFVLElBQUksU0FBUztnQkFFeEUsSUFBSTZDLFFBQVFGLG1CQUFtQjtvQkFDN0IsSUFBSUcsY0FBYyxJQUFJO3dCQUNwQkEsYUFBYTtvQkFDZjtvQkFFQUEsYUFBYTdDLFVBQVUsSUFBSSxPQUFPO2dCQUNwQztZQUNGO1lBRUEsT0FBTzZDO1FBQ1Q7UUFFQWpPLE9BQU9nSSxXQUFXLEdBQUcsU0FBVW1HLFNBQVMsRUFBRUMsTUFBTTtZQUM5QyxJQUFJclosR0FBR0MsR0FBR3lFLG1CQUFtQnpLLEdBQUcwUCxRQUFROEY7WUFFeEMsSUFBSTJKLGFBQWFwWCxLQUFLd1AsTUFBTSxLQUFLNEgsV0FBVztnQkFDMUNwWCxLQUFLd1AsTUFBTSxHQUFHNEg7Z0JBQ2QsT0FBT3hpQixLQUFLMGlCLE1BQU0sQ0FBQyxNQUFNRDtZQUMzQjtZQUVBaEosT0FBTztZQUNQa0I7WUFFQSxJQUFJMUQsYUFBYSxDQUFDOEYsY0FBYztnQkFDOUIzVCxJQUFJcEosS0FBS29KLENBQUM7Z0JBQ1ZDLElBQUlySixLQUFLcUosQ0FBQztnQkFFVixJQUFJRCxJQUFJK0MsTUFBTTtvQkFDWi9DLElBQUkrQztnQkFDTixPQUFPLElBQUkvQyxJQUFJNEMsTUFBTTtvQkFDbkI1QyxJQUFJNEM7Z0JBQ047Z0JBRUEsSUFBSTNDLElBQUlnRCxNQUFNO29CQUNaaEQsSUFBSWdEO2dCQUNOLE9BQU8sSUFBSWhELElBQUk2QyxNQUFNO29CQUNuQjdDLElBQUk2QztnQkFDTjtnQkFFQSxJQUFJbE0sS0FBS29KLENBQUMsS0FBS0EsS0FBS3BKLEtBQUtxSixDQUFDLEtBQUtBLEdBQUc7b0JBQ2hDeUUsb0JBQW9CO29CQUNwQjlOLEtBQUtvSixDQUFDLEdBQUdwSixLQUFLaWMsSUFBSSxHQUFHN1M7b0JBRXJCLElBQUk2TCxjQUFjO3dCQUNoQmpWLEtBQUttYyxXQUFXLEdBQUcvUztvQkFDckIsT0FBTzt3QkFDTHBKLEtBQUtxSixDQUFDLEdBQUdySixLQUFLa2MsSUFBSSxHQUFHN1M7b0JBQ3ZCO29CQUVBa08sUUFBUTtvQkFDUmtCLE9BQU87b0JBRVAsSUFBSXpZLEtBQUs0VSxVQUFVLElBQUksQ0FBQzVVLEtBQUsyWSxVQUFVLEVBQUU7d0JBQ3ZDelAsa0JBQWtCdkIsT0FBT2MsVUFBVTt3QkFFbkNwRixJQUFJc0U7d0JBQ0puRCxhQUFhd0QsU0FBUyxHQUFHbkgsS0FBS2tILFdBQVcsSUFBSSxPQUFPbEgsS0FBS2tILFdBQVcsR0FBRzJPLFNBQVN6TyxlQUFlLENBQUNELFNBQVMsSUFBSSxPQUFPME8sU0FBU3pPLGVBQWUsQ0FBQ0QsU0FBUyxHQUFHME8sU0FBU3hPLElBQUksQ0FBQ0YsU0FBUzt3QkFDaEx4RCxhQUFhNkQsVUFBVSxHQUFHeEgsS0FBS3VILFdBQVcsSUFBSSxPQUFPdkgsS0FBS3VILFdBQVcsR0FBR3NPLFNBQVN6TyxlQUFlLENBQUNJLFVBQVUsSUFBSSxPQUFPcU8sU0FBU3pPLGVBQWUsQ0FBQ0ksVUFBVSxHQUFHcU8sU0FBU3hPLElBQUksQ0FBQ0csVUFBVTt3QkFFcEwsTUFBT2hGLEtBQUssQ0FBQ3dWLE9BQVE7NEJBQ25CLG9GQUFvRjs0QkFDcEZBLFNBQVNyUSxRQUFRbkYsRUFBRW9GLFVBQVU7NEJBQzdCc0ssU0FBUzhGLFNBQVNyVSxlQUFlbkIsRUFBRW9GLFVBQVU7NEJBRTdDLElBQUk0TSxVQUFVdEMsT0FBTy9LLFNBQVMsR0FBRytLLE9BQU94SixhQUFhLEVBQUU7Z0NBQ3JEd0osT0FBTy9LLFNBQVMsR0FBRytLLE9BQU94SixhQUFhOzRCQUN6Qzs0QkFFQSxJQUFJNkwsVUFBVXJDLE9BQU8xSyxVQUFVLEdBQUcwSyxPQUFPekosYUFBYSxFQUFFO2dDQUN0RHlKLE9BQU8xSyxVQUFVLEdBQUcwSyxPQUFPekosYUFBYTs0QkFDMUM7NEJBRUFqRyxJQUFJMFA7d0JBQ047b0JBQ0Y7Z0JBQ0Y7Z0JBRUEsSUFBSS9TLEtBQUs4WixVQUFVLElBQUtoTSxDQUFBQSxxQkFBcUI5TixLQUFLaWMsSUFBSSxHQUFHOVAsUUFBUW5NLEtBQUtpYyxJQUFJLEdBQUdqUSxRQUFRaE0sS0FBS2tjLElBQUksR0FBRzdQLFFBQVFyTSxLQUFLa2MsSUFBSSxHQUFHaFEsSUFBRyxHQUFJO29CQUMxSGlQLFFBQVEvUCxLQUFLc0ksT0FBTyxJQUFJdEksS0FBS2tWLFVBQVUsRUFBRXhTO2dCQUMzQztZQUNGO1lBRUEsT0FBTzlOO1FBQ1Q7UUFFQXFVLE9BQU9xTyxNQUFNLEdBQUcsU0FBVXJHLFdBQVcsRUFBRW9HLE1BQU0sRUFBRUUscUJBQXFCO1lBQ2xFLElBQUlGLFVBQVV6aUIsS0FBS3VULFNBQVMsRUFBRTtnQkFDNUIseUlBQXlJO2dCQUN6SSxJQUFJcVAsSUFBSWxpQixpRUFBZUEsQ0FBQ2lILFNBQ3BCOUMsSUFBSXdULFlBQVk3TSxLQUFLLENBQUM7b0JBQ3hCcEMsR0FBR3BKLEtBQUtvSixDQUFDLEdBQUcyTjtvQkFDWjFOLEdBQUdySixLQUFLcUosQ0FBQyxHQUFHMk47Z0JBQ2QsSUFDSTZMLEtBQUtuaUIsaUVBQWVBLENBQUNpSCxPQUFPYyxVQUFVLEVBQUU7Z0JBQzVDb2EsR0FBR3JYLEtBQUssQ0FBQztvQkFDUHBDLEdBQUd3WixFQUFFdmYsQ0FBQyxHQUFHd0IsRUFBRXVFLENBQUM7b0JBQ1pDLEdBQUd1WixFQUFFOUMsQ0FBQyxHQUFHamIsRUFBRXdFLENBQUM7Z0JBQ2QsR0FBR3hFO2dCQUNIN0UsS0FBS29KLENBQUMsSUFBSXZFLEVBQUV1RSxDQUFDLEdBQUd5WixHQUFHeGYsQ0FBQztnQkFDcEJyRCxLQUFLcUosQ0FBQyxJQUFJeEUsRUFBRXdFLENBQUMsR0FBR3daLEdBQUcvQyxDQUFDO2dCQUNwQnJILE9BQU87Z0JBQ1BrRTtZQUNGO1lBRUEsSUFBSXZULElBQUlwSixLQUFLb0osQ0FBQyxFQUNWQyxJQUFJckosS0FBS3FKLENBQUM7WUFDZGlULGFBQWEsQ0FBQ21HO1lBRWQsSUFBSXBHLGFBQWE7Z0JBQ2ZyYyxLQUFLcWMsV0FBVztZQUNsQixPQUFPO2dCQUNMOUUsU0FBU29MLHlCQUF5QmxLLE9BQU87Z0JBQ3pDZ0IsT0FBTztZQUNUO1lBRUEsSUFBSWdKLFFBQVE7Z0JBQ1ZwSixtQkFBbUJyWixLQUFLK1ksUUFBUSxFQUFFL1ksS0FBS2daLFFBQVE7Z0JBQy9DekIsU0FBU2tCLE9BQU87WUFDbEI7WUFFQSxJQUFJelksS0FBS3VULFNBQVMsSUFBSSxDQUFDa1AsVUFBV3JOLENBQUFBLFVBQVV2UyxLQUFLNGIsR0FBRyxDQUFDclYsSUFBSXBKLEtBQUtvSixDQUFDLElBQUksUUFBUWlNLFVBQVV4UyxLQUFLNGIsR0FBRyxDQUFDcFYsSUFBSXJKLEtBQUtxSixDQUFDLElBQUksUUFBUSxDQUFDNEwsWUFBVyxHQUFJO2dCQUNsSTBIO1lBQ0Y7WUFFQSxJQUFJM2MsS0FBSzRVLFVBQVUsRUFBRTtnQkFDbkIxTCxrQkFBa0J2QixPQUFPYyxVQUFVLEVBQUV6SSxLQUFLMlksVUFBVTtnQkFFcEQvQyx3QkFBd0I1VixLQUFLMlksVUFBVTtnQkFDdkNGLE9BQU8sT0FBTywrQkFBK0I7Z0JBRTdDL1Asc0JBQXNCZixRQUFRa1o7Z0JBRTlCdlksbUJBQW1CWCxRQUFRa1o7WUFDN0I7WUFFQSxPQUFPN2dCO1FBQ1Q7UUFFQXFVLE9BQU83QyxNQUFNLEdBQUcsU0FBVXJPLElBQUk7WUFDNUIsSUFBSTJmLFVBQVU7Z0JBQ1pqVSxNQUFNO1lBQ1IsR0FDSWtVLElBQ0E3ZCxHQUNBc1E7WUFFSixJQUFJcEssS0FBS21ILE1BQU0sS0FBSyxPQUFPO2dCQUN6QnVRLFFBQVF2USxNQUFNLEdBQUduSCxLQUFLbUgsTUFBTSxJQUFJM1E7WUFDbEM7WUFFQSxJQUFJaEIsS0FBS3dPLEtBQUssQ0FBQ3dFLFdBQVcsQ0FBQyxpQkFBaUI7Z0JBQzFDa1AsUUFBUUUsWUFBWSxHQUFHO1lBQ3pCO1lBRUEsSUFBSTdmLFNBQVMsUUFBUTtnQkFDbkI2QixpQ0FBaUN1USxVQUFVSCxXQUFXQyxTQUFTLFNBQVNqSyxLQUFLMk0seUJBQXlCLElBQUlwUSxPQUFPb0ksWUFBWSxLQUFLcEksT0FBT2lELFlBQVksS0FBTWpELENBQUFBLE9BQU9tSSxXQUFXLEtBQUtuSSxPQUFPaUQsWUFBWSxLQUFLUSxLQUFLMEosaUJBQWlCLEdBQUcsaUJBQWlCTSxTQUFTLFVBQVUsVUFBVSxrVUFBa1U7Z0JBR25sQmxRLElBQUlxUSxTQUFTcFEsTUFBTTtnQkFFbkIsTUFBTyxFQUFFRCxJQUFJLENBQUMsRUFBRztvQkFDZnNRLFVBQVVELFFBQVEsQ0FBQ3JRLEVBQUU7b0JBQ3JCckQsb0JBQW9CNEUsYUFBYStPLFNBQVMsYUFBYStIO29CQUV2RDlXLGFBQWErTyxTQUFTLGNBQWMrSDtvQkFFcEM5VyxhQUFhK08sU0FBUyxTQUFTc0wsU0FBUyxPQUFPLHFHQUFxRztvQkFHcEpsZ0IsS0FBS2dPLEdBQUcsQ0FBQzRHLFNBQVNzTjtvQkFFbEIsSUFBSXROLFFBQVEvSSxPQUFPLElBQUkrSSxRQUFROUksZUFBZSxJQUFJMEksV0FBV0MsUUFBUTt3QkFDbkUsK0dBQStHO3dCQUMvR3pVLEtBQUtnTyxHQUFHLENBQUM0RyxRQUFROUksZUFBZSxFQUFFOzRCQUNoQ3JILGFBQWErRixLQUFLMk0seUJBQXlCLElBQUkzTSxLQUFLMEosaUJBQWlCLEdBQUcsaUJBQWlCTSxTQUFTLFVBQVU7d0JBQzlHO29CQUNGO29CQUVBaEssS0FBS3dTLGdCQUFnQixJQUFJblgsYUFBYStPLFNBQVMsZUFBZStDO2dCQUNoRTtnQkFFQS9KLGVBQWUrRyxVQUFVO1lBQzNCO1lBRUFqTixtQkFBbUJYLFFBQVFrWjtZQUUzQmxLLFVBQVU7WUFFVixJQUFJaFYsaUJBQWlCd0IsU0FBUyxRQUFRO2dCQUNwQ3hCLGNBQWNzaEIsS0FBSyxDQUFDck0sZUFBZWpQLFFBQVFxTixTQUFTLFFBQVFDLGVBQWUsYUFBYTtZQUMxRjtZQUVBdE4sT0FBT3ViLFNBQVMsR0FBR0gsS0FBSyxNQUFNM2U7WUFDOUJELE9BQU8sQ0FBQzRlLEdBQUcsR0FBRy9pQjtZQUVkLElBQUk0VyxhQUFhO2dCQUNmQSxZQUFZcEYsTUFBTTtnQkFDbEJvRixZQUFZbFEsT0FBTyxDQUFDd2MsU0FBUyxHQUFHSDtZQUNsQztZQUVDM1gsQ0FBQUEsS0FBS3dQLE1BQU0sSUFBSTNGLFlBQVcsS0FBTTBIO1lBQ2pDdlIsS0FBS3dQLE1BQU0sSUFBSTVhLEtBQUtxYyxXQUFXO1lBQy9CLE9BQU9yYztRQUNUO1FBRUFxVSxPQUFPakQsT0FBTyxHQUFHLFNBQVVqTyxJQUFJO1lBQzdCLElBQUlnZ0IsV0FBV25qQixLQUFLMlksVUFBVSxFQUMxQnpULElBQUlxUSxTQUFTcFEsTUFBTSxFQUNuQnFRO1lBRUosTUFBTyxFQUFFdFEsSUFBSSxDQUFDLEVBQUc7Z0JBQ2Z3RSxVQUFVNkwsUUFBUSxDQUFDclEsRUFBRSxFQUFFLFVBQVU7WUFDbkM7WUFFQSxJQUFJL0IsU0FBUyxRQUFRO2dCQUNuQjZCLGlDQUFpQ3VRLFVBQVU7Z0JBRTNDclEsSUFBSXFRLFNBQVNwUSxNQUFNO2dCQUVuQixNQUFPLEVBQUVELElBQUksQ0FBQyxFQUFHO29CQUNmc1EsVUFBVUQsUUFBUSxDQUFDclEsRUFBRTtvQkFFckJ3RSxVQUFVOEwsU0FBUyxnQkFBZ0I7b0JBRW5Dek8sZ0JBQWdCeU8sU0FBUyxhQUFhK0g7b0JBRXRDeFcsZ0JBQWdCeU8sU0FBUyxjQUFjK0g7b0JBRXZDeFcsZ0JBQWdCeU8sU0FBUyxTQUFTc0wsU0FBUztvQkFFM0MvWixnQkFBZ0J5TyxTQUFTLGVBQWUrQztnQkFDMUM7Z0JBRUEvSixlQUFlK0csVUFBVTtnQkFFekIsSUFBSXNDLGtCQUFrQjtvQkFDcEI5USxnQkFBZ0I4USxrQkFBa0IsZUFBZTRGO29CQUVqRDFXLGdCQUFnQjhRLGtCQUFrQixZQUFZNEY7b0JBRTlDMVcsZ0JBQWdCOFEsa0JBQWtCLGFBQWE2RjtnQkFDakQ7Z0JBRUEzVyxnQkFBZ0IyUCxVQUFVLFdBQVcrRztnQkFFckMxVyxnQkFBZ0IyUCxVQUFVLGFBQWFnSDtZQUN6QztZQUVBaFYsc0JBQXNCZixRQUFRa1o7WUFFOUJsSyxVQUFVO1lBRVYsSUFBSWhWLGlCQUFpQndCLFNBQVMsUUFBUTtnQkFDcEN4QixjQUFjeWhCLE9BQU8sQ0FBQ3hNLGVBQWVqUCxRQUFRcU4sU0FBUyxRQUFRQyxlQUFlLGFBQWE7Z0JBQzFGalYsS0FBS29iLEtBQUssSUFBSXBiLEtBQUtvYixLQUFLLENBQUM2QyxJQUFJO1lBQy9CO1lBRUFySCxlQUFlQSxZQUFZeEYsT0FBTztZQUVsQ3BMLHVCQUF1QnlTO1lBRXZCelksS0FBSzJZLFVBQVUsR0FBRzNZLEtBQUt1VCxTQUFTLEdBQUdxRSxhQUFhO1lBQ2hEdUwsWUFBWWpZLGVBQWVsTCxNQUFNLFdBQVc7WUFDNUMsT0FBT0E7UUFDVDtRQUVBcVUsT0FBT3NDLE9BQU8sR0FBRyxTQUFVclUsS0FBSyxFQUFFYSxJQUFJO1lBQ3BDLE9BQU93TixVQUFVeEwsTUFBTSxHQUFHN0MsUUFBUXRDLEtBQUt3UixNQUFNLENBQUNyTyxRQUFRbkQsS0FBS29SLE9BQU8sQ0FBQ2pPLFFBQVF3VDtRQUM3RTtRQUVBdEMsT0FBTzRKLElBQUksR0FBRztZQUNaamUsS0FBSzhaLFVBQVUsR0FBRztZQUNsQjlaLEtBQUtvYixLQUFLLElBQUlwYixLQUFLb2IsS0FBSyxDQUFDNkMsSUFBSTtZQUM3QmplLEtBQUtvUixPQUFPO1lBQ1p4USxLQUFLZ08sR0FBRyxDQUFDMkcsVUFBVTtnQkFDakI4TixZQUFZO1lBQ2Q7WUFDQSxPQUFPbGYsT0FBTyxDQUFDd0QsT0FBT3ViLFNBQVMsQ0FBQztZQUNoQyxPQUFPbGpCO1FBQ1Q7UUFFQXFVLE9BQU9pUCxNQUFNLEdBQUc7WUFDZCxJQUFJLENBQUNyRixJQUFJO1lBQ1QsSUFBSSxDQUFDM0osTUFBTSxJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDZ1AsTUFBTTtRQUNuQztRQUVBLElBQUksQ0FBQ25nQixLQUFLc1AsT0FBTyxDQUFDLFdBQVc7WUFDM0JtRSxjQUFjdkMsT0FBT3VDLFdBQVcsR0FBRyxJQUFJekgsWUFBWXhILFFBQVE3QyxRQUFRO2dCQUNqRWlNLFFBQVEsU0FBU0E7b0JBQ2YsZ1JBQWdSO29CQUNoUi9RLEtBQUt1VCxTQUFTLElBQUlrSyxVQUFVO2dCQUM5QjtZQUNGLEdBQUdyUyxRQUFRLDRUQUE0VDtZQUV2VXpELE9BQU9sRSxLQUFLLENBQUM4ZixTQUFTLEdBQUdsTyxVQUFVLENBQUM5VCxpQkFBaUIsU0FBUztZQUM5RG9HLE9BQU9sRSxLQUFLLENBQUMrZixTQUFTLEdBQUdwTyxVQUFVLENBQUM3VCxpQkFBaUIsU0FBUztZQUM5RG9HLFNBQVNpUCxZQUFZdEgsT0FBTztRQUM5QjtRQUVBLElBQUkyRixjQUFjO1lBQ2hCUyxVQUFVbkIsUUFBUSxHQUFHO1FBQ3ZCLE9BQU87WUFDTCxJQUFJYSxRQUFRO2dCQUNWTSxTQUFTLENBQUNSLE1BQU0sR0FBRztZQUNyQjtZQUVBLElBQUlHLFFBQVE7Z0JBQ1ZLLFNBQVMsQ0FBQ1AsTUFBTSxHQUFHO1lBQ3JCO1FBQ0Y7UUFFQWlCLFFBQVEzRixPQUFPLEdBQUcsYUFBYXJGLE9BQU9BLEtBQUtxRixPQUFPLEdBQUcsTUFBTSxnTkFBZ047UUFFM1EzTyxTQUFTL0IsdUJBQXVCc1U7UUFFaENBLE9BQU83QyxNQUFNO1FBRWIsT0FBTzZDO0lBQ1Q7SUFFQUYsVUFBVXNQLFFBQVEsR0FBRyxTQUFTQSxTQUFTOVAsSUFBSTtRQUN6Qy9TLE9BQU8rUztRQUVQMUI7SUFDRjtJQUVBa0MsVUFBVTVULE1BQU0sR0FBRyxTQUFTQSxPQUFPbWpCLE9BQU8sRUFBRXRZLElBQUk7UUFDOUNqSyxnQkFBZ0I4USxVQUFVO1FBQzFCLE9BQU81USxTQUFTcWlCLFNBQVNDLEdBQUcsQ0FBQyxTQUFVaGMsTUFBTTtZQUMzQyxPQUFPLElBQUl3TSxVQUFVeE0sUUFBUXlEO1FBQy9CO0lBQ0Y7SUFFQStJLFVBQVViLEdBQUcsR0FBRyxTQUFTQSxJQUFJM0wsTUFBTTtRQUNqQyxPQUFPeEQsT0FBTyxDQUFDLENBQUM5QyxTQUFTc0csT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUd1YixTQUFTLENBQUM7SUFDdkQ7SUFFQS9PLFVBQVUyTixhQUFhLEdBQUcsU0FBU0E7UUFDakMsT0FBTyxDQUFDaGUsYUFBYVEsYUFBWSxJQUFLO0lBQ3hDO0lBRUE2UCxVQUFVME4sT0FBTyxHQUFHLFNBQVNBLFFBQVErQixJQUFJLEVBQUVDLElBQUksRUFBRTdCLFNBQVM7UUFDeEQsSUFBSTRCLFNBQVNDLE1BQU07WUFDakIsT0FBTztRQUNUO1FBRUEsSUFBSWxDLEtBQUt6WCxXQUFXMFosT0FDaEJoQyxLQUFLMVgsV0FBVzJaLE9BQ2hCelosTUFBTXVYLEdBQUd2WCxHQUFHLEVBQ1pELE9BQU93WCxHQUFHeFgsSUFBSSxFQUNkRyxRQUFRcVgsR0FBR3JYLEtBQUssRUFDaEJJLFNBQVNpWCxHQUFHalgsTUFBTSxFQUNsQkwsUUFBUXNYLEdBQUd0WCxLQUFLLEVBQ2hCSSxTQUFTa1gsR0FBR2xYLE1BQU0sRUFDbEJxWixZQUFZbEMsR0FBR3pYLElBQUksR0FBR0csU0FBU3NYLEdBQUd0WCxLQUFLLEdBQUdILFFBQVF5WCxHQUFHeFgsR0FBRyxHQUFHTSxVQUFVa1gsR0FBR2xYLE1BQU0sR0FBR04sS0FDakYyWixTQUNBQyxNQUNBQztRQUVKLElBQUlILGFBQWEsQ0FBQzlCLFdBQVc7WUFDM0IsT0FBTyxDQUFDOEI7UUFDVjtRQUVBRyxVQUFVLENBQUNqQyxZQUFZLEVBQUMsRUFBR3ZQLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDN0N1UCxZQUFZM1UsV0FBVzJVLGNBQWM7UUFDckMrQixVQUFVO1lBQ1I1WixNQUFNdEgsS0FBS29HLEdBQUcsQ0FBQ2tCLE1BQU15WCxHQUFHelgsSUFBSTtZQUM1QkMsS0FBS3ZILEtBQUtvRyxHQUFHLENBQUNtQixLQUFLd1gsR0FBR3hYLEdBQUc7UUFDM0I7UUFDQTJaLFFBQVExWixLQUFLLEdBQUd4SCxLQUFLa0osR0FBRyxDQUFDekIsT0FBT3NYLEdBQUd0WCxLQUFLLElBQUl5WixRQUFRNVosSUFBSTtRQUN4RDRaLFFBQVF0WixNQUFNLEdBQUc1SCxLQUFLa0osR0FBRyxDQUFDckIsUUFBUWtYLEdBQUdsWCxNQUFNLElBQUlxWixRQUFRM1osR0FBRztRQUUxRCxJQUFJMlosUUFBUTFaLEtBQUssR0FBRyxLQUFLMFosUUFBUXRaLE1BQU0sR0FBRyxHQUFHO1lBQzNDLE9BQU87UUFDVDtRQUVBLElBQUl3WixTQUFTO1lBQ1hqQyxhQUFhO1lBQ2JnQyxPQUFPRCxRQUFRMVosS0FBSyxHQUFHMFosUUFBUXRaLE1BQU07WUFDckMsT0FBT3VaLFFBQVEzWixRQUFRSSxTQUFTdVgsYUFBYWdDLFFBQVFwQyxHQUFHdlgsS0FBSyxHQUFHdVgsR0FBR25YLE1BQU0sR0FBR3VYO1FBQzlFO1FBRUEsT0FBTytCLFFBQVExWixLQUFLLEdBQUcyWCxhQUFhK0IsUUFBUXRaLE1BQU0sR0FBR3VYO0lBQ3ZEO0lBRUEsT0FBTzdOO0FBQ1QsRUFBRUgsaUJBQWlCO0FBRW5CeE4sYUFBYTJOLFVBQVU5VCxTQUFTLEVBQUU7SUFDaEMwWSxVQUFVO0lBQ1ZDLFVBQVU7SUFDVm1FLFFBQVE7SUFDUkMsUUFBUTtJQUNSOUQsUUFBUTtJQUNSRSxRQUFRO0lBQ1JiLFlBQVk7SUFDWnBGLFdBQVc7QUFDYjtBQUVBWSxVQUFVZ0ssTUFBTSxHQUFHO0FBQ25CaEssVUFBVStQLE9BQU8sR0FBRztBQUNwQmhpQixjQUFjdEIsS0FBS3dCLGNBQWMsQ0FBQytSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvZ3NhcC9EcmFnZ2FibGUuanM/NGMxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogRHJhZ2dhYmxlIDMuMTIuNVxuICogaHR0cHM6Ly9nc2FwLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjQsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3NhcC5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR1NBUCBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBnZXRHbG9iYWxNYXRyaXgsIE1hdHJpeDJEIH0gZnJvbSBcIi4vdXRpbHMvbWF0cml4LmpzXCI7XG5cbnZhciBnc2FwLFxuICAgIF93aW4sXG4gICAgX2RvYyxcbiAgICBfZG9jRWxlbWVudCxcbiAgICBfYm9keSxcbiAgICBfdGVtcERpdixcbiAgICBfcGxhY2Vob2xkZXJEaXYsXG4gICAgX2NvcmVJbml0dGVkLFxuICAgIF9jaGVja1ByZWZpeCxcbiAgICBfdG9BcnJheSxcbiAgICBfc3VwcG9ydHNQYXNzaXZlLFxuICAgIF9pc1RvdWNoRGV2aWNlLFxuICAgIF90b3VjaEV2ZW50TG9va3VwLFxuICAgIF9pc011bHRpVG91Y2hpbmcsXG4gICAgX2lzQW5kcm9pZCxcbiAgICBJbmVydGlhUGx1Z2luLFxuICAgIF9kZWZhdWx0Q3Vyc29yLFxuICAgIF9zdXBwb3J0c1BvaW50ZXIsXG4gICAgX2NvbnRleHQsXG4gICAgX2dldFN0eWxlU2F2ZXIsXG4gICAgX2RyYWdDb3VudCA9IDAsXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZ2V0R1NBUCA9IGZ1bmN0aW9uIF9nZXRHU0FQKCkge1xuICByZXR1cm4gZ3NhcCB8fCBfd2luZG93RXhpc3RzKCkgJiYgKGdzYXAgPSB3aW5kb3cuZ3NhcCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbiAmJiBnc2FwO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzT2JqZWN0ID0gZnVuY3Rpb24gX2lzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59LFxuICAgIF9pc1VuZGVmaW5lZCA9IGZ1bmN0aW9uIF9pc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIGZhbHNlO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcCA9IFwidHJhbnNmb3JtXCIsXG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBcInRyYW5zZm9ybU9yaWdpblwiLFxuICAgIF9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwKSAvIDEwMDAwO1xufSxcbiAgICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXksXG4gICAgX2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiBfY3JlYXRlRWxlbWVudCh0eXBlLCBucykge1xuICB2YXIgZSA9IF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoKG5zIHx8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKS5yZXBsYWNlKC9eaHR0cHMvLCBcImh0dHBcIiksIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgc2VydmVycyBzd2FwIGluIGh0dHBzIGZvciBodHRwIGluIHRoZSBuYW1lc3BhY2Ugd2hpY2ggY2FuIGJyZWFrIHRoaW5ncywgbWFraW5nIFwic3R5bGVcIiBpbmFjY2Vzc2libGUuXG5cbiAgcmV0dXJuIGUuc3R5bGUgPyBlIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpOyAvL3NvbWUgZW52aXJvbm1lbnRzIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgZWxlbWVudCdzIHN0eWxlIHdoZW4gY3JlYXRlZCB3aXRoIGEgbmFtZXNwYWNlIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byB0aGUgc3RhbmRhcmQgY3JlYXRlRWxlbWVudCgpIHRvIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZS4gQWxzbyBub3RlIHRoYXQgd2hlbiBHU0FQIGlzIGVtYmVkZGVkIGRpcmVjdGx5IGluc2lkZSBhbiBTVkcgZmlsZSwgY3JlYXRlRWxlbWVudCgpIHdvbid0IGFsbG93IGFjY2VzcyB0byB0aGUgc3R5bGUgb2JqZWN0IGluIEZpcmVmb3ggKHNlZSBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcbiAgICBfYmlnTnVtID0gMWUyMCxcbiAgICBfaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4MkQoKSxcbiAgICBfZ2V0VGltZSA9IERhdGUubm93IHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufSxcbiAgICBfcmVuZGVyUXVldWUgPSBbXSxcbiAgICBfbG9va3VwID0ge30sXG4gICAgLy93aGVuIGEgRHJhZ2dhYmxlIGlzIGNyZWF0ZWQsIHRoZSB0YXJnZXQgZ2V0cyBhIHVuaXF1ZSBfZ3NEcmFnSUQgcHJvcGVydHkgdGhhdCBhbGxvd3MgZ2V0cyBhc3NvY2lhdGVkIHdpdGggdGhlIERyYWdnYWJsZSBpbnN0YW5jZSBmb3IgcXVpY2sgbG9va3VwcyBpbiBEcmFnZ2FibGUuZ2V0KCkuIFRoaXMgYXZvaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXMgdGhhdCBjb3VsZCBjYXVzZSBnYyBwcm9ibGVtcy5cbl9sb29rdXBDb3VudCA9IDAsXG4gICAgX2NsaWNrYWJsZVRhZ0V4cCA9IC9eKD86YXxpbnB1dHx0ZXh0YXJlYXxidXR0b258c2VsZWN0KSQvaSxcbiAgICBfbGFzdERyYWdUaW1lID0gMCxcbiAgICBfdGVtcDEgPSB7fSxcbiAgICAvLyBhIHNpbXBsZSBvYmplY3Qgd2UgcmV1c2UgYW5kIHBvcHVsYXRlICh1c3VhbGx5IHgveSBwcm9wZXJ0aWVzKSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UuXG5fd2luZG93UHJveHkgPSB7fSxcbiAgICAvL21lbW9yeS9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gLSB3ZSByZXVzZSB0aGlzIG9iamVjdCBkdXJpbmcgYXV0b1Njcm9sbCB0byBzdG9yZSB3aW5kb3ctcmVsYXRlZCBib3VuZHMvb2Zmc2V0cy5cbl9jb3B5ID0gZnVuY3Rpb24gX2NvcHkob2JqLCBmYWN0b3IpIHtcbiAgdmFyIGNvcHkgPSB7fSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIG9iaikge1xuICAgIGNvcHlbcF0gPSBmYWN0b3IgPyBvYmpbcF0gKiBmYWN0b3IgOiBvYmpbcF07XG4gIH1cblxuICByZXR1cm4gY29weTtcbn0sXG4gICAgX2V4dGVuZCA9IGZ1bmN0aW9uIF9leHRlbmQob2JqLCBkZWZhdWx0cykge1xuICBmb3IgKHZhciBwIGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKCEocCBpbiBvYmopKSB7XG4gICAgICBvYmpbcF0gPSBkZWZhdWx0c1twXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyA9IGZ1bmN0aW9uIF9zZXRUb3VjaEFjdGlvbkZvckFsbERlc2NlbmRhbnRzKGVsZW1lbnRzLCB2YWx1ZSkge1xuICB2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgIGNoaWxkcmVuO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YWx1ZSA/IGVsZW1lbnRzW2ldLnN0eWxlLnRvdWNoQWN0aW9uID0gdmFsdWUgOiBlbGVtZW50c1tpXS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcInRvdWNoLWFjdGlvblwiKTtcbiAgICBjaGlsZHJlbiA9IGVsZW1lbnRzW2ldLmNoaWxkcmVuO1xuICAgIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCAmJiBfc2V0VG91Y2hBY3Rpb25Gb3JBbGxEZXNjZW5kYW50cyhjaGlsZHJlbiwgdmFsdWUpO1xuICB9XG59LFxuICAgIF9yZW5kZXJRdWV1ZVRpY2sgPSBmdW5jdGlvbiBfcmVuZGVyUXVldWVUaWNrKCkge1xuICByZXR1cm4gX3JlbmRlclF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuYygpO1xuICB9KTtcbn0sXG4gICAgX2FkZFRvUmVuZGVyUXVldWUgPSBmdW5jdGlvbiBfYWRkVG9SZW5kZXJRdWV1ZShmdW5jKSB7XG4gIF9yZW5kZXJRdWV1ZS5wdXNoKGZ1bmMpO1xuXG4gIGlmIChfcmVuZGVyUXVldWUubGVuZ3RoID09PSAxKSB7XG4gICAgZ3NhcC50aWNrZXIuYWRkKF9yZW5kZXJRdWV1ZVRpY2spO1xuICB9XG59LFxuICAgIF9yZW5kZXJRdWV1ZVRpbWVvdXQgPSBmdW5jdGlvbiBfcmVuZGVyUXVldWVUaW1lb3V0KCkge1xuICByZXR1cm4gIV9yZW5kZXJRdWV1ZS5sZW5ndGggJiYgZ3NhcC50aWNrZXIucmVtb3ZlKF9yZW5kZXJRdWV1ZVRpY2spO1xufSxcbiAgICBfcmVtb3ZlRnJvbVJlbmRlclF1ZXVlID0gZnVuY3Rpb24gX3JlbW92ZUZyb21SZW5kZXJRdWV1ZShmdW5jKSB7XG4gIHZhciBpID0gX3JlbmRlclF1ZXVlLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKF9yZW5kZXJRdWV1ZVtpXSA9PT0gZnVuYykge1xuICAgICAgX3JlbmRlclF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICB9XG4gIH1cblxuICBnc2FwLnRvKF9yZW5kZXJRdWV1ZVRpbWVvdXQsIHtcbiAgICBvdmVyd3JpdGU6IHRydWUsXG4gICAgZGVsYXk6IDE1LFxuICAgIGR1cmF0aW9uOiAwLFxuICAgIG9uQ29tcGxldGU6IF9yZW5kZXJRdWV1ZVRpbWVvdXQsXG4gICAgZGF0YTogXCJfZHJhZ2dhYmxlXCJcbiAgfSk7IC8vcmVtb3ZlIHRoZSBcInRpY2tcIiBsaXN0ZW5lciBvbmx5IGFmdGVyIHRoZSByZW5kZXIgcXVldWUgaXMgZW1wdHkgZm9yIDE1IHNlY29uZHMgKHRvIGltcHJvdmUgcGVyZm9ybWFuY2UpLiBBZGRpbmcvcmVtb3ZpbmcgaXQgY29uc3RhbnRseSBmb3IgZXZlcnkgY2xpY2svdG91Y2ggd291bGRuJ3QgZGVsaXZlciBvcHRpbWFsIHNwZWVkLCBhbmQgd2UgYWxzbyBkb24ndCB3YW50IHRoZSB0aWNrZXIgdG8ga2VlcCBjYWxsaW5nIHRoZSByZW5kZXIgbWV0aG9kIHdoZW4gdGhpbmdzIGFyZSBpZGxlIGZvciBsb25nIHBlcmlvZHMgb2YgdGltZSAod2Ugd2FudCB0byBpbXByb3ZlIGJhdHRlcnkgbGlmZSBvbiBtb2JpbGUgZGV2aWNlcykuXG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBpZiAoIShwIGluIG9iaikpIHtcbiAgICAgIG9ialtwXSA9IGRlZmF1bHRzW3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59LFxuICAgIF9hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB2YXIgdG91Y2hUeXBlID0gX3RvdWNoRXZlbnRMb29rdXBbdHlwZV07XG4gICAgY2FwdHVyZSA9IGNhcHR1cmUgfHwgKF9zdXBwb3J0c1Bhc3NpdmUgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0gOiBudWxsKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hUeXBlIHx8IHR5cGUsIGZ1bmMsIGNhcHR1cmUpO1xuICAgIHRvdWNoVHlwZSAmJiB0eXBlICE9PSB0b3VjaFR5cGUgJiYgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIGNhcHR1cmUpOyAvL3NvbWUgYnJvd3NlcnMgYWN0dWFsbHkgc3VwcG9ydCBib3RoLCBzbyBtdXN0IHdlLiBCdXQgcG9pbnRlciBldmVudHMgY292ZXIgYWxsLlxuICB9XG59LFxuICAgIF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIF9yZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG4gIGlmIChlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICB2YXIgdG91Y2hUeXBlID0gX3RvdWNoRXZlbnRMb29rdXBbdHlwZV07XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoVHlwZSB8fCB0eXBlLCBmdW5jLCBjYXB0dXJlKTtcbiAgICB0b3VjaFR5cGUgJiYgdHlwZSAhPT0gdG91Y2hUeXBlICYmIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jLCBjYXB0dXJlKTtcbiAgfVxufSxcbiAgICBfcHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiBfcHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQgJiYgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgZXZlbnQucHJldmVudE1hbmlwdWxhdGlvbiAmJiBldmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKCk7IC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzXG59LFxuICAgIF9oYXNUb3VjaElEID0gZnVuY3Rpb24gX2hhc1RvdWNoSUQobGlzdCwgSUQpIHtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGxpc3RbaV0uaWRlbnRpZmllciA9PT0gSUQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufSxcbiAgICBfb25NdWx0aVRvdWNoRG9jdW1lbnRFbmQgPSBmdW5jdGlvbiBfb25NdWx0aVRvdWNoRG9jdW1lbnRFbmQoZXZlbnQpIHtcbiAgX2lzTXVsdGlUb3VjaGluZyA9IGV2ZW50LnRvdWNoZXMgJiYgX2RyYWdDb3VudCA8IGV2ZW50LnRvdWNoZXMubGVuZ3RoO1xuXG4gIF9yZW1vdmVMaXN0ZW5lcihldmVudC50YXJnZXQsIFwidG91Y2hlbmRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50RW5kKTtcbn0sXG4gICAgX29uTXVsdGlUb3VjaERvY3VtZW50ID0gZnVuY3Rpb24gX29uTXVsdGlUb3VjaERvY3VtZW50KGV2ZW50KSB7XG4gIF9pc011bHRpVG91Y2hpbmcgPSBldmVudC50b3VjaGVzICYmIF9kcmFnQ291bnQgPCBldmVudC50b3VjaGVzLmxlbmd0aDtcblxuICBfYWRkTGlzdGVuZXIoZXZlbnQudGFyZ2V0LCBcInRvdWNoZW5kXCIsIF9vbk11bHRpVG91Y2hEb2N1bWVudEVuZCk7XG59LFxuICAgIF9nZXREb2NTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0RG9jU2Nyb2xsVG9wKGRvYykge1xuICByZXR1cm4gX3dpbi5wYWdlWU9mZnNldCB8fCBkb2Muc2Nyb2xsVG9wIHx8IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvYy5ib2R5LnNjcm9sbFRvcCB8fCAwO1xufSxcbiAgICBfZ2V0RG9jU2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIF9nZXREb2NTY3JvbGxMZWZ0KGRvYykge1xuICByZXR1cm4gX3dpbi5wYWdlWE9mZnNldCB8fCBkb2Muc2Nyb2xsTGVmdCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jLmJvZHkuc2Nyb2xsTGVmdCB8fCAwO1xufSxcbiAgICBfYWRkU2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkU2Nyb2xsTGlzdGVuZXIoZSwgY2FsbGJhY2spIHtcbiAgX2FkZExpc3RlbmVyKGUsIFwic2Nyb2xsXCIsIGNhbGxiYWNrKTtcblxuICBpZiAoIV9pc1Jvb3QoZS5wYXJlbnROb2RlKSkge1xuICAgIF9hZGRTY3JvbGxMaXN0ZW5lcihlLnBhcmVudE5vZGUsIGNhbGxiYWNrKTtcbiAgfVxufSxcbiAgICBfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIoZSwgY2FsbGJhY2spIHtcbiAgX3JlbW92ZUxpc3RlbmVyKGUsIFwic2Nyb2xsXCIsIGNhbGxiYWNrKTtcblxuICBpZiAoIV9pc1Jvb3QoZS5wYXJlbnROb2RlKSkge1xuICAgIF9yZW1vdmVTY3JvbGxMaXN0ZW5lcihlLnBhcmVudE5vZGUsIGNhbGxiYWNrKTtcbiAgfVxufSxcbiAgICBfaXNSb290ID0gZnVuY3Rpb24gX2lzUm9vdChlKSB7XG4gIHJldHVybiAhISghZSB8fCBlID09PSBfZG9jRWxlbWVudCB8fCBlLm5vZGVUeXBlID09PSA5IHx8IGUgPT09IF9kb2MuYm9keSB8fCBlID09PSBfd2luIHx8ICFlLm5vZGVUeXBlIHx8ICFlLnBhcmVudE5vZGUpO1xufSxcbiAgICBfZ2V0TWF4U2Nyb2xsID0gZnVuY3Rpb24gX2dldE1heFNjcm9sbChlbGVtZW50LCBheGlzKSB7XG4gIHZhciBkaW0gPSBheGlzID09PSBcInhcIiA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIsXG4gICAgICBzY3JvbGwgPSBcInNjcm9sbFwiICsgZGltLFxuICAgICAgY2xpZW50ID0gXCJjbGllbnRcIiArIGRpbTtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIF9pc1Jvb3QoZWxlbWVudCkgPyBNYXRoLm1heChfZG9jRWxlbWVudFtzY3JvbGxdLCBfYm9keVtzY3JvbGxdKSAtIChfd2luW1wiaW5uZXJcIiArIGRpbV0gfHwgX2RvY0VsZW1lbnRbY2xpZW50XSB8fCBfYm9keVtjbGllbnRdKSA6IGVsZW1lbnRbc2Nyb2xsXSAtIGVsZW1lbnRbY2xpZW50XSk7XG59LFxuICAgIF9yZWNvcmRNYXhTY3JvbGxzID0gZnVuY3Rpb24gX3JlY29yZE1heFNjcm9sbHMoZSwgc2tpcEN1cnJlbnQpIHtcbiAgLy9yZWNvcmRzIF9nc01heFNjcm9sbFggYW5kIF9nc01heFNjcm9sbFkgcHJvcGVydGllcyBmb3IgdGhlIGVsZW1lbnQgYW5kIGFsbCBhbmNlc3RvcnMgdXAgdGhlIGNoYWluIHNvIHRoYXQgd2UgY2FuIGNhcCBpdCwgb3RoZXJ3aXNlIGRyYWdnaW5nIGJleW9uZCB0aGUgZWRnZXMgd2l0aCBhdXRvU2Nyb2xsIG9uIGNhbiBlbmRsZXNzbHkgc2Nyb2xsLlxuICB2YXIgeCA9IF9nZXRNYXhTY3JvbGwoZSwgXCJ4XCIpLFxuICAgICAgeSA9IF9nZXRNYXhTY3JvbGwoZSwgXCJ5XCIpO1xuXG4gIGlmIChfaXNSb290KGUpKSB7XG4gICAgZSA9IF93aW5kb3dQcm94eTtcbiAgfSBlbHNlIHtcbiAgICBfcmVjb3JkTWF4U2Nyb2xscyhlLnBhcmVudE5vZGUsIHNraXBDdXJyZW50KTtcbiAgfVxuXG4gIGUuX2dzTWF4U2Nyb2xsWCA9IHg7XG4gIGUuX2dzTWF4U2Nyb2xsWSA9IHk7XG5cbiAgaWYgKCFza2lwQ3VycmVudCkge1xuICAgIGUuX2dzU2Nyb2xsWCA9IGUuc2Nyb2xsTGVmdCB8fCAwO1xuICAgIGUuX2dzU2Nyb2xsWSA9IGUuc2Nyb2xsVG9wIHx8IDA7XG4gIH1cbn0sXG4gICAgX3NldFN0eWxlID0gZnVuY3Rpb24gX3NldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICB2YXIgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuXG4gIGlmICghc3R5bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoX2lzVW5kZWZpbmVkKHN0eWxlW3Byb3BlcnR5XSkpIHtcbiAgICBwcm9wZXJ0eSA9IF9jaGVja1ByZWZpeChwcm9wZXJ0eSwgZWxlbWVudCkgfHwgcHJvcGVydHk7XG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5ICYmIHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5LnJlcGxhY2UoLyhbQS1aXSkvZywgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gIH1cbn0sXG4gICAgX2dldENvbXB1dGVkU3R5bGUgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBfd2luLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBlbGVtZW50IDogZWxlbWVudC5ob3N0IHx8IChlbGVtZW50LnBhcmVudE5vZGUgfHwge30pLmhvc3QgfHwgZWxlbWVudCk7XG59LFxuICAgIC8vdGhlIFwiaG9zdFwiIHN0dWZmIGhlbHBzIHRvIGFjY29tbW9kYXRlIFNoYWRvd0RvbSBvYmplY3RzLlxuX3RlbXBSZWN0ID0ge30sXG4gICAgLy9yZXVzZSB0byByZWR1Y2UgZ2FyYmFnZSBjb2xsZWN0aW9uIHRhc2tzXG5fcGFyc2VSZWN0ID0gZnVuY3Rpb24gX3BhcnNlUmVjdChlKSB7XG4gIC8vYWNjZXB0cyBhIERPTSBlbGVtZW50LCBhIG1vdXNlIGV2ZW50LCBvciBhIHJlY3RhbmdsZSBvYmplY3QgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVjdGFuZ2xlIHdpdGggbGVmdCwgcmlnaHQsIHdpZHRoLCBoZWlnaHQsIHRvcCwgYW5kIGJvdHRvbSBwcm9wZXJ0aWVzXG4gIGlmIChlID09PSBfd2luKSB7XG4gICAgX3RlbXBSZWN0LmxlZnQgPSBfdGVtcFJlY3QudG9wID0gMDtcbiAgICBfdGVtcFJlY3Qud2lkdGggPSBfdGVtcFJlY3QucmlnaHQgPSBfZG9jRWxlbWVudC5jbGllbnRXaWR0aCB8fCBlLmlubmVyV2lkdGggfHwgX2JvZHkuY2xpZW50V2lkdGggfHwgMDtcbiAgICBfdGVtcFJlY3QuaGVpZ2h0ID0gX3RlbXBSZWN0LmJvdHRvbSA9IChlLmlubmVySGVpZ2h0IHx8IDApIC0gMjAgPCBfZG9jRWxlbWVudC5jbGllbnRIZWlnaHQgPyBfZG9jRWxlbWVudC5jbGllbnRIZWlnaHQgOiBlLmlubmVySGVpZ2h0IHx8IF9ib2R5LmNsaWVudEhlaWdodCB8fCAwO1xuICAgIHJldHVybiBfdGVtcFJlY3Q7XG4gIH1cblxuICB2YXIgZG9jID0gZS5vd25lckRvY3VtZW50IHx8IF9kb2MsXG4gICAgICByID0gIV9pc1VuZGVmaW5lZChlLnBhZ2VYKSA/IHtcbiAgICBsZWZ0OiBlLnBhZ2VYIC0gX2dldERvY1Njcm9sbExlZnQoZG9jKSxcbiAgICB0b3A6IGUucGFnZVkgLSBfZ2V0RG9jU2Nyb2xsVG9wKGRvYyksXG4gICAgcmlnaHQ6IGUucGFnZVggLSBfZ2V0RG9jU2Nyb2xsTGVmdChkb2MpICsgMSxcbiAgICBib3R0b206IGUucGFnZVkgLSBfZ2V0RG9jU2Nyb2xsVG9wKGRvYykgKyAxXG4gIH0gOiAhZS5ub2RlVHlwZSAmJiAhX2lzVW5kZWZpbmVkKGUubGVmdCkgJiYgIV9pc1VuZGVmaW5lZChlLnRvcCkgPyBlIDogX3RvQXJyYXkoZSlbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgaWYgKF9pc1VuZGVmaW5lZChyLnJpZ2h0KSAmJiAhX2lzVW5kZWZpbmVkKHIud2lkdGgpKSB7XG4gICAgci5yaWdodCA9IHIubGVmdCArIHIud2lkdGg7XG4gICAgci5ib3R0b20gPSByLnRvcCArIHIuaGVpZ2h0O1xuICB9IGVsc2UgaWYgKF9pc1VuZGVmaW5lZChyLndpZHRoKSkge1xuICAgIC8vc29tZSBicm93c2VycyBkb24ndCBpbmNsdWRlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcy4gV2UgY2FuJ3QganVzdCBzZXQgdGhlbSBkaXJlY3RseSBvbiByIGJlY2F1c2Ugc29tZSBicm93c2VycyB0aHJvdyBlcnJvcnMsIHNvIGNyZWF0ZSBhIG5ldyBnZW5lcmljIG9iamVjdC5cbiAgICByID0ge1xuICAgICAgd2lkdGg6IHIucmlnaHQgLSByLmxlZnQsXG4gICAgICBoZWlnaHQ6IHIuYm90dG9tIC0gci50b3AsXG4gICAgICByaWdodDogci5yaWdodCxcbiAgICAgIGxlZnQ6IHIubGVmdCxcbiAgICAgIGJvdHRvbTogci5ib3R0b20sXG4gICAgICB0b3A6IHIudG9wXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiByO1xufSxcbiAgICBfZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KHRhcmdldCwgdHlwZSwgY2FsbGJhY2tOYW1lKSB7XG4gIHZhciB2YXJzID0gdGFyZ2V0LnZhcnMsXG4gICAgICBjYWxsYmFjayA9IHZhcnNbY2FsbGJhY2tOYW1lXSxcbiAgICAgIGxpc3RlbmVycyA9IHRhcmdldC5fbGlzdGVuZXJzW3R5cGVdLFxuICAgICAgcmVzdWx0O1xuXG4gIGlmIChfaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICByZXN1bHQgPSBjYWxsYmFjay5hcHBseSh2YXJzLmNhbGxiYWNrU2NvcGUgfHwgdGFyZ2V0LCB2YXJzW2NhbGxiYWNrTmFtZSArIFwiUGFyYW1zXCJdIHx8IFt0YXJnZXQucG9pbnRlckV2ZW50XSk7XG4gIH1cblxuICBpZiAobGlzdGVuZXJzICYmIHRhcmdldC5kaXNwYXRjaEV2ZW50KHR5cGUpID09PSBmYWxzZSkge1xuICAgIHJlc3VsdCA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0sXG4gICAgX2dldEJvdW5kcyA9IGZ1bmN0aW9uIF9nZXRCb3VuZHModGFyZ2V0LCBjb250ZXh0KSB7XG4gIC8vYWNjZXB0cyBhbnkgb2YgdGhlIGZvbGxvd2luZzogYSBET00gZWxlbWVudCwgalF1ZXJ5IG9iamVjdCwgc2VsZWN0b3IgdGV4dCwgb3IgYW4gb2JqZWN0IGRlZmluaW5nIGJvdW5kcyBhcyB7dG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0fSBvciB7bWluWCwgbWF4WCwgbWluWSwgbWF4WX0uIFJldHVybnMgYW4gb2JqZWN0IHdpdGggbGVmdCwgdG9wLCB3aWR0aCwgYW5kIGhlaWdodCBwcm9wZXJ0aWVzLlxuICB2YXIgZSA9IF90b0FycmF5KHRhcmdldClbMF0sXG4gICAgICB0b3AsXG4gICAgICBsZWZ0LFxuICAgICAgb2Zmc2V0O1xuXG4gIGlmICghZS5ub2RlVHlwZSAmJiBlICE9PSBfd2luKSB7XG4gICAgaWYgKCFfaXNVbmRlZmluZWQodGFyZ2V0LmxlZnQpKSB7XG4gICAgICBvZmZzZXQgPSB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDBcbiAgICAgIH07IC8vX2dldE9mZnNldFRyYW5zZm9ybU9yaWdpbihjb250ZXh0KTsgLy90aGUgYm91bmRzIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgb3JpZ2luXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHRhcmdldC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgICAgIHRvcDogdGFyZ2V0LnRvcCAtIG9mZnNldC55LFxuICAgICAgICB3aWR0aDogdGFyZ2V0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRhcmdldC5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGVmdCA9IHRhcmdldC5taW4gfHwgdGFyZ2V0Lm1pblggfHwgdGFyZ2V0Lm1pblJvdGF0aW9uIHx8IDA7XG4gICAgdG9wID0gdGFyZ2V0Lm1pbiB8fCB0YXJnZXQubWluWSB8fCAwO1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgdG9wOiB0b3AsXG4gICAgICB3aWR0aDogKHRhcmdldC5tYXggfHwgdGFyZ2V0Lm1heFggfHwgdGFyZ2V0Lm1heFJvdGF0aW9uIHx8IDApIC0gbGVmdCxcbiAgICAgIGhlaWdodDogKHRhcmdldC5tYXggfHwgdGFyZ2V0Lm1heFkgfHwgMCkgLSB0b3BcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9nZXRFbGVtZW50Qm91bmRzKGUsIGNvbnRleHQpO1xufSxcbiAgICBfcG9pbnQxID0ge30sXG4gICAgLy93ZSByZXVzZSB0byBtaW5pbWl6ZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGFza3MuXG5fZ2V0RWxlbWVudEJvdW5kcyA9IGZ1bmN0aW9uIF9nZXRFbGVtZW50Qm91bmRzKGVsZW1lbnQsIGNvbnRleHQpIHtcbiAgY29udGV4dCA9IF90b0FycmF5KGNvbnRleHQpWzBdO1xuICB2YXIgaXNTVkcgPSBlbGVtZW50LmdldEJCb3ggJiYgZWxlbWVudC5vd25lclNWR0VsZW1lbnQsXG4gICAgICBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgX2RvYyxcbiAgICAgIGxlZnQsXG4gICAgICByaWdodCxcbiAgICAgIHRvcCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIG1hdHJpeCxcbiAgICAgIHAxLFxuICAgICAgcDIsXG4gICAgICBwMyxcbiAgICAgIHA0LFxuICAgICAgYmJveCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgY3M7XG5cbiAgaWYgKGVsZW1lbnQgPT09IF93aW4pIHtcbiAgICB0b3AgPSBfZ2V0RG9jU2Nyb2xsVG9wKGRvYyk7XG4gICAgbGVmdCA9IF9nZXREb2NTY3JvbGxMZWZ0KGRvYyk7XG4gICAgcmlnaHQgPSBsZWZ0ICsgKGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZWxlbWVudC5pbm5lcldpZHRoIHx8IGRvYy5ib2R5LmNsaWVudFdpZHRoIHx8IDApO1xuICAgIGJvdHRvbSA9IHRvcCArICgoZWxlbWVudC5pbm5lckhlaWdodCB8fCAwKSAtIDIwIDwgZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgPyBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IGVsZW1lbnQuaW5uZXJIZWlnaHQgfHwgZG9jLmJvZHkuY2xpZW50SGVpZ2h0IHx8IDApOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgaWdub3JlIGFic29sdXRlbHkgcG9zaXRpb25lZCBlbGVtZW50cywgYW5kIGNvbGxhcHNlIHRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgc28gaXQgY291bGQgYmUgOHB4LCBmb3IgZXhhbXBsZSwgaWYgeW91IGhhdmUganVzdCBhbiBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgZGl2LiBJbiB0aGF0IGNhc2UsIHdlIHVzZSB0aGUgaW5uZXJIZWlnaHQgdG8gcmVzb2x2ZSB0aGlzLlxuICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IF93aW4gfHwgX2lzVW5kZWZpbmVkKGNvbnRleHQpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IHRvcCA9IDA7XG5cbiAgICBpZiAoaXNTVkcpIHtcbiAgICAgIGJib3ggPSBlbGVtZW50LmdldEJCb3goKTtcbiAgICAgIHdpZHRoID0gYmJveC53aWR0aDtcbiAgICAgIGhlaWdodCA9IGJib3guaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZWxlbWVudC52aWV3Qm94ICYmIChiYm94ID0gZWxlbWVudC52aWV3Qm94LmJhc2VWYWwpKSB7XG4gICAgICAgIGxlZnQgPSBiYm94LnggfHwgMDtcbiAgICAgICAgdG9wID0gYmJveC55IHx8IDA7XG4gICAgICAgIHdpZHRoID0gYmJveC53aWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gYmJveC5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghd2lkdGgpIHtcbiAgICAgICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgYmJveCA9IGNzLmJveFNpemluZyA9PT0gXCJib3JkZXItYm94XCI7XG4gICAgICAgIHdpZHRoID0gKHBhcnNlRmxvYXQoY3Mud2lkdGgpIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgMCkgKyAoYmJveCA/IDAgOiBwYXJzZUZsb2F0KGNzLmJvcmRlckxlZnRXaWR0aCkgKyBwYXJzZUZsb2F0KGNzLmJvcmRlclJpZ2h0V2lkdGgpKTtcbiAgICAgICAgaGVpZ2h0ID0gKHBhcnNlRmxvYXQoY3MuaGVpZ2h0KSB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCAwKSArIChiYm94ID8gMCA6IHBhcnNlRmxvYXQoY3MuYm9yZGVyVG9wV2lkdGgpICsgcGFyc2VGbG9hdChjcy5ib3JkZXJCb3R0b21XaWR0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJpZ2h0ID0gd2lkdGg7XG4gICAgYm90dG9tID0gaGVpZ2h0O1xuICB9XG5cbiAgaWYgKGVsZW1lbnQgPT09IGNvbnRleHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogbGVmdCxcbiAgICAgIHRvcDogdG9wLFxuICAgICAgd2lkdGg6IHJpZ2h0IC0gbGVmdCxcbiAgICAgIGhlaWdodDogYm90dG9tIC0gdG9wXG4gICAgfTtcbiAgfVxuXG4gIG1hdHJpeCA9IGdldEdsb2JhbE1hdHJpeChjb250ZXh0LCB0cnVlKS5tdWx0aXBseShnZXRHbG9iYWxNYXRyaXgoZWxlbWVudCkpO1xuICBwMSA9IG1hdHJpeC5hcHBseSh7XG4gICAgeDogbGVmdCxcbiAgICB5OiB0b3BcbiAgfSk7XG4gIHAyID0gbWF0cml4LmFwcGx5KHtcbiAgICB4OiByaWdodCxcbiAgICB5OiB0b3BcbiAgfSk7XG4gIHAzID0gbWF0cml4LmFwcGx5KHtcbiAgICB4OiByaWdodCxcbiAgICB5OiBib3R0b21cbiAgfSk7XG4gIHA0ID0gbWF0cml4LmFwcGx5KHtcbiAgICB4OiBsZWZ0LFxuICAgIHk6IGJvdHRvbVxuICB9KTtcbiAgbGVmdCA9IE1hdGgubWluKHAxLngsIHAyLngsIHAzLngsIHA0LngpO1xuICB0b3AgPSBNYXRoLm1pbihwMS55LCBwMi55LCBwMy55LCBwNC55KTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHRvcDogdG9wLFxuICAgIHdpZHRoOiBNYXRoLm1heChwMS54LCBwMi54LCBwMy54LCBwNC54KSAtIGxlZnQsXG4gICAgaGVpZ2h0OiBNYXRoLm1heChwMS55LCBwMi55LCBwMy55LCBwNC55KSAtIHRvcFxuICB9O1xufSxcbiAgICBfcGFyc2VJbmVydGlhID0gZnVuY3Rpb24gX3BhcnNlSW5lcnRpYShkcmFnZ2FibGUsIHNuYXAsIG1heCwgbWluLCBmYWN0b3IsIGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG4gIHZhciB2YXJzID0ge30sXG4gICAgICBhLFxuICAgICAgaSxcbiAgICAgIGw7XG5cbiAgaWYgKHNuYXApIHtcbiAgICBpZiAoZmFjdG9yICE9PSAxICYmIHNuYXAgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgLy9zb21lIGRhdGEgbXVzdCBiZSBhbHRlcmVkIHRvIG1ha2Ugc2Vuc2UsIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGFuIGFycmF5IG9mIHJvdGF0aW9uYWwgdmFsdWVzIGluIGRlZ3JlZXMsIHdlIG11c3QgY29udmVydCBpdCB0byByYWRpYW5zLiBPciBmb3Igc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wLCB3ZSBpbnZlcnQgdGhlIHZhbHVlcy5cbiAgICAgIHZhcnMuZW5kID0gYSA9IFtdO1xuICAgICAgbCA9IHNuYXAubGVuZ3RoO1xuXG4gICAgICBpZiAoX2lzT2JqZWN0KHNuYXBbMF0pKSB7XG4gICAgICAgIC8vaWYgdGhlIGFycmF5IGlzIHBvcHVsYXRlZCB3aXRoIG9iamVjdHMsIGxpa2UgcG9pbnRzICh7eDoxMDAsIHk6MjAwfSksIG1ha2UgY29waWVzIGJlZm9yZSBtdWx0aXBseWluZyBieSB0aGUgZmFjdG9yLCBvdGhlcndpc2Ugd2UnbGwgbWVzcyB1cCB0aGUgb3JpZ2luYWxzIGFuZCB0aGUgdXNlciBtYXkgcmV1c2UgaXQgZWxzZXdoZXJlLlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgYVtpXSA9IF9jb3B5KHNuYXBbaV0sIGZhY3Rvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBhW2ldID0gc25hcFtpXSAqIGZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYXggKz0gMS4xOyAvL2FsbG93IDEuMSBwaXhlbHMgb2Ygd2lnZ2xlIHJvb20gd2hlbiBzbmFwcGluZyBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBzb21lIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIGluIHRoZSB3YXkgYm91bmRzIGFyZSByZXBvcnRlZCB3aGljaCBjYW4gbWFrZSB0aGVtIHJvdWdobHkgYSBwaXhlbCBvZmYuIEZvciBleGFtcGxlLCBpZiBcInNuYXA6Wy0kKCcjbWVudScpLndpZHRoKCksIDBdXCIgd2FzIGRlZmluZWQgYW5kICNtZW51IGhhZCBhIHdyYXBwZXIgdGhhdCB3YXMgdXNlZCBhcyB0aGUgYm91bmRzLCBzb21lIGJyb3dzZXJzIHdvdWxkIGJlIG9uZSBwaXhlbCBvZmYsIG1ha2luZyB0aGUgbWluaW11bSAtNzUyIGZvciBleGFtcGxlIHdoZW4gc25hcCB3YXMgWy03NTMsMF0sIHRodXMgaW5zdGVhZCBvZiBzbmFwcGluZyB0byAtNzUzLCBpdCB3b3VsZCBzbmFwIHRvIDAgc2luY2UgLTc1MyB3YXMgYmVsb3cgdGhlIG1pbmltdW0uXG5cbiAgICAgIG1pbiAtPSAxLjE7XG4gICAgfSBlbHNlIGlmIChfaXNGdW5jdGlvbihzbmFwKSkge1xuICAgICAgdmFycy5lbmQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHNuYXAuY2FsbChkcmFnZ2FibGUsIHZhbHVlKSxcbiAgICAgICAgICAgIGNvcHksXG4gICAgICAgICAgICBwO1xuXG4gICAgICAgIGlmIChmYWN0b3IgIT09IDEpIHtcbiAgICAgICAgICBpZiAoX2lzT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvcHkgPSB7fTtcblxuICAgICAgICAgICAgZm9yIChwIGluIHJlc3VsdCkge1xuICAgICAgICAgICAgICBjb3B5W3BdID0gcmVzdWx0W3BdICogZmFjdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXN1bHQgPSBjb3B5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKj0gZmFjdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7IC8vd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB3ZSBjYW4gc2NvcGUgdGhlIGZ1bmN0aW9uIGNhbGwgdG8gdGhlIERyYWdnYWJsZSBpbnN0YW5jZSBpdHNlbGYgc28gdGhhdCB1c2VycyBjYW4gYWNjZXNzIGltcG9ydGFudCB2YWx1ZXMgbGlrZSBtYXhYLCBtaW5YLCBtYXhZLCBtaW5ZLCB4LCBhbmQgeSBmcm9tIHdpdGhpbiB0aGF0IGZ1bmN0aW9uLlxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFycy5lbmQgPSBzbmFwO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXggfHwgbWF4ID09PSAwKSB7XG4gICAgdmFycy5tYXggPSBtYXg7XG4gIH1cblxuICBpZiAobWluIHx8IG1pbiA9PT0gMCkge1xuICAgIHZhcnMubWluID0gbWluO1xuICB9XG5cbiAgaWYgKGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG4gICAgdmFycy52ZWxvY2l0eSA9IDA7XG4gIH1cblxuICByZXR1cm4gdmFycztcbn0sXG4gICAgX2lzQ2xpY2thYmxlID0gZnVuY3Rpb24gX2lzQ2xpY2thYmxlKGVsZW1lbnQpIHtcbiAgLy9zb21ldGltZXMgaXQncyBjb252ZW5pZW50IHRvIG1hcmsgYW4gZWxlbWVudCBhcyBjbGlja2FibGUgYnkgYWRkaW5nIGEgZGF0YS1jbGlja2FibGU9XCJ0cnVlXCIgYXR0cmlidXRlIChpbiB3aGljaCBjYXNlIHdlIHdvbid0IHByZXZlbnREZWZhdWx0KCkgdGhlIG1vdXNlL3RvdWNoIGV2ZW50KS4gVGhpcyBtZXRob2QgY2hlY2tzIGlmIHRoZSBlbGVtZW50IGlzIGFuIDxhPiwgPGlucHV0Piwgb3IgPGJ1dHRvbj4gb3IgaGFzIHRoZSBkYXRhLWNsaWNrYWJsZSBvciBjb250ZW50RWRpdGFibGUgYXR0cmlidXRlIHNldCB0byB0cnVlIChvciBhbnkgb2YgaXRzIHBhcmVudCBlbGVtZW50cykuXG4gIHZhciBkYXRhO1xuICByZXR1cm4gIWVsZW1lbnQgfHwgIWVsZW1lbnQuZ2V0QXR0cmlidXRlIHx8IGVsZW1lbnQgPT09IF9ib2R5ID8gZmFsc2UgOiAoZGF0YSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jbGlja2FibGVcIikpID09PSBcInRydWVcIiB8fCBkYXRhICE9PSBcImZhbHNlXCIgJiYgKF9jbGlja2FibGVUYWdFeHAudGVzdChlbGVtZW50Lm5vZGVOYW1lICsgXCJcIikgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIikgPT09IFwidHJ1ZVwiKSA/IHRydWUgOiBfaXNDbGlja2FibGUoZWxlbWVudC5wYXJlbnROb2RlKTtcbn0sXG4gICAgX3NldFNlbGVjdGFibGUgPSBmdW5jdGlvbiBfc2V0U2VsZWN0YWJsZShlbGVtZW50cywgc2VsZWN0YWJsZSkge1xuICB2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aCxcbiAgICAgIGU7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGUgPSBlbGVtZW50c1tpXTtcbiAgICBlLm9uZHJhZ3N0YXJ0ID0gZS5vbnNlbGVjdHN0YXJ0ID0gc2VsZWN0YWJsZSA/IG51bGwgOiBfZW1wdHlGdW5jO1xuICAgIGdzYXAuc2V0KGUsIHtcbiAgICAgIGxhenk6IHRydWUsXG4gICAgICB1c2VyU2VsZWN0OiBzZWxlY3RhYmxlID8gXCJ0ZXh0XCIgOiBcIm5vbmVcIlxuICAgIH0pO1xuICB9XG59LFxuICAgIF9pc0ZpeGVkID0gZnVuY3Rpb24gX2lzRml4ZWQoZWxlbWVudCkge1xuICBpZiAoX2dldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgLy8gYXZvaWQgZG9jdW1lbnQgZnJhZ21lbnRzIHdoaWNoIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgcmV0dXJuIF9pc0ZpeGVkKGVsZW1lbnQpO1xuICB9XG59LFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9hZGRQYWRkaW5nQlIsXG4gICAgLy9UaGUgU2Nyb2xsUHJveHkgY2xhc3Mgd3JhcHMgYW4gZWxlbWVudCdzIGNvbnRlbnRzIGludG8gYW5vdGhlciBkaXYgKHdlIGNhbGwgaXQgXCJjb250ZW50XCIpIHRoYXQgd2UgZWl0aGVyIGFkZCBwYWRkaW5nIHdoZW4gbmVjZXNzYXJ5IG9yIGFwcGx5IGEgdHJhbnNsYXRlM2QoKSB0cmFuc2Zvcm0gaW4gb3JkZXIgdG8gb3ZlcnNjcm9sbCAoc2Nyb2xsIHBhc3QgdGhlIGJvdW5kYXJpZXMpLiBUaGlzIGFsbG93cyB1cyB0byBzaW1wbHkgc2V0IHRoZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdCAob3IgdG9wL2xlZnQgZm9yIGVhc2llciByZXZlcnNlLWF4aXMgb3JpZW50YXRpb24sIHdoaWNoIGlzIHdoYXQgd2UgZG8gaW4gRHJhZ2dhYmxlKSBhbmQgaXQnbGwgZG8gYWxsIHRoZSB3b3JrIGZvciB1cy4gRm9yIGV4YW1wbGUsIGlmIHdlIHRyaWVkIHNldHRpbmcgc2Nyb2xsVG9wIHRvIC0xMDAgb24gYSBub3JtYWwgRE9NIGVsZW1lbnQsIGl0IHdvdWxkbid0IHdvcmsgLSBpdCdkIGxvb2sgdGhlIHNhbWUgYXMgc2V0dGluZyBpdCB0byAwLCBidXQgaWYgd2Ugc2V0IHNjcm9sbFRvcCBvZiBhIFNjcm9sbFByb3h5IHRvIC0xMDAsIGl0J2xsIGdpdmUgdGhlIGNvcnJlY3QgYXBwZWFyYW5jZSBieSBlaXRoZXIgc2V0dGluZyBwYWRkaW5nVG9wIG9mIHRoZSB3cmFwcGVyIHRvIDEwMCBvciBhcHBseWluZyBhIDEwMC1waXhlbCB0cmFuc2xhdGVZLlxuU2Nyb2xsUHJveHkgPSBmdW5jdGlvbiBTY3JvbGxQcm94eShlbGVtZW50LCB2YXJzKSB7XG4gIGVsZW1lbnQgPSBnc2FwLnV0aWxzLnRvQXJyYXkoZWxlbWVudClbMF07XG4gIHZhcnMgPSB2YXJzIHx8IHt9O1xuICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICBzdHlsZSA9IGNvbnRlbnQuc3R5bGUsXG4gICAgICBub2RlID0gZWxlbWVudC5maXJzdENoaWxkLFxuICAgICAgb2Zmc2V0VG9wID0gMCxcbiAgICAgIG9mZnNldExlZnQgPSAwLFxuICAgICAgcHJldlRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wLFxuICAgICAgcHJldkxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICBzY3JvbGxXaWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGgsXG4gICAgICBzY3JvbGxIZWlnaHQgPSBlbGVtZW50LnNjcm9sbEhlaWdodCxcbiAgICAgIGV4dHJhUGFkUmlnaHQgPSAwLFxuICAgICAgbWF4TGVmdCA9IDAsXG4gICAgICBtYXhUb3AgPSAwLFxuICAgICAgZWxlbWVudFdpZHRoLFxuICAgICAgZWxlbWVudEhlaWdodCxcbiAgICAgIGNvbnRlbnRIZWlnaHQsXG4gICAgICBuZXh0Tm9kZSxcbiAgICAgIHRyYW5zZm9ybVN0YXJ0LFxuICAgICAgdHJhbnNmb3JtRW5kO1xuXG4gIGlmIChfc3VwcG9ydHMzRCAmJiB2YXJzLmZvcmNlM0QgIT09IGZhbHNlKSB7XG4gICAgdHJhbnNmb3JtU3RhcnQgPSBcInRyYW5zbGF0ZTNkKFwiO1xuICAgIHRyYW5zZm9ybUVuZCA9IFwicHgsMHB4KVwiO1xuICB9IGVsc2UgaWYgKF90cmFuc2Zvcm1Qcm9wKSB7XG4gICAgdHJhbnNmb3JtU3RhcnQgPSBcInRyYW5zbGF0ZShcIjtcbiAgICB0cmFuc2Zvcm1FbmQgPSBcInB4KVwiO1xuICB9XG5cbiAgdGhpcy5zY3JvbGxUb3AgPSBmdW5jdGlvbiAodmFsdWUsIGZvcmNlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gLXRoaXMudG9wKCk7XG4gICAgfVxuXG4gICAgdGhpcy50b3AoLXZhbHVlLCBmb3JjZSk7XG4gIH07XG5cbiAgdGhpcy5zY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC10aGlzLmxlZnQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmxlZnQoLXZhbHVlLCBmb3JjZSk7XG4gIH07XG5cbiAgdGhpcy5sZWZ0ID0gZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0oZWxlbWVudC5zY3JvbGxMZWZ0ICsgb2Zmc2V0TGVmdCk7XG4gICAgfVxuXG4gICAgdmFyIGRpZiA9IGVsZW1lbnQuc2Nyb2xsTGVmdCAtIHByZXZMZWZ0LFxuICAgICAgICBvbGRPZmZzZXQgPSBvZmZzZXRMZWZ0O1xuXG4gICAgaWYgKChkaWYgPiAyIHx8IGRpZiA8IC0yKSAmJiAhZm9yY2UpIHtcbiAgICAgIC8vaWYgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlIHNjcm9sbGJhciAob3Igc29tZXRoaW5nIGVsc2Ugc2Nyb2xscyBpdCwgbGlrZSB0aGUgbW91c2Ugd2hlZWwpLCB3ZSBzaG91bGQga2lsbCBhbnkgdHdlZW5zIG9mIHRoZSBTY3JvbGxQcm94eS5cbiAgICAgIHByZXZMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgZ3NhcC5raWxsVHdlZW5zT2YodGhpcywge1xuICAgICAgICBsZWZ0OiAxLFxuICAgICAgICBzY3JvbGxMZWZ0OiAxXG4gICAgICB9KTtcbiAgICAgIHRoaXMubGVmdCgtcHJldkxlZnQpO1xuXG4gICAgICBpZiAodmFycy5vbktpbGwpIHtcbiAgICAgICAgdmFycy5vbktpbGwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhbHVlID0gLXZhbHVlOyAvL2ludmVydCBiZWNhdXNlIHNjcm9sbGluZyB3b3JrcyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uXG5cbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICBvZmZzZXRMZWZ0ID0gdmFsdWUgLSAwLjUgfCAwO1xuICAgICAgdmFsdWUgPSAwO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPiBtYXhMZWZ0KSB7XG4gICAgICBvZmZzZXRMZWZ0ID0gdmFsdWUgLSBtYXhMZWZ0IHwgMDtcbiAgICAgIHZhbHVlID0gbWF4TGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0TGVmdCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldExlZnQgfHwgb2xkT2Zmc2V0KSB7XG4gICAgICBpZiAoIXRoaXMuX3NraXApIHtcbiAgICAgICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtU3RhcnQgKyAtb2Zmc2V0TGVmdCArIFwicHgsXCIgKyAtb2Zmc2V0VG9wICsgdHJhbnNmb3JtRW5kO1xuICAgICAgfVxuXG4gICAgICBpZiAob2Zmc2V0TGVmdCArIGV4dHJhUGFkUmlnaHQgPj0gMCkge1xuICAgICAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBvZmZzZXRMZWZ0ICsgZXh0cmFQYWRSaWdodCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50LnNjcm9sbExlZnQgPSB2YWx1ZSB8IDA7XG4gICAgcHJldkxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7IC8vZG9uJ3QgbWVyZ2UgdGhpcyB3aXRoIHRoZSBsaW5lIGFib3ZlIGJlY2F1c2Ugc29tZSBicm93c2VycyBhZGp1c3QgdGhlIHNjcm9sbExlZnQgYWZ0ZXIgaXQncyBzZXQsIHNvIGluIG9yZGVyIHRvIGJlIDEwMCUgYWNjdXJhdGUgaW4gdHJhY2tpbmcgaXQsIHdlIG5lZWQgdG8gYXNrIHRoZSBicm93c2VyIHRvIHJlcG9ydCBpdC5cbiAgfTtcblxuICB0aGlzLnRvcCA9IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAtKGVsZW1lbnQuc2Nyb2xsVG9wICsgb2Zmc2V0VG9wKTtcbiAgICB9XG5cbiAgICB2YXIgZGlmID0gZWxlbWVudC5zY3JvbGxUb3AgLSBwcmV2VG9wLFxuICAgICAgICBvbGRPZmZzZXQgPSBvZmZzZXRUb3A7XG5cbiAgICBpZiAoKGRpZiA+IDIgfHwgZGlmIDwgLTIpICYmICFmb3JjZSkge1xuICAgICAgLy9pZiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgc2Nyb2xsYmFyIChvciBzb21ldGhpbmcgZWxzZSBzY3JvbGxzIGl0LCBsaWtlIHRoZSBtb3VzZSB3aGVlbCksIHdlIHNob3VsZCBraWxsIGFueSB0d2VlbnMgb2YgdGhlIFNjcm9sbFByb3h5LlxuICAgICAgcHJldlRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgZ3NhcC5raWxsVHdlZW5zT2YodGhpcywge1xuICAgICAgICB0b3A6IDEsXG4gICAgICAgIHNjcm9sbFRvcDogMVxuICAgICAgfSk7XG4gICAgICB0aGlzLnRvcCgtcHJldlRvcCk7XG5cbiAgICAgIGlmICh2YXJzLm9uS2lsbCkge1xuICAgICAgICB2YXJzLm9uS2lsbCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFsdWUgPSAtdmFsdWU7IC8vaW52ZXJ0IGJlY2F1c2Ugc2Nyb2xsaW5nIHdvcmtzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb25cblxuICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgIG9mZnNldFRvcCA9IHZhbHVlIC0gMC41IHwgMDtcbiAgICAgIHZhbHVlID0gMDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4VG9wKSB7XG4gICAgICBvZmZzZXRUb3AgPSB2YWx1ZSAtIG1heFRvcCB8IDA7XG4gICAgICB2YWx1ZSA9IG1heFRvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0VG9wID0gMDtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0VG9wIHx8IG9sZE9mZnNldCkge1xuICAgICAgaWYgKCF0aGlzLl9za2lwKSB7XG4gICAgICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybVN0YXJ0ICsgLW9mZnNldExlZnQgKyBcInB4LFwiICsgLW9mZnNldFRvcCArIHRyYW5zZm9ybUVuZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbGVtZW50LnNjcm9sbFRvcCA9IHZhbHVlIHwgMDtcbiAgICBwcmV2VG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XG4gIH07XG5cbiAgdGhpcy5tYXhTY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1heFRvcDtcbiAgfTtcblxuICB0aGlzLm1heFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1heExlZnQ7XG4gIH07XG5cbiAgdGhpcy5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUgPSBjb250ZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudCA9PT0gY29udGVudC5wYXJlbnROb2RlKSB7XG4gICAgICAvL2luIGNhc2UgZGlzYWJsZSgpIGlzIGNhbGxlZCB3aGVuIGl0J3MgYWxyZWFkeSBkaXNhYmxlZC5cbiAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoY29udGVudCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUgPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICBpZiAobm9kZSA9PT0gY29udGVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICBjb250ZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZSA9IG5leHROb2RlO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgdGhpcy5jYWxpYnJhdGUoKTtcbiAgfTtcblxuICB0aGlzLmNhbGlicmF0ZSA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgIHZhciB3aWR0aE1hdGNoZXMgPSBlbGVtZW50LmNsaWVudFdpZHRoID09PSBlbGVtZW50V2lkdGgsXG4gICAgICAgIGNzLFxuICAgICAgICB4LFxuICAgICAgICB5O1xuICAgIHByZXZUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICBwcmV2TGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcblxuICAgIGlmICh3aWR0aE1hdGNoZXMgJiYgZWxlbWVudC5jbGllbnRIZWlnaHQgPT09IGVsZW1lbnRIZWlnaHQgJiYgY29udGVudC5vZmZzZXRIZWlnaHQgPT09IGNvbnRlbnRIZWlnaHQgJiYgc2Nyb2xsV2lkdGggPT09IGVsZW1lbnQuc2Nyb2xsV2lkdGggJiYgc2Nyb2xsSGVpZ2h0ID09PSBlbGVtZW50LnNjcm9sbEhlaWdodCAmJiAhZm9yY2UpIHtcbiAgICAgIHJldHVybjsgLy9ubyBuZWVkIHRvIHJlY2FsY3VsYXRlIHRoaW5ncyBpZiB0aGUgd2lkdGggYW5kIGhlaWdodCBoYXZlbid0IGNoYW5nZWQuXG4gICAgfVxuXG4gICAgaWYgKG9mZnNldFRvcCB8fCBvZmZzZXRMZWZ0KSB7XG4gICAgICB4ID0gdGhpcy5sZWZ0KCk7XG4gICAgICB5ID0gdGhpcy50b3AoKTtcbiAgICAgIHRoaXMubGVmdCgtZWxlbWVudC5zY3JvbGxMZWZ0KTtcbiAgICAgIHRoaXMudG9wKC1lbGVtZW50LnNjcm9sbFRvcCk7XG4gICAgfVxuXG4gICAgY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTsgLy9maXJzdCwgd2UgbmVlZCB0byByZW1vdmUgYW55IHdpZHRoIGNvbnN0cmFpbnRzIHRvIHNlZSBob3cgdGhlIGNvbnRlbnQgbmF0dXJhbGx5IGZsb3dzIHNvIHRoYXQgd2UgY2FuIHNlZSBpZiBpdCdzIHdpZGVyIHRoYW4gdGhlIGNvbnRhaW5pbmcgZWxlbWVudC4gSWYgc28sIHdlJ3ZlIGdvdCB0byByZWNvcmQgdGhlIGFtb3VudCBvZiBvdmVyYWdlIHNvIHRoYXQgd2UgY2FuIGFwcGx5IHRoYXQgYXMgcGFkZGluZyBpbiBvcmRlciBmb3IgYnJvd3NlcnMgdG8gY29ycmVjdGx5IGhhbmRsZSB0aGluZ3MuIFRoZW4gd2Ugc3dpdGNoIGJhY2sgdG8gYSB3aWR0aCBvZiAxMDAlICh3aXRob3V0IHRoYXQsIHNvbWUgYnJvd3NlcnMgZG9uJ3QgZmxvdyB0aGUgY29udGVudCBjb3JyZWN0bHkpXG5cbiAgICBpZiAoIXdpZHRoTWF0Y2hlcyB8fCBmb3JjZSkge1xuICAgICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIHN0eWxlLndpZHRoID0gXCJhdXRvXCI7XG4gICAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjBweFwiO1xuICAgICAgZXh0cmFQYWRSaWdodCA9IE1hdGgubWF4KDAsIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoKTsgLy9pZiB0aGUgY29udGVudCBpcyB3aWRlciB0aGFuIHRoZSBjb250YWluZXIsIHdlIG5lZWQgdG8gYWRkIHRoZSBwYWRkaW5nTGVmdCBhbmQgcGFkZGluZ1JpZ2h0IGluIG9yZGVyIGZvciB0aGluZ3MgdG8gYmVoYXZlIGNvcnJlY3RseS5cblxuICAgICAgaWYgKGV4dHJhUGFkUmlnaHQpIHtcbiAgICAgICAgZXh0cmFQYWRSaWdodCArPSBwYXJzZUZsb2F0KGNzLnBhZGRpbmdMZWZ0KSArIChfYWRkUGFkZGluZ0JSID8gcGFyc2VGbG9hdChjcy5wYWRkaW5nUmlnaHQpIDogMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSBcInZpc2libGVcIjtcbiAgICBzdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJ0b3BcIjtcbiAgICBzdHlsZS5ib3hTaXppbmcgPSBcImNvbnRlbnQtYm94XCI7XG4gICAgc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBleHRyYVBhZFJpZ2h0ICsgXCJweFwiOyAvL3NvbWUgYnJvd3NlcnMgbmVnbGVjdCB0byBmYWN0b3IgaW4gdGhlIGJvdHRvbSBwYWRkaW5nIHdoZW4gY2FsY3VsYXRpbmcgdGhlIHNjcm9sbEhlaWdodCwgc28gd2UgbmVlZCB0byBhZGQgdGhhdCBwYWRkaW5nIHRvIHRoZSBjb250ZW50IHdoZW4gdGhhdCBoYXBwZW5zLiBBbGxvdyBhIDJweCBtYXJnaW4gZm9yIGVycm9yXG5cbiAgICBpZiAoX2FkZFBhZGRpbmdCUikge1xuICAgICAgc3R5bGUucGFkZGluZ0JvdHRvbSA9IGNzLnBhZGRpbmdCb3R0b207XG4gICAgfVxuXG4gICAgZWxlbWVudFdpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICBlbGVtZW50SGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgc2Nyb2xsV2lkdGggPSBlbGVtZW50LnNjcm9sbFdpZHRoO1xuICAgIHNjcm9sbEhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIG1heExlZnQgPSBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudFdpZHRoO1xuICAgIG1heFRvcCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gZWxlbWVudEhlaWdodDtcbiAgICBjb250ZW50SGVpZ2h0ID0gY29udGVudC5vZmZzZXRIZWlnaHQ7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgIGlmICh4IHx8IHkpIHtcbiAgICAgIHRoaXMubGVmdCh4KTtcbiAgICAgIHRoaXMudG9wKHkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLl9za2lwID0gZmFsc2U7XG4gIHRoaXMuZW5hYmxlKCk7XG59LFxuICAgIF9pbml0Q29yZSA9IGZ1bmN0aW9uIF9pbml0Q29yZShyZXF1aXJlZCkge1xuICBpZiAoX3dpbmRvd0V4aXN0cygpICYmIGRvY3VtZW50LmJvZHkpIHtcbiAgICB2YXIgbmF2ID0gd2luZG93ICYmIHdpbmRvdy5uYXZpZ2F0b3I7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gZG9jdW1lbnQ7XG4gICAgX2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBfYm9keSA9IF9kb2MuYm9keTtcbiAgICBfdGVtcERpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF9zdXBwb3J0c1BvaW50ZXIgPSAhIXdpbmRvdy5Qb2ludGVyRXZlbnQ7XG4gICAgX3BsYWNlaG9sZGVyRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgX3BsYWNlaG9sZGVyRGl2LnN0eWxlLmNzc1RleHQgPSBcInZpc2liaWxpdHk6aGlkZGVuO2hlaWdodDoxcHg7dG9wOi0xcHg7cG9pbnRlci1ldmVudHM6bm9uZTtwb3NpdGlvbjpyZWxhdGl2ZTtjbGVhcjpib3RoO2N1cnNvcjpncmFiXCI7XG4gICAgX2RlZmF1bHRDdXJzb3IgPSBfcGxhY2Vob2xkZXJEaXYuc3R5bGUuY3Vyc29yID09PSBcImdyYWJcIiA/IFwiZ3JhYlwiIDogXCJtb3ZlXCI7XG4gICAgX2lzQW5kcm9pZCA9IG5hdiAmJiBuYXYudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcImFuZHJvaWRcIikgIT09IC0xOyAvL0FuZHJvaWQgaGFuZGxlcyB0b3VjaCBldmVudHMgaW4gYW4gb2RkIHdheSBhbmQgaXQncyB2aXJ0dWFsbHkgaW1wb3NzaWJsZSB0byBcImZlYXR1cmUgdGVzdFwiIHNvIHdlIHJlc29ydCB0byBVQSBzbmlmZmluZ1xuXG4gICAgX2lzVG91Y2hEZXZpY2UgPSBcIm9udG91Y2hzdGFydFwiIGluIF9kb2NFbGVtZW50ICYmIFwib3JpZW50YXRpb25cIiBpbiBfd2luIHx8IG5hdiAmJiAobmF2Lk1heFRvdWNoUG9pbnRzID4gMCB8fCBuYXYubXNNYXhUb3VjaFBvaW50cyA+IDApO1xuXG4gICAgX2FkZFBhZGRpbmdCUiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vdGhpcyBmdW5jdGlvbiBpcyBpbiBjaGFyZ2Ugb2YgYW5hbHl6aW5nIGJyb3dzZXIgYmVoYXZpb3IgcmVsYXRlZCB0byBwYWRkaW5nLiBJdCBzZXRzIHRoZSBfYWRkUGFkZGluZ0JSIHRvIHRydWUgaWYgdGhlIGJyb3dzZXIgZG9lc24ndCBub3JtYWxseSBmYWN0b3IgaW4gdGhlIGJvdHRvbSBvciByaWdodCBwYWRkaW5nIG9uIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgc2Nyb2xsaW5nIGFyZWEsIGFuZCBpdCBzZXRzIF9hZGRQYWRkaW5nTGVmdCB0byB0cnVlIGlmIGl0J3MgYSBicm93c2VyIHRoYXQgcmVxdWlyZXMgdGhlIGV4dHJhIG9mZnNldCAob2Zmc2V0TGVmdCkgdG8gYmUgYWRkZWQgdG8gdGhlIHBhZGRpbmdSaWdodCAobGlrZSBPcGVyYSkuXG4gICAgICB2YXIgZGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICAgICAgY2hpbGQgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgICBjaGlsZFN0eWxlID0gY2hpbGQuc3R5bGUsXG4gICAgICAgICAgcGFyZW50ID0gX2JvZHksXG4gICAgICAgICAgdmFsO1xuXG4gICAgICBjaGlsZFN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgY2hpbGRTdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgIGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJ3aWR0aDo5MHB4O2hlaWdodDo0MHB4O3BhZGRpbmc6MTBweDtvdmVyZmxvdzphdXRvO3Zpc2liaWxpdHk6aGlkZGVuXCI7XG4gICAgICBkaXYuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdik7XG4gICAgICB2YWwgPSBjaGlsZC5vZmZzZXRIZWlnaHQgKyAxOCA+IGRpdi5zY3JvbGxIZWlnaHQ7IC8vZGl2LnNjcm9sbEhlaWdodCBzaG91bGQgYmUgY2hpbGQub2Zmc2V0SGVpZ2h0ICsgMjAgYmVjYXVzZSBvZiB0aGUgMTBweCBvZiBwYWRkaW5nIG9uIGVhY2ggc2lkZSwgYnV0IHNvbWUgYnJvd3NlcnMgaWdub3JlIG9uZSBzaWRlLiBXZSBhbGxvdyBhIDJweCBtYXJnaW4gb2YgZXJyb3IuXG5cbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9KCk7XG5cbiAgICBfdG91Y2hFdmVudExvb2t1cCA9IGZ1bmN0aW9uICh0eXBlcykge1xuICAgICAgLy93ZSBjcmVhdGUgYW4gb2JqZWN0IHRoYXQgbWFrZXMgaXQgZWFzeSB0byB0cmFuc2xhdGUgdG91Y2ggZXZlbnQgdHlwZXMgaW50byB0aGVpciBcInBvaW50ZXJcIiBjb3VudGVycGFydHMgaWYgd2UncmUgaW4gYSBicm93c2VyIHRoYXQgdXNlcyB0aG9zZSBpbnN0ZWFkLiBMaWtlIElFMTAgdXNlcyBcIk1TUG9pbnRlckRvd25cIiBpbnN0ZWFkIG9mIFwidG91Y2hzdGFydFwiLCBmb3IgZXhhbXBsZS5cbiAgICAgIHZhciBzdGFuZGFyZCA9IHR5cGVzLnNwbGl0KFwiLFwiKSxcbiAgICAgICAgICBjb252ZXJ0ZWQgPSAoXCJvbnBvaW50ZXJkb3duXCIgaW4gX3RlbXBEaXYgPyBcInBvaW50ZXJkb3duLHBvaW50ZXJtb3ZlLHBvaW50ZXJ1cCxwb2ludGVyY2FuY2VsXCIgOiBcIm9ubXNwb2ludGVyZG93blwiIGluIF90ZW1wRGl2ID8gXCJNU1BvaW50ZXJEb3duLE1TUG9pbnRlck1vdmUsTVNQb2ludGVyVXAsTVNQb2ludGVyQ2FuY2VsXCIgOiB0eXBlcykuc3BsaXQoXCIsXCIpLFxuICAgICAgICAgIG9iaiA9IHt9LFxuICAgICAgICAgIGkgPSA0O1xuXG4gICAgICB3aGlsZSAoLS1pID4gLTEpIHtcbiAgICAgICAgb2JqW3N0YW5kYXJkW2ldXSA9IGNvbnZlcnRlZFtpXTtcbiAgICAgICAgb2JqW2NvbnZlcnRlZFtpXV0gPSBzdGFuZGFyZFtpXTtcbiAgICAgIH0gLy90byBhdm9pZCBwcm9ibGVtcyBpbiBpT1MgOSwgdGVzdCB0byBzZWUgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIFwicGFzc2l2ZVwiIG9wdGlvbiBvbiBhZGRFdmVudExpc3RlbmVyKCkuXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgX2RvY0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgX3N1cHBvcnRzUGFzc2l2ZSA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0oXCJ0b3VjaHN0YXJ0LHRvdWNobW92ZSx0b3VjaGVuZCx0b3VjaGNhbmNlbFwiKTtcblxuICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9lbXB0eUZ1bmMpOyAvL3NvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LiBWZXJ5IHN0cmFuZ2UgaW5kZWVkLlxuXG5cbiAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ0b3VjaG1vdmVcIiwgX2VtcHR5RnVuYyk7IC8vd29ya3MgYXJvdW5kIFNhZmFyaSBidWdzIHRoYXQgc3RpbGwgYWxsb3cgdGhlIHBhZ2UgdG8gc2Nyb2xsIGV2ZW4gd2hlbiB3ZSBwcmV2ZW50RGVmYXVsdCgpIG9uIHRoZSB0b3VjaG1vdmUgZXZlbnQuXG5cblxuICAgIF9ib2R5ICYmIF9ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIF9lbXB0eUZ1bmMpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dzYXAuY29tL2ZvcnVtcy90b3BpYy8yMTQ1MC1kcmFnZ2FibGUtaW4taWZyYW1lLW9uLW1vYmlsZS1pcy1idWdneS9cblxuICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIHAgaW4gX2xvb2t1cCkge1xuICAgICAgICBpZiAoX2xvb2t1cFtwXS5pc1ByZXNzZWQpIHtcbiAgICAgICAgICBfbG9va3VwW3BdLmVuZERyYWcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZ3NhcCA9IF9jb3JlSW5pdHRlZCA9IF9nZXRHU0FQKCk7XG4gIH1cblxuICBpZiAoZ3NhcCkge1xuICAgIEluZXJ0aWFQbHVnaW4gPSBnc2FwLnBsdWdpbnMuaW5lcnRpYTtcblxuICAgIF9jb250ZXh0ID0gZ3NhcC5jb3JlLmNvbnRleHQgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICBfY2hlY2tQcmVmaXggPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4O1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJlZml4KF90cmFuc2Zvcm1Qcm9wKTtcbiAgICBfdHJhbnNmb3JtT3JpZ2luUHJvcCA9IF9jaGVja1ByZWZpeChfdHJhbnNmb3JtT3JpZ2luUHJvcCk7XG4gICAgX3RvQXJyYXkgPSBnc2FwLnV0aWxzLnRvQXJyYXk7XG4gICAgX2dldFN0eWxlU2F2ZXIgPSBnc2FwLmNvcmUuZ2V0U3R5bGVTYXZlcjtcbiAgICBfc3VwcG9ydHMzRCA9ICEhX2NoZWNrUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gIH0gZWxzZSBpZiAocmVxdWlyZWQpIHtcbiAgICBjb25zb2xlLndhcm4oXCJQbGVhc2UgZ3NhcC5yZWdpc3RlclBsdWdpbihEcmFnZ2FibGUpXCIpO1xuICB9XG59O1xuXG52YXIgRXZlbnREaXNwYXRjaGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRXZlbnREaXNwYXRjaGVyKHRhcmdldCkge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0IHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgbGlzdCA9IHRoaXMuX2xpc3RlbmVyc1t0eXBlXSB8fCAodGhpcy5fbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuXG4gICAgaWYgKCF+bGlzdC5pbmRleE9mKGNhbGxiYWNrKSkge1xuICAgICAgbGlzdC5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sXG4gICAgICAgIGkgPSBsaXN0ICYmIGxpc3QuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaSA+PSAwICYmIGxpc3Quc3BsaWNlKGksIDEpO1xuICB9O1xuXG4gIF9wcm90by5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gZGlzcGF0Y2hFdmVudCh0eXBlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciByZXN1bHQ7XG4gICAgKHRoaXMuX2xpc3RlbmVyc1t0eXBlXSB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRhcmdldDogX3RoaXMudGFyZ2V0XG4gICAgICB9KSA9PT0gZmFsc2UgJiYgKHJlc3VsdCA9IGZhbHNlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0OyAvL2lmIGFueSBvZiB0aGUgY2FsbGJhY2tzIHJldHVybiBmYWxzZSwgcGFzcyB0aGF0IGFsb25nLlxuICB9O1xuXG4gIHJldHVybiBFdmVudERpc3BhdGNoZXI7XG59KCk7XG5cbmV4cG9ydCB2YXIgRHJhZ2dhYmxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXZlbnREaXNwYXRjaGVyKSB7XG4gIF9pbmhlcml0c0xvb3NlKERyYWdnYWJsZSwgX0V2ZW50RGlzcGF0Y2hlcik7XG5cbiAgZnVuY3Rpb24gRHJhZ2dhYmxlKHRhcmdldCwgdmFycykge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfdGhpczIgPSBfRXZlbnREaXNwYXRjaGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfY29yZUluaXR0ZWQgfHwgX2luaXRDb3JlKDEpO1xuICAgIHRhcmdldCA9IF90b0FycmF5KHRhcmdldClbMF07IC8vaW4gY2FzZSB0aGUgdGFyZ2V0IGlzIGEgc2VsZWN0b3Igb2JqZWN0IG9yIHNlbGVjdG9yIHRleHRcblxuICAgIF90aGlzMi5zdHlsZXMgPSBfZ2V0U3R5bGVTYXZlciAmJiBfZ2V0U3R5bGVTYXZlcih0YXJnZXQsIFwidHJhbnNmb3JtLGxlZnQsdG9wXCIpO1xuXG4gICAgaWYgKCFJbmVydGlhUGx1Z2luKSB7XG4gICAgICBJbmVydGlhUGx1Z2luID0gZ3NhcC5wbHVnaW5zLmluZXJ0aWE7XG4gICAgfVxuXG4gICAgX3RoaXMyLnZhcnMgPSB2YXJzID0gX2NvcHkodmFycyB8fCB7fSk7XG4gICAgX3RoaXMyLnRhcmdldCA9IHRhcmdldDtcbiAgICBfdGhpczIueCA9IF90aGlzMi55ID0gX3RoaXMyLnJvdGF0aW9uID0gMDtcbiAgICBfdGhpczIuZHJhZ1Jlc2lzdGFuY2UgPSBwYXJzZUZsb2F0KHZhcnMuZHJhZ1Jlc2lzdGFuY2UpIHx8IDA7XG4gICAgX3RoaXMyLmVkZ2VSZXNpc3RhbmNlID0gaXNOYU4odmFycy5lZGdlUmVzaXN0YW5jZSkgPyAxIDogcGFyc2VGbG9hdCh2YXJzLmVkZ2VSZXNpc3RhbmNlKSB8fCAwO1xuICAgIF90aGlzMi5sb2NrQXhpcyA9IHZhcnMubG9ja0F4aXM7XG4gICAgX3RoaXMyLmF1dG9TY3JvbGwgPSB2YXJzLmF1dG9TY3JvbGwgfHwgMDtcbiAgICBfdGhpczIubG9ja2VkQXhpcyA9IG51bGw7XG4gICAgX3RoaXMyLmFsbG93RXZlbnREZWZhdWx0ID0gISF2YXJzLmFsbG93RXZlbnREZWZhdWx0O1xuICAgIGdzYXAuZ2V0UHJvcGVydHkodGFyZ2V0LCBcInhcIik7IC8vIHRvIGVuc3VyZSB0aGF0IHRyYW5zZm9ybXMgYXJlIGluc3RhbnRpYXRlZC5cblxuICAgIHZhciB0eXBlID0gKHZhcnMudHlwZSB8fCBcIngseVwiKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICB4eU1vZGUgPSB+dHlwZS5pbmRleE9mKFwieFwiKSB8fCB+dHlwZS5pbmRleE9mKFwieVwiKSxcbiAgICAgICAgcm90YXRpb25Nb2RlID0gdHlwZS5pbmRleE9mKFwicm90YXRpb25cIikgIT09IC0xLFxuICAgICAgICB4UHJvcCA9IHJvdGF0aW9uTW9kZSA/IFwicm90YXRpb25cIiA6IHh5TW9kZSA/IFwieFwiIDogXCJsZWZ0XCIsXG4gICAgICAgIHlQcm9wID0geHlNb2RlID8gXCJ5XCIgOiBcInRvcFwiLFxuICAgICAgICBhbGxvd1ggPSAhISh+dHlwZS5pbmRleE9mKFwieFwiKSB8fCB+dHlwZS5pbmRleE9mKFwibGVmdFwiKSB8fCB0eXBlID09PSBcInNjcm9sbFwiKSxcbiAgICAgICAgYWxsb3dZID0gISEofnR5cGUuaW5kZXhPZihcInlcIikgfHwgfnR5cGUuaW5kZXhPZihcInRvcFwiKSB8fCB0eXBlID09PSBcInNjcm9sbFwiKSxcbiAgICAgICAgbWluaW11bU1vdmVtZW50ID0gdmFycy5taW5pbXVtTW92ZW1lbnQgfHwgMixcbiAgICAgICAgc2VsZiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSxcbiAgICAgICAgdHJpZ2dlcnMgPSBfdG9BcnJheSh2YXJzLnRyaWdnZXIgfHwgdmFycy5oYW5kbGUgfHwgdGFyZ2V0KSxcbiAgICAgICAga2lsbFByb3BzID0ge30sXG4gICAgICAgIGRyYWdFbmRUaW1lID0gMCxcbiAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gZmFsc2UsXG4gICAgICAgIGF1dG9TY3JvbGxNYXJnaW5Ub3AgPSB2YXJzLmF1dG9TY3JvbGxNYXJnaW5Ub3AgfHwgNDAsXG4gICAgICAgIGF1dG9TY3JvbGxNYXJnaW5SaWdodCA9IHZhcnMuYXV0b1Njcm9sbE1hcmdpblJpZ2h0IHx8IDQwLFxuICAgICAgICBhdXRvU2Nyb2xsTWFyZ2luQm90dG9tID0gdmFycy5hdXRvU2Nyb2xsTWFyZ2luQm90dG9tIHx8IDQwLFxuICAgICAgICBhdXRvU2Nyb2xsTWFyZ2luTGVmdCA9IHZhcnMuYXV0b1Njcm9sbE1hcmdpbkxlZnQgfHwgNDAsXG4gICAgICAgIGlzQ2xpY2thYmxlID0gdmFycy5jbGlja2FibGVUZXN0IHx8IF9pc0NsaWNrYWJsZSxcbiAgICAgICAgY2xpY2tUaW1lID0gMCxcbiAgICAgICAgZ3NDYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgaXNGaXhlZCA9IF9pc0ZpeGVkKHRhcmdldCksXG4gICAgICAgIGdldFByb3BBc051bSA9IGZ1bmN0aW9uIGdldFByb3BBc051bShwcm9wZXJ0eSwgdW5pdCkge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZ3NDYWNoZS5nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCkpO1xuICAgIH0sXG4gICAgICAgIG93bmVyRG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQgfHwgX2RvYyxcbiAgICAgICAgZW5hYmxlZCxcbiAgICAgICAgc2Nyb2xsUHJveHksXG4gICAgICAgIHN0YXJ0UG9pbnRlclgsXG4gICAgICAgIHN0YXJ0UG9pbnRlclksXG4gICAgICAgIHN0YXJ0RWxlbWVudFgsXG4gICAgICAgIHN0YXJ0RWxlbWVudFksXG4gICAgICAgIGhhc0JvdW5kcyxcbiAgICAgICAgaGFzRHJhZ0NhbGxiYWNrLFxuICAgICAgICBoYXNNb3ZlQ2FsbGJhY2ssXG4gICAgICAgIG1heFgsXG4gICAgICAgIG1pblgsXG4gICAgICAgIG1heFksXG4gICAgICAgIG1pblksXG4gICAgICAgIHRvdWNoLFxuICAgICAgICB0b3VjaElELFxuICAgICAgICByb3RhdGlvbk9yaWdpbixcbiAgICAgICAgZGlydHksXG4gICAgICAgIG9sZCxcbiAgICAgICAgc25hcFgsXG4gICAgICAgIHNuYXBZLFxuICAgICAgICBzbmFwWFksXG4gICAgICAgIGlzQ2xpY2tpbmcsXG4gICAgICAgIHRvdWNoRXZlbnRUYXJnZXQsXG4gICAgICAgIG1hdHJpeCxcbiAgICAgICAgaW50ZXJydXB0ZWQsXG4gICAgICAgIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcsXG4gICAgICAgIHRvdWNoRHJhZ0F4aXMsXG4gICAgICAgIGlzRGlzcGF0Y2hpbmcsXG4gICAgICAgIGNsaWNrRGlzcGF0Y2gsXG4gICAgICAgIHRydXN0ZWRDbGlja0Rpc3BhdGNoLFxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0LFxuICAgICAgICBpbm5lck1hdHJpeCxcbiAgICAgICAgZHJhZ2dlZCxcbiAgICAgICAgb25Db250ZXh0TWVudSA9IGZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoZSkge1xuICAgICAgLy91c2VkIHRvIHByZXZlbnQgbG9uZy10b3VjaCBmcm9tIHRyaWdnZXJpbmcgYSBjb250ZXh0IG1lbnUuXG4gICAgICAvLyAoc2VsZi5pc1ByZXNzZWQgJiYgZS53aGljaCA8IDIpICYmIHNlbGYuZW5kRHJhZygpIC8vIHByZXZpb3VzbHkgZW5kZWQgZHJhZyB3aGVuIGNvbnRleHQgbWVudSB3YXMgdHJpZ2dlcmVkLCBidXQgaW5zdGVhZCB3ZSBzaG91bGQganVzdCBzdG9wIHByb3BhZ2F0aW9uIGFuZCBwcmV2ZW50IHRoZSBkZWZhdWx0IGV2ZW50IGJlaGF2aW9yLlxuICAgICAgX3ByZXZlbnREZWZhdWx0KGUpO1xuXG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAmJiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgICAgIC8vdGhpcyBtZXRob2QgZ2V0cyBjYWxsZWQgb24gZXZlcnkgdGljayBvZiBUd2VlbkxpdGUudGlja2VyIHdoaWNoIGFsbG93cyB1cyB0byBzeW5jaHJvbml6ZSB0aGUgcmVuZGVycyB0byB0aGUgY29yZSBlbmdpbmUgKHdoaWNoIGlzIHR5cGljYWxseSBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgZGlzcGxheSByZWZyZXNoIHZpYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLiBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiAtIGl0J3MgYmV0dGVyIHRoYW4gYXBwbHlpbmcgdGhlIHZhbHVlcyBpbnNpZGUgdGhlIFwibW91c2Vtb3ZlXCIgb3IgXCJ0b3VjaG1vdmVcIiBldmVudCBoYW5kbGVyIHdoaWNoIG1heSBnZXQgY2FsbGVkIG1hbnkgdGltZXMgaW5iZXR3ZWVuIHJlZnJlc2hlcy5cbiAgICByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgIGlmIChzZWxmLmF1dG9TY3JvbGwgJiYgc2VsZi5pc0RyYWdnaW5nICYmIChjaGVja0F1dG9TY3JvbGxCb3VuZHMgfHwgZGlydHkpKSB7XG4gICAgICAgIHZhciBlID0gdGFyZ2V0LFxuICAgICAgICAgICAgYXV0b1Njcm9sbEZhY3RvciA9IHNlbGYuYXV0b1Njcm9sbCAqIDE1LFxuICAgICAgICAgICAgLy9tdWx0aXBseWluZyBieSAxNSBqdXN0IGdpdmVzIHVzIGEgYmV0dGVyIFwiZmVlbFwiIHNwZWVkLXdpc2UuXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgICAgIGlzUm9vdCxcbiAgICAgICAgICAgIHJlY3QsXG4gICAgICAgICAgICBwb2ludGVyWCxcbiAgICAgICAgICAgIHBvaW50ZXJZLFxuICAgICAgICAgICAgY2hhbmdlWCxcbiAgICAgICAgICAgIGNoYW5nZVksXG4gICAgICAgICAgICBnYXA7XG4gICAgICAgIGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IGZhbHNlO1xuICAgICAgICBfd2luZG93UHJveHkuc2Nyb2xsVG9wID0gX3dpbi5wYWdlWU9mZnNldCAhPSBudWxsID8gX3dpbi5wYWdlWU9mZnNldCA6IG93bmVyRG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgIT0gbnVsbCA/IG93bmVyRG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgOiBvd25lckRvYy5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgX3dpbmRvd1Byb3h5LnNjcm9sbExlZnQgPSBfd2luLnBhZ2VYT2Zmc2V0ICE9IG51bGwgPyBfd2luLnBhZ2VYT2Zmc2V0IDogb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgIT0gbnVsbCA/IG93bmVyRG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogb3duZXJEb2MuYm9keS5zY3JvbGxMZWZ0O1xuICAgICAgICBwb2ludGVyWCA9IHNlbGYucG9pbnRlclggLSBfd2luZG93UHJveHkuc2Nyb2xsTGVmdDtcbiAgICAgICAgcG9pbnRlclkgPSBzZWxmLnBvaW50ZXJZIC0gX3dpbmRvd1Byb3h5LnNjcm9sbFRvcDtcblxuICAgICAgICB3aGlsZSAoZSAmJiAhaXNSb290KSB7XG4gICAgICAgICAgLy93YWxrIHVwIHRoZSBjaGFpbiBhbmQgc2Vuc2Ugd2hlcmV2ZXIgdGhlIHBvaW50ZXIgaXMgd2l0aGluIDQwcHggb2YgYW4gZWRnZSB0aGF0J3Mgc2Nyb2xsYWJsZS5cbiAgICAgICAgICBpc1Jvb3QgPSBfaXNSb290KGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgcGFyZW50ID0gaXNSb290ID8gX3dpbmRvd1Byb3h5IDogZS5wYXJlbnROb2RlO1xuICAgICAgICAgIHJlY3QgPSBpc1Jvb3QgPyB7XG4gICAgICAgICAgICBib3R0b206IE1hdGgubWF4KF9kb2NFbGVtZW50LmNsaWVudEhlaWdodCwgX3dpbi5pbm5lckhlaWdodCB8fCAwKSxcbiAgICAgICAgICAgIHJpZ2h0OiBNYXRoLm1heChfZG9jRWxlbWVudC5jbGllbnRXaWR0aCwgX3dpbi5pbm5lcldpZHRoIHx8IDApLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMFxuICAgICAgICAgIH0gOiBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY2hhbmdlWCA9IGNoYW5nZVkgPSAwO1xuXG4gICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgZ2FwID0gcGFyZW50Ll9nc01heFNjcm9sbFkgLSBwYXJlbnQuc2Nyb2xsVG9wO1xuXG4gICAgICAgICAgICBpZiAoZ2FwIDwgMCkge1xuICAgICAgICAgICAgICBjaGFuZ2VZID0gZ2FwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyWSA+IHJlY3QuYm90dG9tIC0gYXV0b1Njcm9sbE1hcmdpbkJvdHRvbSAmJiBnYXApIHtcbiAgICAgICAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlWSA9IE1hdGgubWluKGdhcCwgYXV0b1Njcm9sbEZhY3RvciAqICgxIC0gTWF0aC5tYXgoMCwgcmVjdC5ib3R0b20gLSBwb2ludGVyWSkgLyBhdXRvU2Nyb2xsTWFyZ2luQm90dG9tKSB8IDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyWSA8IHJlY3QudG9wICsgYXV0b1Njcm9sbE1hcmdpblRvcCAmJiBwYXJlbnQuc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAgIGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNoYW5nZVkgPSAtTWF0aC5taW4ocGFyZW50LnNjcm9sbFRvcCwgYXV0b1Njcm9sbEZhY3RvciAqICgxIC0gTWF0aC5tYXgoMCwgcG9pbnRlclkgLSByZWN0LnRvcCkgLyBhdXRvU2Nyb2xsTWFyZ2luVG9wKSB8IDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hhbmdlWSkge1xuICAgICAgICAgICAgICBwYXJlbnQuc2Nyb2xsVG9wICs9IGNoYW5nZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICAgICAgZ2FwID0gcGFyZW50Ll9nc01heFNjcm9sbFggLSBwYXJlbnQuc2Nyb2xsTGVmdDtcblxuICAgICAgICAgICAgaWYgKGdhcCA8IDApIHtcbiAgICAgICAgICAgICAgY2hhbmdlWCA9IGdhcDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9pbnRlclggPiByZWN0LnJpZ2h0IC0gYXV0b1Njcm9sbE1hcmdpblJpZ2h0ICYmIGdhcCkge1xuICAgICAgICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSB0cnVlO1xuICAgICAgICAgICAgICBjaGFuZ2VYID0gTWF0aC5taW4oZ2FwLCBhdXRvU2Nyb2xsRmFjdG9yICogKDEgLSBNYXRoLm1heCgwLCByZWN0LnJpZ2h0IC0gcG9pbnRlclgpIC8gYXV0b1Njcm9sbE1hcmdpblJpZ2h0KSB8IDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyWCA8IHJlY3QubGVmdCArIGF1dG9TY3JvbGxNYXJnaW5MZWZ0ICYmIHBhcmVudC5zY3JvbGxMZWZ0KSB7XG4gICAgICAgICAgICAgIGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNoYW5nZVggPSAtTWF0aC5taW4ocGFyZW50LnNjcm9sbExlZnQsIGF1dG9TY3JvbGxGYWN0b3IgKiAoMSAtIE1hdGgubWF4KDAsIHBvaW50ZXJYIC0gcmVjdC5sZWZ0KSAvIGF1dG9TY3JvbGxNYXJnaW5MZWZ0KSB8IDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hhbmdlWCkge1xuICAgICAgICAgICAgICBwYXJlbnQuc2Nyb2xsTGVmdCArPSBjaGFuZ2VYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1Jvb3QgJiYgKGNoYW5nZVggfHwgY2hhbmdlWSkpIHtcbiAgICAgICAgICAgIF93aW4uc2Nyb2xsVG8ocGFyZW50LnNjcm9sbExlZnQsIHBhcmVudC5zY3JvbGxUb3ApO1xuXG4gICAgICAgICAgICBzZXRQb2ludGVyUG9zaXRpb24oc2VsZi5wb2ludGVyWCArIGNoYW5nZVgsIHNlbGYucG9pbnRlclkgKyBjaGFuZ2VZKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICB2YXIgeCA9IHNlbGYueCxcbiAgICAgICAgICAgIHkgPSBzZWxmLnk7XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNlbGYuZGVsdGFYID0geCAtIHBhcnNlRmxvYXQoZ3NDYWNoZS5yb3RhdGlvbik7XG4gICAgICAgICAgc2VsZi5yb3RhdGlvbiA9IHg7XG4gICAgICAgICAgZ3NDYWNoZS5yb3RhdGlvbiA9IHggKyBcImRlZ1wiO1xuICAgICAgICAgIGdzQ2FjaGUucmVuZGVyVHJhbnNmb3JtKDEsIGdzQ2FjaGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzY3JvbGxQcm94eSkge1xuICAgICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgICBzZWxmLmRlbHRhWSA9IHkgLSBzY3JvbGxQcm94eS50b3AoKTtcbiAgICAgICAgICAgICAgc2Nyb2xsUHJveHkudG9wKHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGVsdGFYID0geCAtIHNjcm9sbFByb3h5LmxlZnQoKTtcbiAgICAgICAgICAgICAgc2Nyb2xsUHJveHkubGVmdCh4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHh5TW9kZSkge1xuICAgICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgICBzZWxmLmRlbHRhWSA9IHkgLSBwYXJzZUZsb2F0KGdzQ2FjaGUueSk7XG4gICAgICAgICAgICAgIGdzQ2FjaGUueSA9IHkgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1gpIHtcbiAgICAgICAgICAgICAgc2VsZi5kZWx0YVggPSB4IC0gcGFyc2VGbG9hdChnc0NhY2hlLngpO1xuICAgICAgICAgICAgICBnc0NhY2hlLnggPSB4ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnc0NhY2hlLnJlbmRlclRyYW5zZm9ybSgxLCBnc0NhY2hlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgICBzZWxmLmRlbHRhWSA9IHkgLSBwYXJzZUZsb2F0KHRhcmdldC5zdHlsZS50b3AgfHwgMCk7XG4gICAgICAgICAgICAgIHRhcmdldC5zdHlsZS50b3AgPSB5ICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICAgIHNlbGYuZGVsdGFYID0geCAtIHBhcnNlRmxvYXQodGFyZ2V0LnN0eWxlLmxlZnQgfHwgMCk7XG4gICAgICAgICAgICAgIHRhcmdldC5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzRHJhZ0NhbGxiYWNrICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXNEaXNwYXRjaGluZykge1xuICAgICAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlOyAvL2luIGNhc2Ugb25EcmFnIGhhcyBhbiB1cGRhdGUoKSBjYWxsIChhdm9pZCBlbmRsZXNzIGxvb3ApXG5cbiAgICAgICAgICBpZiAoX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJkcmFnXCIsIFwib25EcmFnXCIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICAgICAgICBzZWxmLnggLT0gc2VsZi5kZWx0YVg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1kpIHtcbiAgICAgICAgICAgICAgc2VsZi55IC09IHNlbGYuZGVsdGFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZW5kZXIodHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgfSxcbiAgICAgICAgLy9jb3BpZXMgdGhlIHgveSBmcm9tIHRoZSBlbGVtZW50ICh3aGV0aGVyIHRoYXQgYmUgdHJhbnNmb3JtcywgdG9wL2xlZnQsIG9yIFNjcm9sbFByb3h5J3MgdG9wL2xlZnQpIHRvIHRoZSBEcmFnZ2FibGUncyB4IGFuZCB5IChhbmQgcm90YXRpb24gaWYgbmVjZXNzYXJ5KSBwcm9wZXJ0aWVzIHNvIHRoYXQgdGhleSByZWZsZWN0IHJlYWxpdHkgYW5kIGl0IGFsc28gKG9wdGlvbmFsbHkpIGFwcGxpZXMgYW55IHNuYXBwaW5nIG5lY2Vzc2FyeS4gVGhpcyBpcyB1c2VkIGJ5IHRoZSBJbmVydGlhUGx1Z2luIHR3ZWVuIGluIGFuIG9uVXBkYXRlIHRvIGVuc3VyZSB0aGluZ3MgYXJlIHN5bmNlZCBhbmQgc25hcHBlZC5cbiAgICBzeW5jWFkgPSBmdW5jdGlvbiBzeW5jWFkoc2tpcE9uVXBkYXRlLCBza2lwU25hcCkge1xuICAgICAgdmFyIHggPSBzZWxmLngsXG4gICAgICAgICAgeSA9IHNlbGYueSxcbiAgICAgICAgICBzbmFwcGVkVmFsdWUsXG4gICAgICAgICAgY3M7XG5cbiAgICAgIGlmICghdGFyZ2V0Ll9nc2FwKSB7XG4gICAgICAgIC8vanVzdCBpbiBjYXNlIHRoZSBfZ3NhcCBjYWNoZSBnb3Qgd2lwZWQsIGxpa2UgaWYgdGhlIHVzZXIgY2FsbGVkIGNsZWFyUHJvcHMgb24gdGhlIHRyYW5zZm9ybSBvciBzb21ldGhpbmcgKHZlcnkgcmFyZSkuXG4gICAgICAgIGdzQ2FjaGUgPSBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgZ3NDYWNoZS51bmNhY2hlICYmIGdzYXAuZ2V0UHJvcGVydHkodGFyZ2V0LCBcInhcIik7IC8vIHRyaWdnZXIgYSByZS1jYWNoZVxuXG4gICAgICBpZiAoeHlNb2RlKSB7XG4gICAgICAgIHNlbGYueCA9IHBhcnNlRmxvYXQoZ3NDYWNoZS54KTtcbiAgICAgICAgc2VsZi55ID0gcGFyc2VGbG9hdChnc0NhY2hlLnkpO1xuICAgICAgfSBlbHNlIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgc2VsZi54ID0gc2VsZi5yb3RhdGlvbiA9IHBhcnNlRmxvYXQoZ3NDYWNoZS5yb3RhdGlvbik7XG4gICAgICB9IGVsc2UgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgIHNlbGYueSA9IHNjcm9sbFByb3h5LnRvcCgpO1xuICAgICAgICBzZWxmLnggPSBzY3JvbGxQcm94eS5sZWZ0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnkgPSBwYXJzZUZsb2F0KHRhcmdldC5zdHlsZS50b3AgfHwgKGNzID0gX2dldENvbXB1dGVkU3R5bGUodGFyZ2V0KSkgJiYgY3MudG9wKSB8fCAwO1xuICAgICAgICBzZWxmLnggPSBwYXJzZUZsb2F0KHRhcmdldC5zdHlsZS5sZWZ0IHx8IChjcyB8fCB7fSkubGVmdCkgfHwgMDtcbiAgICAgIH1cblxuICAgICAgaWYgKChzbmFwWCB8fCBzbmFwWSB8fCBzbmFwWFkpICYmICFza2lwU25hcCAmJiAoc2VsZi5pc0RyYWdnaW5nIHx8IHNlbGYuaXNUaHJvd2luZykpIHtcbiAgICAgICAgaWYgKHNuYXBYWSkge1xuICAgICAgICAgIF90ZW1wMS54ID0gc2VsZi54O1xuICAgICAgICAgIF90ZW1wMS55ID0gc2VsZi55O1xuICAgICAgICAgIHNuYXBwZWRWYWx1ZSA9IHNuYXBYWShfdGVtcDEpO1xuXG4gICAgICAgICAgaWYgKHNuYXBwZWRWYWx1ZS54ICE9PSBzZWxmLngpIHtcbiAgICAgICAgICAgIHNlbGYueCA9IHNuYXBwZWRWYWx1ZS54O1xuICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzbmFwcGVkVmFsdWUueSAhPT0gc2VsZi55KSB7XG4gICAgICAgICAgICBzZWxmLnkgPSBzbmFwcGVkVmFsdWUueTtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc25hcFgpIHtcbiAgICAgICAgICBzbmFwcGVkVmFsdWUgPSBzbmFwWChzZWxmLngpO1xuXG4gICAgICAgICAgaWYgKHNuYXBwZWRWYWx1ZSAhPT0gc2VsZi54KSB7XG4gICAgICAgICAgICBzZWxmLnggPSBzbmFwcGVkVmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgc2VsZi5yb3RhdGlvbiA9IHNuYXBwZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbmFwWSkge1xuICAgICAgICAgIHNuYXBwZWRWYWx1ZSA9IHNuYXBZKHNlbGYueSk7XG5cbiAgICAgICAgICBpZiAoc25hcHBlZFZhbHVlICE9PSBzZWxmLnkpIHtcbiAgICAgICAgICAgIHNlbGYueSA9IHNuYXBwZWRWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGlydHkgJiYgcmVuZGVyKHRydWUpO1xuXG4gICAgICBpZiAoIXNraXBPblVwZGF0ZSkge1xuICAgICAgICBzZWxmLmRlbHRhWCA9IHNlbGYueCAtIHg7XG4gICAgICAgIHNlbGYuZGVsdGFZID0gc2VsZi55IC0geTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInRocm93dXBkYXRlXCIsIFwib25UaHJvd1VwZGF0ZVwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBidWlsZFNuYXBGdW5jID0gZnVuY3Rpb24gYnVpbGRTbmFwRnVuYyhzbmFwLCBtaW4sIG1heCwgZmFjdG9yKSB7XG4gICAgICBpZiAobWluID09IG51bGwpIHtcbiAgICAgICAgbWluID0gLV9iaWdOdW07XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXggPT0gbnVsbCkge1xuICAgICAgICBtYXggPSBfYmlnTnVtO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oc25hcCkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgdmFyIGVkZ2VUb2xlcmFuY2UgPSAhc2VsZi5pc1ByZXNzZWQgPyAxIDogMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2U7IC8vaWYgd2UncmUgdHdlZW5pbmcsIGRpc2FibGUgdGhlIGVkZ2VUb2xlcmFuY2UgYmVjYXVzZSBpdCdzIGFscmVhZHkgZmFjdG9yZWQgaW50byB0aGUgdHdlZW5pbmcgdmFsdWVzICh3ZSBkb24ndCB3YW50IHRvIGFwcGx5IGl0IG11bHRpcGxlIHRpbWVzKVxuXG4gICAgICAgICAgcmV0dXJuIHNuYXAuY2FsbChzZWxmLCAobiA+IG1heCA/IG1heCArIChuIC0gbWF4KSAqIGVkZ2VUb2xlcmFuY2UgOiBuIDwgbWluID8gbWluICsgKG4gLSBtaW4pICogZWRnZVRvbGVyYW5jZSA6IG4pICogZmFjdG9yKSAqIGZhY3RvcjtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0FycmF5KHNuYXApKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHZhciBpID0gc25hcC5sZW5ndGgsXG4gICAgICAgICAgICAgIGNsb3Nlc3QgPSAwLFxuICAgICAgICAgICAgICBhYnNEaWYgPSBfYmlnTnVtLFxuICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgIGRpZjtcblxuICAgICAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICAgICAgdmFsID0gc25hcFtpXTtcbiAgICAgICAgICAgIGRpZiA9IHZhbCAtIG47XG5cbiAgICAgICAgICAgIGlmIChkaWYgPCAwKSB7XG4gICAgICAgICAgICAgIGRpZiA9IC1kaWY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaWYgPCBhYnNEaWYgJiYgdmFsID49IG1pbiAmJiB2YWwgPD0gbWF4KSB7XG4gICAgICAgICAgICAgIGNsb3Nlc3QgPSBpO1xuICAgICAgICAgICAgICBhYnNEaWYgPSBkaWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNuYXBbY2xvc2VzdF07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc05hTihzbmFwKSA/IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNuYXAgKiBmYWN0b3I7XG4gICAgICB9O1xuICAgIH0sXG4gICAgICAgIGJ1aWxkUG9pbnRTbmFwRnVuYyA9IGZ1bmN0aW9uIGJ1aWxkUG9pbnRTbmFwRnVuYyhzbmFwLCBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZLCByYWRpdXMsIGZhY3Rvcikge1xuICAgICAgcmFkaXVzID0gcmFkaXVzICYmIHJhZGl1cyA8IF9iaWdOdW0gPyByYWRpdXMgKiByYWRpdXMgOiBfYmlnTnVtOyAvL3NvIHdlIGRvbid0IGhhdmUgdG8gTWF0aC5zcXJ0KCkgaW4gdGhlIGZ1bmN0aW9ucy4gUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLlxuXG4gICAgICBpZiAoX2lzRnVuY3Rpb24oc25hcCkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgIHZhciBlZGdlVG9sZXJhbmNlID0gIXNlbGYuaXNQcmVzc2VkID8gMSA6IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgICAgICB4ID0gcG9pbnQueCxcbiAgICAgICAgICAgICAgeSA9IHBvaW50LnksXG4gICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgZHgsXG4gICAgICAgICAgICAgIGR5OyAvL2lmIHdlJ3JlIHR3ZWVuaW5nLCBkaXNhYmxlIHRoZSBlZGdlVG9sZXJhbmNlIGJlY2F1c2UgaXQncyBhbHJlYWR5IGZhY3RvcmVkIGludG8gdGhlIHR3ZWVuaW5nIHZhbHVlcyAod2UgZG9uJ3Qgd2FudCB0byBhcHBseSBpdCBtdWx0aXBsZSB0aW1lcylcblxuICAgICAgICAgIHBvaW50LnggPSB4ID0geCA+IG1heFggPyBtYXhYICsgKHggLSBtYXhYKSAqIGVkZ2VUb2xlcmFuY2UgOiB4IDwgbWluWCA/IG1pblggKyAoeCAtIG1pblgpICogZWRnZVRvbGVyYW5jZSA6IHg7XG4gICAgICAgICAgcG9pbnQueSA9IHkgPSB5ID4gbWF4WSA/IG1heFkgKyAoeSAtIG1heFkpICogZWRnZVRvbGVyYW5jZSA6IHkgPCBtaW5ZID8gbWluWSArICh5IC0gbWluWSkgKiBlZGdlVG9sZXJhbmNlIDogeTtcbiAgICAgICAgICByZXN1bHQgPSBzbmFwLmNhbGwoc2VsZiwgcG9pbnQpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gcG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50LnggPSByZXN1bHQueDtcbiAgICAgICAgICAgIHBvaW50LnkgPSByZXN1bHQueTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmFjdG9yICE9PSAxKSB7XG4gICAgICAgICAgICBwb2ludC54ICo9IGZhY3RvcjtcbiAgICAgICAgICAgIHBvaW50LnkgKj0gZmFjdG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyYWRpdXMgPCBfYmlnTnVtKSB7XG4gICAgICAgICAgICBkeCA9IHBvaW50LnggLSB4O1xuICAgICAgICAgICAgZHkgPSBwb2ludC55IC0geTtcblxuICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICAgIHBvaW50LnggPSB4O1xuICAgICAgICAgICAgICBwb2ludC55ID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChfaXNBcnJheShzbmFwKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICB2YXIgaSA9IHNuYXAubGVuZ3RoLFxuICAgICAgICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgICAgICAgbWluRGlzdCA9IF9iaWdOdW0sXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgIHBvaW50LFxuICAgICAgICAgICAgICBkaXN0O1xuXG4gICAgICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgICAgICBwb2ludCA9IHNuYXBbaV07XG4gICAgICAgICAgICB4ID0gcG9pbnQueCAtIHAueDtcbiAgICAgICAgICAgIHkgPSBwb2ludC55IC0gcC55O1xuICAgICAgICAgICAgZGlzdCA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAgICAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkge1xuICAgICAgICAgICAgICBjbG9zZXN0ID0gaTtcbiAgICAgICAgICAgICAgbWluRGlzdCA9IGRpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG1pbkRpc3QgPD0gcmFkaXVzID8gc25hcFtjbG9zZXN0XSA6IHA7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbjtcbiAgICAgIH07XG4gICAgfSxcbiAgICAgICAgY2FsY3VsYXRlQm91bmRzID0gZnVuY3Rpb24gY2FsY3VsYXRlQm91bmRzKCkge1xuICAgICAgdmFyIGJvdW5kcywgdGFyZ2V0Qm91bmRzLCBzbmFwLCBzbmFwSXNSYXc7XG4gICAgICBoYXNCb3VuZHMgPSBmYWxzZTtcblxuICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgIHNjcm9sbFByb3h5LmNhbGlicmF0ZSgpO1xuICAgICAgICBzZWxmLm1pblggPSBtaW5YID0gLXNjcm9sbFByb3h5Lm1heFNjcm9sbExlZnQoKTtcbiAgICAgICAgc2VsZi5taW5ZID0gbWluWSA9IC1zY3JvbGxQcm94eS5tYXhTY3JvbGxUb3AoKTtcbiAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IHNlbGYubWF4WSA9IG1heFkgPSAwO1xuICAgICAgICBoYXNCb3VuZHMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghIXZhcnMuYm91bmRzKSB7XG4gICAgICAgIGJvdW5kcyA9IF9nZXRCb3VuZHModmFycy5ib3VuZHMsIHRhcmdldC5wYXJlbnROb2RlKTsgLy9jb3VsZCBiZSBhIHNlbGVjdG9yL2pRdWVyeSBvYmplY3Qgb3IgYSBET00gZWxlbWVudCBvciBhIGdlbmVyaWMgb2JqZWN0IGxpa2Uge3RvcDowLCBsZWZ0OjEwMCwgd2lkdGg6MTAwMCwgaGVpZ2h0OjgwMH0gb3Ige21pblg6MTAwLCBtYXhYOjExMDAsIG1pblk6MCwgbWF4WTo4MDB9XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBib3VuZHMubGVmdDtcbiAgICAgICAgICBzZWxmLm1heFggPSBtYXhYID0gYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGg7XG4gICAgICAgICAgc2VsZi5taW5ZID0gbWluWSA9IHNlbGYubWF4WSA9IG1heFkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKCFfaXNVbmRlZmluZWQodmFycy5ib3VuZHMubWF4WCkgfHwgIV9pc1VuZGVmaW5lZCh2YXJzLmJvdW5kcy5tYXhZKSkge1xuICAgICAgICAgIGJvdW5kcyA9IHZhcnMuYm91bmRzO1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBib3VuZHMubWluWDtcbiAgICAgICAgICBzZWxmLm1pblkgPSBtaW5ZID0gYm91bmRzLm1pblk7XG4gICAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IGJvdW5kcy5tYXhYO1xuICAgICAgICAgIHNlbGYubWF4WSA9IG1heFkgPSBib3VuZHMubWF4WTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRCb3VuZHMgPSBfZ2V0Qm91bmRzKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgICAgIHNlbGYubWluWCA9IG1pblggPSBNYXRoLnJvdW5kKGdldFByb3BBc051bSh4UHJvcCwgXCJweFwiKSArIGJvdW5kcy5sZWZ0IC0gdGFyZ2V0Qm91bmRzLmxlZnQpO1xuICAgICAgICAgIHNlbGYubWluWSA9IG1pblkgPSBNYXRoLnJvdW5kKGdldFByb3BBc051bSh5UHJvcCwgXCJweFwiKSArIGJvdW5kcy50b3AgLSB0YXJnZXRCb3VuZHMudG9wKTtcbiAgICAgICAgICBzZWxmLm1heFggPSBtYXhYID0gTWF0aC5yb3VuZChtaW5YICsgKGJvdW5kcy53aWR0aCAtIHRhcmdldEJvdW5kcy53aWR0aCkpO1xuICAgICAgICAgIHNlbGYubWF4WSA9IG1heFkgPSBNYXRoLnJvdW5kKG1pblkgKyAoYm91bmRzLmhlaWdodCAtIHRhcmdldEJvdW5kcy5oZWlnaHQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5YID4gbWF4WCkge1xuICAgICAgICAgIHNlbGYubWluWCA9IG1heFg7XG4gICAgICAgICAgc2VsZi5tYXhYID0gbWF4WCA9IG1pblg7XG4gICAgICAgICAgbWluWCA9IHNlbGYubWluWDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5ZID4gbWF4WSkge1xuICAgICAgICAgIHNlbGYubWluWSA9IG1heFk7XG4gICAgICAgICAgc2VsZi5tYXhZID0gbWF4WSA9IG1pblk7XG4gICAgICAgICAgbWluWSA9IHNlbGYubWluWTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICBzZWxmLm1pblJvdGF0aW9uID0gbWluWDtcbiAgICAgICAgICBzZWxmLm1heFJvdGF0aW9uID0gbWF4WDtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc0JvdW5kcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YXJzLmxpdmVTbmFwKSB7XG4gICAgICAgIHNuYXAgPSB2YXJzLmxpdmVTbmFwID09PSB0cnVlID8gdmFycy5zbmFwIHx8IHt9IDogdmFycy5saXZlU25hcDtcbiAgICAgICAgc25hcElzUmF3ID0gX2lzQXJyYXkoc25hcCkgfHwgX2lzRnVuY3Rpb24oc25hcCk7XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIHNuYXBYID0gYnVpbGRTbmFwRnVuYyhzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5yb3RhdGlvbiwgbWluWCwgbWF4WCwgMSk7XG4gICAgICAgICAgc25hcFkgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzbmFwLnBvaW50cykge1xuICAgICAgICAgICAgc25hcFhZID0gYnVpbGRQb2ludFNuYXBGdW5jKHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnBvaW50cywgbWluWCwgbWF4WCwgbWluWSwgbWF4WSwgc25hcC5yYWRpdXMsIHNjcm9sbFByb3h5ID8gLTEgOiAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICAgICAgICBzbmFwWCA9IGJ1aWxkU25hcEZ1bmMoc25hcElzUmF3ID8gc25hcCA6IHNuYXAueCB8fCBzbmFwLmxlZnQgfHwgc25hcC5zY3JvbGxMZWZ0LCBtaW5YLCBtYXhYLCBzY3JvbGxQcm94eSA/IC0xIDogMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbGxvd1kpIHtcbiAgICAgICAgICAgICAgc25hcFkgPSBidWlsZFNuYXBGdW5jKHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnkgfHwgc25hcC50b3AgfHwgc25hcC5zY3JvbGxUb3AsIG1pblksIG1heFksIHNjcm9sbFByb3h5ID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBvblRocm93Q29tcGxldGUgPSBmdW5jdGlvbiBvblRocm93Q29tcGxldGUoKSB7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJ0aHJvd2NvbXBsZXRlXCIsIFwib25UaHJvd0NvbXBsZXRlXCIpO1xuICAgIH0sXG4gICAgICAgIG9uVGhyb3dJbnRlcnJ1cHQgPSBmdW5jdGlvbiBvblRocm93SW50ZXJydXB0KCkge1xuICAgICAgc2VsZi5pc1Rocm93aW5nID0gZmFsc2U7XG4gICAgfSxcbiAgICAgICAgYW5pbWF0ZSA9IGZ1bmN0aW9uIGFuaW1hdGUoaW5lcnRpYSwgZm9yY2VaZXJvVmVsb2NpdHkpIHtcbiAgICAgIHZhciBzbmFwLCBzbmFwSXNSYXcsIHR3ZWVuLCBvdmVyc2hvb3RUb2xlcmFuY2U7XG5cbiAgICAgIGlmIChpbmVydGlhICYmIEluZXJ0aWFQbHVnaW4pIHtcbiAgICAgICAgaWYgKGluZXJ0aWEgPT09IHRydWUpIHtcbiAgICAgICAgICBzbmFwID0gdmFycy5zbmFwIHx8IHZhcnMubGl2ZVNuYXAgfHwge307XG4gICAgICAgICAgc25hcElzUmF3ID0gX2lzQXJyYXkoc25hcCkgfHwgX2lzRnVuY3Rpb24oc25hcCk7XG4gICAgICAgICAgaW5lcnRpYSA9IHtcbiAgICAgICAgICAgIHJlc2lzdGFuY2U6ICh2YXJzLnRocm93UmVzaXN0YW5jZSB8fCB2YXJzLnJlc2lzdGFuY2UgfHwgMTAwMCkgLyAocm90YXRpb25Nb2RlID8gMTAgOiAxKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgICAgICBpbmVydGlhLnJvdGF0aW9uID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5yb3RhdGlvbiwgbWF4WCwgbWluWCwgMSwgZm9yY2VaZXJvVmVsb2NpdHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICAgIGluZXJ0aWFbeFByb3BdID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5wb2ludHMgfHwgc25hcC54IHx8IHNuYXAubGVmdCwgbWF4WCwgbWluWCwgc2Nyb2xsUHJveHkgPyAtMSA6IDEsIGZvcmNlWmVyb1ZlbG9jaXR5IHx8IHNlbGYubG9ja2VkQXhpcyA9PT0gXCJ4XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsb3dZKSB7XG4gICAgICAgICAgICAgIGluZXJ0aWFbeVByb3BdID0gX3BhcnNlSW5lcnRpYShzZWxmLCBzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5wb2ludHMgfHwgc25hcC55IHx8IHNuYXAudG9wLCBtYXhZLCBtaW5ZLCBzY3JvbGxQcm94eSA/IC0xIDogMSwgZm9yY2VaZXJvVmVsb2NpdHkgfHwgc2VsZi5sb2NrZWRBeGlzID09PSBcInlcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbmFwLnBvaW50cyB8fCBfaXNBcnJheShzbmFwKSAmJiBfaXNPYmplY3Qoc25hcFswXSkpIHtcbiAgICAgICAgICAgICAgaW5lcnRpYS5saW5rZWRQcm9wcyA9IHhQcm9wICsgXCIsXCIgKyB5UHJvcDtcbiAgICAgICAgICAgICAgaW5lcnRpYS5yYWRpdXMgPSBzbmFwLnJhZGl1czsgLy9ub3RlOiB3ZSBhbHNvIGRpc2FibGUgbGl2ZVNuYXBwaW5nIHdoaWxlIHRocm93aW5nIGlmIHRoZXJlJ3MgYSBcInJhZGl1c1wiIGRlZmluZWQsIG90aGVyd2lzZSBpdCBsb29rcyB3ZWlyZCB0byBoYXZlIHRoZSBpdGVtIHRocm93biBwYXN0IGEgc25hcHBpbmcgcG9pbnQgYnV0IGxpdmUtc25hcHBpbmcgbWlkLXR3ZWVuLiBXZSBkbyB0aGlzIGJ5IGFsdGVyaW5nIHRoZSBvblVwZGF0ZVBhcmFtcyBzbyB0aGF0IFwic2tpcFNuYXBcIiBwYXJhbWV0ZXIgaXMgdHJ1ZSBmb3Igc3luY1hZLlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYuaXNUaHJvd2luZyA9IHRydWU7XG4gICAgICAgIG92ZXJzaG9vdFRvbGVyYW5jZSA9ICFpc05hTih2YXJzLm92ZXJzaG9vdFRvbGVyYW5jZSkgPyB2YXJzLm92ZXJzaG9vdFRvbGVyYW5jZSA6IHZhcnMuZWRnZVJlc2lzdGFuY2UgPT09IDEgPyAwIDogMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2UgKyAwLjI7XG5cbiAgICAgICAgaWYgKCFpbmVydGlhLmR1cmF0aW9uKSB7XG4gICAgICAgICAgaW5lcnRpYS5kdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1heDogTWF0aC5tYXgodmFycy5taW5EdXJhdGlvbiB8fCAwLCBcIm1heER1cmF0aW9uXCIgaW4gdmFycyA/IHZhcnMubWF4RHVyYXRpb24gOiAyKSxcbiAgICAgICAgICAgIG1pbjogIWlzTmFOKHZhcnMubWluRHVyYXRpb24pID8gdmFycy5taW5EdXJhdGlvbiA6IG92ZXJzaG9vdFRvbGVyYW5jZSA9PT0gMCB8fCBfaXNPYmplY3QoaW5lcnRpYSkgJiYgaW5lcnRpYS5yZXNpc3RhbmNlID4gMTAwMCA/IDAgOiAwLjUsXG4gICAgICAgICAgICBvdmVyc2hvb3Q6IG92ZXJzaG9vdFRvbGVyYW5jZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnR3ZWVuID0gdHdlZW4gPSBnc2FwLnRvKHNjcm9sbFByb3h5IHx8IHRhcmdldCwge1xuICAgICAgICAgIGluZXJ0aWE6IGluZXJ0aWEsXG4gICAgICAgICAgZGF0YTogXCJfZHJhZ2dhYmxlXCIsXG4gICAgICAgICAgaW5oZXJpdDogZmFsc2UsXG4gICAgICAgICAgb25Db21wbGV0ZTogb25UaHJvd0NvbXBsZXRlLFxuICAgICAgICAgIG9uSW50ZXJydXB0OiBvblRocm93SW50ZXJydXB0LFxuICAgICAgICAgIG9uVXBkYXRlOiB2YXJzLmZhc3RNb2RlID8gX2Rpc3BhdGNoRXZlbnQgOiBzeW5jWFksXG4gICAgICAgICAgb25VcGRhdGVQYXJhbXM6IHZhcnMuZmFzdE1vZGUgPyBbc2VsZiwgXCJvbnRocm93dXBkYXRlXCIsIFwib25UaHJvd1VwZGF0ZVwiXSA6IHNuYXAgJiYgc25hcC5yYWRpdXMgPyBbZmFsc2UsIHRydWVdIDogW11cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF2YXJzLmZhc3RNb2RlKSB7XG4gICAgICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgICAgICBzY3JvbGxQcm94eS5fc2tpcCA9IHRydWU7IC8vIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgYnVnIHRoYXQgY2F1c2VzIHRoZW0gdG8gYnJpZWZseSByZW5kZXIgdGhlIHBvc2l0aW9uIGluY29ycmVjdGx5IChpdCBmbGFzaGVzIHRvIHRoZSBlbmQgc3RhdGUgd2hlbiB3ZSBzZWVrKCkgdGhlIHR3ZWVuIGV2ZW4gdGhvdWdoIHdlIGp1bXAgcmlnaHQgYmFjayB0byB0aGUgY3VycmVudCBwb3NpdGlvbiwgYW5kIHRoaXMgb25seSBzZWVtcyB0byBoYXBwZW4gd2hlbiB3ZSdyZSBhZmZlY3RpbmcgYm90aCB0b3AgYW5kIGxlZnQpLCBzbyB3ZSBzZXQgYSBfc3VzcGVuZFRyYW5zZm9ybXMgZmxhZyB0byBwcmV2ZW50IGl0IGZyb20gYWN0dWFsbHkgYXBwbHlpbmcgdGhlIHZhbHVlcyBpbiB0aGUgU2Nyb2xsUHJveHkuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHdlZW4ucmVuZGVyKDFlOSwgdHJ1ZSwgdHJ1ZSk7IC8vIGZvcmNlIHRvIHRoZSBlbmQuIFJlbWVtYmVyLCB0aGUgZHVyYXRpb24gd2lsbCBsaWtlbHkgY2hhbmdlIHVwb24gaW5pdHRpbmcgYmVjYXVzZSB0aGF0J3Mgd2hlbiBJbmVydGlhUGx1Z2luIGNhbGN1bGF0ZXMgaXQuXG5cbiAgICAgICAgICBzeW5jWFkodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc2VsZi5lbmRYID0gc2VsZi54O1xuICAgICAgICAgIHNlbGYuZW5kWSA9IHNlbGYueTtcblxuICAgICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgIHNlbGYuZW5kUm90YXRpb24gPSBzZWxmLng7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdHdlZW4ucGxheSgwKTtcbiAgICAgICAgICBzeW5jWFkodHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoc2Nyb2xsUHJveHkpIHtcbiAgICAgICAgICAgIHNjcm9sbFByb3h5Ll9za2lwID0gZmFsc2U7IC8vTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBidWcgdGhhdCBjYXVzZXMgdGhlbSB0byBicmllZmx5IHJlbmRlciB0aGUgcG9zaXRpb24gaW5jb3JyZWN0bHkgKGl0IGZsYXNoZXMgdG8gdGhlIGVuZCBzdGF0ZSB3aGVuIHdlIHNlZWsoKSB0aGUgdHdlZW4gZXZlbiB0aG91Z2ggd2UganVtcCByaWdodCBiYWNrIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uLCBhbmQgdGhpcyBvbmx5IHNlZW1zIHRvIGhhcHBlbiB3aGVuIHdlJ3JlIGFmZmVjdGluZyBib3RoIHRvcCBhbmQgbGVmdCksIHNvIHdlIHNldCBhIF9zdXNwZW5kVHJhbnNmb3JtcyBmbGFnIHRvIHByZXZlbnQgaXQgZnJvbSBhY3R1YWxseSBhcHBseWluZyB0aGUgdmFsdWVzIGluIHRoZSBTY3JvbGxQcm94eS5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzQm91bmRzKSB7XG4gICAgICAgIHNlbGYuYXBwbHlCb3VuZHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICAgICB1cGRhdGVNYXRyaXggPSBmdW5jdGlvbiB1cGRhdGVNYXRyaXgoc2hpZnRTdGFydCkge1xuICAgICAgdmFyIHN0YXJ0ID0gbWF0cml4LFxuICAgICAgICAgIHA7XG4gICAgICBtYXRyaXggPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0LnBhcmVudE5vZGUsIHRydWUpO1xuXG4gICAgICBpZiAoc2hpZnRTdGFydCAmJiBzZWxmLmlzUHJlc3NlZCAmJiAhbWF0cml4LmVxdWFscyhzdGFydCB8fCBuZXcgTWF0cml4MkQoKSkpIHtcbiAgICAgICAgLy9pZiB0aGUgbWF0cml4IGNoYW5nZXMgV0hJTEUgdGhlIGVsZW1lbnQgaXMgcHJlc3NlZCwgd2UgbXVzdCBhZGp1c3QgdGhlIHN0YXJ0UG9pbnRlclggYW5kIHN0YXJ0UG9pbnRlclkgYWNjb3JkaW5nbHksIHNvIHdlIGludmVydCB0aGUgb3JpZ2luYWwgbWF0cml4IGFuZCBmaWd1cmUgb3V0IHdoZXJlIHRoZSBwb2ludGVyWCBhbmQgcG9pbnRlclkgd2VyZSBpbiB0aGUgZ2xvYmFsIHNwYWNlLCB0aGVuIGFwcGx5IHRoZSBuZXcgbWF0cml4IHRvIGdldCB0aGUgdXBkYXRlZCBjb29yZGluYXRlcy5cbiAgICAgICAgcCA9IHN0YXJ0LmludmVyc2UoKS5hcHBseSh7XG4gICAgICAgICAgeDogc3RhcnRQb2ludGVyWCxcbiAgICAgICAgICB5OiBzdGFydFBvaW50ZXJZXG4gICAgICAgIH0pO1xuICAgICAgICBtYXRyaXguYXBwbHkocCwgcCk7XG4gICAgICAgIHN0YXJ0UG9pbnRlclggPSBwLng7XG4gICAgICAgIHN0YXJ0UG9pbnRlclkgPSBwLnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRyaXguZXF1YWxzKF9pZGVudGl0eU1hdHJpeCkpIHtcbiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gdHJhbnNmb3Jtcywgd2UgY2FuIG9wdGltaXplIHBlcmZvcm1hbmNlIGJ5IG5vdCBmYWN0b3JpbmcgaW4gdGhlIG1hdHJpeFxuICAgICAgICBtYXRyaXggPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgICAgIHJlY29yZFN0YXJ0UG9zaXRpb25zID0gZnVuY3Rpb24gcmVjb3JkU3RhcnRQb3NpdGlvbnMoKSB7XG4gICAgICB2YXIgZWRnZVRvbGVyYW5jZSA9IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgIG9mZnNldFggPSBpc0ZpeGVkID8gX2dldERvY1Njcm9sbExlZnQob3duZXJEb2MpIDogMCxcbiAgICAgICAgICBvZmZzZXRZID0gaXNGaXhlZCA/IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpIDogMCxcbiAgICAgICAgICBwYXJzZWRPcmlnaW4sXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5O1xuXG4gICAgICBpZiAoeHlNb2RlKSB7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIHVzZXIgc2V0IGl0IGFzIGEgZGlmZmVyZW50IHVuaXQsIGxpa2UgYW5pbWF0aW5nIHRoZSB4IHRvIFwiMTAwJVwiLiBXZSBtdXN0IGNvbnZlcnQgaXQgYmFjayB0byBweCFcbiAgICAgICAgZ3NDYWNoZS54ID0gZ2V0UHJvcEFzTnVtKHhQcm9wLCBcInB4XCIpICsgXCJweFwiO1xuICAgICAgICBnc0NhY2hlLnkgPSBnZXRQcm9wQXNOdW0oeVByb3AsIFwicHhcIikgKyBcInB4XCI7XG4gICAgICAgIGdzQ2FjaGUucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZU1hdHJpeChmYWxzZSk7XG4gICAgICBfcG9pbnQxLnggPSBzZWxmLnBvaW50ZXJYIC0gb2Zmc2V0WDtcbiAgICAgIF9wb2ludDEueSA9IHNlbGYucG9pbnRlclkgLSBvZmZzZXRZO1xuICAgICAgbWF0cml4ICYmIG1hdHJpeC5hcHBseShfcG9pbnQxLCBfcG9pbnQxKTtcbiAgICAgIHN0YXJ0UG9pbnRlclggPSBfcG9pbnQxLng7IC8vdHJhbnNsYXRlIHRvIGxvY2FsIGNvb3JkaW5hdGUgc3lzdGVtXG5cbiAgICAgIHN0YXJ0UG9pbnRlclkgPSBfcG9pbnQxLnk7XG5cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICBzZXRQb2ludGVyUG9zaXRpb24oc2VsZi5wb2ludGVyWCwgc2VsZi5wb2ludGVyWSk7XG4gICAgICAgIHJlbmRlcih0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaW5uZXJNYXRyaXggPSBnZXRHbG9iYWxNYXRyaXgodGFyZ2V0KTtcblxuICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgIGNhbGN1bGF0ZUJvdW5kcygpO1xuICAgICAgICBzdGFydEVsZW1lbnRZID0gc2Nyb2xsUHJveHkudG9wKCk7XG4gICAgICAgIHN0YXJ0RWxlbWVudFggPSBzY3JvbGxQcm94eS5sZWZ0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2lmIHRoZSBlbGVtZW50IGlzIGluIHRoZSBwcm9jZXNzIG9mIHR3ZWVuaW5nLCBkb24ndCBmb3JjZSBzbmFwcGluZyB0byBvY2N1ciBiZWNhdXNlIGl0IGNvdWxkIG1ha2UgaXQganVtcC4gSW1hZ2luZSB0aGUgdXNlciB0aHJvd2luZywgdGhlbiBiZWZvcmUgaXQncyBkb25lLCBjbGlja2luZyBvbiB0aGUgZWxlbWVudCBpbiBpdHMgaW5iZXR3ZWVuIHN0YXRlLlxuICAgICAgICBpZiAoaXNUd2VlbmluZygpKSB7XG4gICAgICAgICAgc3luY1hZKHRydWUsIHRydWUpO1xuICAgICAgICAgIGNhbGN1bGF0ZUJvdW5kcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuYXBwbHlCb3VuZHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICBwYXJzZWRPcmlnaW4gPSB0YXJnZXQub3duZXJTVkdFbGVtZW50ID8gW2dzQ2FjaGUueE9yaWdpbiAtIHRhcmdldC5nZXRCQm94KCkueCwgZ3NDYWNoZS55T3JpZ2luIC0gdGFyZ2V0LmdldEJCb3goKS55XSA6IChfZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpW190cmFuc2Zvcm1PcmlnaW5Qcm9wXSB8fCBcIjAgMFwiKS5zcGxpdChcIiBcIik7XG4gICAgICAgICAgcm90YXRpb25PcmlnaW4gPSBzZWxmLnJvdGF0aW9uT3JpZ2luID0gZ2V0R2xvYmFsTWF0cml4KHRhcmdldCkuYXBwbHkoe1xuICAgICAgICAgICAgeDogcGFyc2VGbG9hdChwYXJzZWRPcmlnaW5bMF0pIHx8IDAsXG4gICAgICAgICAgICB5OiBwYXJzZUZsb2F0KHBhcnNlZE9yaWdpblsxXSkgfHwgMFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN5bmNYWSh0cnVlLCB0cnVlKTtcbiAgICAgICAgICB4ID0gc2VsZi5wb2ludGVyWCAtIHJvdGF0aW9uT3JpZ2luLnggLSBvZmZzZXRYO1xuICAgICAgICAgIHkgPSByb3RhdGlvbk9yaWdpbi55IC0gc2VsZi5wb2ludGVyWSArIG9mZnNldFk7XG4gICAgICAgICAgc3RhcnRFbGVtZW50WCA9IHNlbGYueDsgLy9zdGFydGluZyByb3RhdGlvbiAoeCBhbHdheXMgcmVmZXJzIHRvIHJvdGF0aW9uIGluIHR5cGU6XCJyb3RhdGlvblwiLCBtZWFzdXJlZCBpbiBkZWdyZWVzKVxuXG4gICAgICAgICAgc3RhcnRFbGVtZW50WSA9IHNlbGYueSA9IE1hdGguYXRhbjIoeSwgeCkgKiBfUkFEMkRFRztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL3BhcmVudCA9ICFpc0ZpeGVkICYmIHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgIC8vc3RhcnRTY3JvbGxUb3AgPSBwYXJlbnQgPyBwYXJlbnQuc2Nyb2xsVG9wIHx8IDAgOiAwO1xuICAgICAgICAgIC8vc3RhcnRTY3JvbGxMZWZ0ID0gcGFyZW50ID8gcGFyZW50LnNjcm9sbExlZnQgfHwgMCA6IDA7XG4gICAgICAgICAgc3RhcnRFbGVtZW50WSA9IGdldFByb3BBc051bSh5UHJvcCwgXCJweFwiKTsgLy9yZWNvcmQgdGhlIHN0YXJ0aW5nIHRvcCBhbmQgbGVmdCB2YWx1ZXMgc28gdGhhdCB3ZSBjYW4ganVzdCBhZGQgdGhlIG1vdXNlJ3MgbW92ZW1lbnQgdG8gdGhlbSBsYXRlci5cblxuICAgICAgICAgIHN0YXJ0RWxlbWVudFggPSBnZXRQcm9wQXNOdW0oeFByb3AsIFwicHhcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGhhc0JvdW5kcyAmJiBlZGdlVG9sZXJhbmNlKSB7XG4gICAgICAgIGlmIChzdGFydEVsZW1lbnRYID4gbWF4WCkge1xuICAgICAgICAgIHN0YXJ0RWxlbWVudFggPSBtYXhYICsgKHN0YXJ0RWxlbWVudFggLSBtYXhYKSAvIGVkZ2VUb2xlcmFuY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRFbGVtZW50WCA8IG1pblgpIHtcbiAgICAgICAgICBzdGFydEVsZW1lbnRYID0gbWluWCAtIChtaW5YIC0gc3RhcnRFbGVtZW50WCkgLyBlZGdlVG9sZXJhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICBpZiAoc3RhcnRFbGVtZW50WSA+IG1heFkpIHtcbiAgICAgICAgICAgIHN0YXJ0RWxlbWVudFkgPSBtYXhZICsgKHN0YXJ0RWxlbWVudFkgLSBtYXhZKSAvIGVkZ2VUb2xlcmFuY2U7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFydEVsZW1lbnRZIDwgbWluWSkge1xuICAgICAgICAgICAgc3RhcnRFbGVtZW50WSA9IG1pblkgLSAobWluWSAtIHN0YXJ0RWxlbWVudFkpIC8gZWRnZVRvbGVyYW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5zdGFydFggPSBzdGFydEVsZW1lbnRYID0gX3JvdW5kKHN0YXJ0RWxlbWVudFgpO1xuICAgICAgc2VsZi5zdGFydFkgPSBzdGFydEVsZW1lbnRZID0gX3JvdW5kKHN0YXJ0RWxlbWVudFkpO1xuICAgIH0sXG4gICAgICAgIGlzVHdlZW5pbmcgPSBmdW5jdGlvbiBpc1R3ZWVuaW5nKCkge1xuICAgICAgcmV0dXJuIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5pc0FjdGl2ZSgpO1xuICAgIH0sXG4gICAgICAgIHJlbW92ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gcmVtb3ZlUGxhY2Vob2xkZXIoKSB7XG4gICAgICBpZiAoX3BsYWNlaG9sZGVyRGl2LnBhcmVudE5vZGUgJiYgIWlzVHdlZW5pbmcoKSAmJiAhc2VsZi5pc0RyYWdnaW5nKSB7XG4gICAgICAgIC8vX3BsYWNlaG9sZGVyRGl2IGp1c3QgcHJvcHMgb3BlbiBhdXRvLXNjcm9sbGluZyBjb250YWluZXJzIHNvIHRoZXkgZG9uJ3QgY29sbGFwc2UgYXMgdGhlIHVzZXIgZHJhZ3MgbGVmdC91cC4gV2UgcmVtb3ZlIGl0IGFmdGVyIGRyYWdnaW5nIChhbmQgdGhyb3dpbmcsIGlmIG5lY2Vzc2FyeSkgZmluaXNoZXMuXG4gICAgICAgIF9wbGFjZWhvbGRlckRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF9wbGFjZWhvbGRlckRpdik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgLy9jYWxsZWQgd2hlbiB0aGUgbW91c2UgaXMgcHJlc3NlZCAob3IgdG91Y2ggc3RhcnRzKVxuICAgIG9uUHJlc3MgPSBmdW5jdGlvbiBvblByZXNzKGUsIGZvcmNlKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgaWYgKCFlbmFibGVkIHx8IHNlbGYuaXNQcmVzc2VkIHx8ICFlIHx8IChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIgfHwgZS50eXBlID09PSBcInBvaW50ZXJkb3duXCIpICYmICFmb3JjZSAmJiBfZ2V0VGltZSgpIC0gY2xpY2tUaW1lIDwgMzAgJiYgX3RvdWNoRXZlbnRMb29rdXBbc2VsZi5wb2ludGVyRXZlbnQudHlwZV0pIHtcbiAgICAgICAgLy93aGVuIHdlIERPTidUIHByZXZlbnREZWZhdWx0KCkgaW4gb3JkZXIgdG8gYWNjb21tb2RhdGUgdG91Y2gtc2Nyb2xsaW5nIGFuZCB0aGUgdXNlciBqdXN0IHRhcHMsIG1hbnkgYnJvd3NlcnMgYWxzbyBmaXJlIGEgbW91c2Vkb3duL21vdXNldXAgc2VxdWVuY2UgQUZURVIgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgc2VxdWVuY2UsIHRodXMgaXQnZCByZXN1bHQgaW4gdHdvIHF1aWNrIFwiY2xpY2tcIiBldmVudHMgYmVpbmcgZGlzcGF0Y2hlZC4gVGhpcyBsaW5lIHNlbnNlcyB0aGF0IGNvbmRpdGlvbiBhbmQgaGFsdHMgaXQgb24gdGhlIHN1YnNlcXVlbnQgbW91c2Vkb3duLlxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ICYmIGUgJiYgZW5hYmxlZCAmJiBfcHJldmVudERlZmF1bHQoZSk7IC8vIGluIHNvbWUgYnJvd3NlcnMsIHdlIG11c3QgbGlzdGVuIGZvciBtdWx0aXBsZSBldmVudCB0eXBlcyBsaWtlIHRvdWNoc3RhcnQsIHBvaW50ZXJkb3duLCBtb3VzZWRvd24uIFRoZSBmaXJzdCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB3ZSByZWNvcmQgd2hldGhlciBvciBub3Qgd2UgX3ByZXZlbnREZWZhdWx0KCkgc28gdGhhdCBvbiBkdXBsaWNhdGUgY2FsbHMsIHdlIGNhbiBkbyB0aGUgc2FtZSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpbnRlcnJ1cHRlZCA9IGlzVHdlZW5pbmcoKTtcbiAgICAgIGRyYWdnZWQgPSBmYWxzZTsgLy8gd2UgbmVlZCB0byB0cmFjayB3aGV0aGVyIG9yIG5vdCBpdCB3YXMgZHJhZ2dlZCBpbiB0aGlzIGludGVyYWN0aW9uIHNvIHRoYXQgaWYsIGZvciBleGFtcGxlLCB0aGUgdXNlciBjYWxscyAuZW5kRHJhZygpIHRvIEZPUkNFIGl0IHRvIHN0b3AgYW5kIHRoZW4gdGhleSBrZWVwIHRoZSBtb3VzZSBwcmVzc2VkIGRvd24gYW5kIGV2ZW50dWFsbHkgcmVsZWFzZSwgdGhhdCB3b3VsZCBub3JtYWxseSBjYXVzZSBhbiBvbkNsaWNrIGJ1dCB3ZSBoYXZlIHRvIHNraXAgaXQgaW4gdGhhdCBjYXNlIGlmIHRoZXJlIHdhcyBkcmFnZ2luZyB0aGF0IG9jY3VycmVkLlxuXG4gICAgICBzZWxmLnBvaW50ZXJFdmVudCA9IGU7XG5cbiAgICAgIGlmIChfdG91Y2hFdmVudExvb2t1cFtlLnR5cGVdKSB7XG4gICAgICAgIC8vbm90ZTogb24gaU9TLCBCT1RIIHRvdWNobW92ZSBhbmQgbW91c2Vtb3ZlIGFyZSBkaXNwYXRjaGVkLCBidXQgdGhlIG1vdXNlbW92ZSBoYXMgcGFnZVkgYW5kIHBhZ2VYIG9mIDAgd2hpY2ggd291bGQgbWVzcyB1cCB0aGUgY2FsY3VsYXRpb25zIGFuZCBuZWVkbGVzc2x5IGh1cnQgcGVyZm9ybWFuY2UuXG4gICAgICAgIHRvdWNoRXZlbnRUYXJnZXQgPSB+ZS50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA/IGUuY3VycmVudFRhcmdldCB8fCBlLnRhcmdldCA6IG93bmVyRG9jOyAvL3BvaW50ZXItYmFzZWQgdG91Y2hlcyAoZm9yIE1pY3Jvc29mdCBicm93c2VycykgZG9uJ3QgcmVtYWluIGxvY2tlZCB0byB0aGUgb3JpZ2luYWwgdGFyZ2V0IGxpa2Ugb3RoZXIgYnJvd3NlcnMsIHNvIHdlIG11c3QgdXNlIHRoZSBkb2N1bWVudCBpbnN0ZWFkLiBUaGUgZXZlbnQgdHlwZSB3b3VsZCBiZSBcIk1TUG9pbnRlckRvd25cIiBvciBcInBvaW50ZXJkb3duXCIuXG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hlbmRcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIodG91Y2hFdmVudFRhcmdldCwgXCJ0b3VjaG1vdmVcIiwgb25Nb3ZlKTsgLy8gcG9zc2libGUgZnV0dXJlIGNoYW5nZSBpZiBQb2ludGVyRXZlbnRzIGFyZSBtb3JlIHN0YW5kYXJkaXplZDogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvc2V0UG9pbnRlckNhcHR1cmVcblxuXG4gICAgICAgIF9hZGRMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoY2FuY2VsXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKG93bmVyRG9jLCBcInRvdWNoc3RhcnRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvdWNoRXZlbnRUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJtb3VzZW1vdmVcIiwgb25Nb3ZlKTsgLy9hdHRhY2ggdGhlc2UgdG8gdGhlIGRvY3VtZW50IGluc3RlYWQgb2YgdGhlIGJveCBpdHNlbGYgc28gdGhhdCBpZiB0aGUgdXNlcidzIG1vdXNlIG1vdmVzIHRvbyBxdWlja2x5IChhbmQgb2ZmIG9mIHRoZSBib3gpLCB0aGluZ3Mgc3RpbGwgd29yay5cblxuICAgICAgfVxuXG4gICAgICB0b3VjaERyYWdBeGlzID0gbnVsbDtcblxuICAgICAgaWYgKCFfc3VwcG9ydHNQb2ludGVyIHx8ICF0b3VjaEV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIF9hZGRMaXN0ZW5lcihvd25lckRvYywgXCJtb3VzZXVwXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgZSAmJiBlLnRhcmdldCAmJiBfYWRkTGlzdGVuZXIoZS50YXJnZXQsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpOyAvL3dlIGFsc28gaGF2ZSB0byBsaXN0ZW4gZGlyZWN0bHkgb24gdGhlIGVsZW1lbnQgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRvbid0IGJ1YmJsZSB1cCB0aGUgZXZlbnQgdG8gdGhlIF9kb2Mgb24gZWxlbWVudHMgd2l0aCBjb250ZW50RWRpdGFibGU9XCJ0cnVlXCJcbiAgICAgIH1cblxuICAgICAgaXNDbGlja2luZyA9IGlzQ2xpY2thYmxlLmNhbGwoc2VsZiwgZS50YXJnZXQpICYmIHZhcnMuZHJhZ0NsaWNrYWJsZXMgPT09IGZhbHNlICYmICFmb3JjZTtcblxuICAgICAgaWYgKGlzQ2xpY2tpbmcpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKGUudGFyZ2V0LCBcImNoYW5nZVwiLCBvblJlbGVhc2UpOyAvL2luIHNvbWUgYnJvd3NlcnMsIHdoZW4geW91IG1vdXNlZG93biBvbiBhIDxzZWxlY3Q+IGVsZW1lbnQsIG5vIG1vdXNldXAgZ2V0cyBkaXNwYXRjaGVkISBTbyB3ZSBsaXN0ZW4gZm9yIGEgXCJjaGFuZ2VcIiBldmVudCBpbnN0ZWFkLlxuXG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJwcmVzc0luaXRcIiwgXCJvblByZXNzSW5pdFwiKTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInByZXNzXCIsIFwib25QcmVzc1wiKTtcblxuICAgICAgICBfc2V0U2VsZWN0YWJsZSh0cmlnZ2VycywgdHJ1ZSk7IC8vYWNjb21tb2RhdGVzIHRoaW5ncyBsaWtlIGlucHV0cyBhbmQgZWxlbWVudHMgd2l0aCBjb250ZW50RWRpdGFibGU9XCJ0cnVlXCIgKG90aGVyd2lzZSB1c2VyIGNvdWxkbid0IGRyYWcgdG8gc2VsZWN0IHRleHQpXG5cblxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9ICF0b3VjaEV2ZW50VGFyZ2V0IHx8IGFsbG93WCA9PT0gYWxsb3dZIHx8IHNlbGYudmFycy5hbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nID09PSBmYWxzZSB8fCBzZWxmLnZhcnMuYWxsb3dDb250ZXh0TWVudSAmJiBlICYmIChlLmN0cmxLZXkgfHwgZS53aGljaCA+IDIpID8gZmFsc2UgOiBhbGxvd1ggPyBcInlcIiA6IFwieFwiOyAvL25vdGU6IGluIENocm9tZSwgcmlnaHQtY2xpY2tpbmcgKGZvciBhIGNvbnRleHQgbWVudSkgZmlyZXMgb25QcmVzcyBhbmQgaXQgZG9lc24ndCBoYXZlIHRoZSBldmVudC53aGljaCBzZXQgcHJvcGVybHksIHNvIHdlIG11c3QgbG9vayBmb3IgZXZlbnQuY3RybEtleS4gSWYgdGhlIHVzZXIgd2FudHMgdG8gYWxsb3cgY29udGV4dCBtZW51cyB3ZSBzaG91bGQgb2YgY291cnNlIHNlbnNlIGl0IGhlcmUgYW5kIG5vdCBhbGxvdyBuYXRpdmUgdG91Y2ggc2Nyb2xsaW5nLlxuXG4gICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gIWFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgJiYgIXNlbGYuYWxsb3dFdmVudERlZmF1bHQ7XG5cbiAgICAgIGlmIChpc1ByZXZlbnRpbmdEZWZhdWx0KSB7XG4gICAgICAgIF9wcmV2ZW50RGVmYXVsdChlKTtcblxuICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ0b3VjaGZvcmNlY2hhbmdlXCIsIF9wcmV2ZW50RGVmYXVsdCk7IC8vd29ya3MgYXJvdW5kIHNhZmFyaSBidWc6IGh0dHBzOi8vZ3NhcC5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIC8vdG91Y2ggZXZlbnRzIHN0b3JlIHRoZSBkYXRhIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gICAgICAgIGUgPSB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIHRvdWNoSUQgPSBlLmlkZW50aWZpZXI7XG4gICAgICB9IGVsc2UgaWYgKGUucG9pbnRlcklkKSB7XG4gICAgICAgIHRvdWNoSUQgPSBlLnBvaW50ZXJJZDsgLy9mb3Igc29tZSBNaWNyb3NvZnQgYnJvd3NlcnNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvdWNoID0gdG91Y2hJRCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIF9kcmFnQ291bnQrKztcblxuICAgICAgX2FkZFRvUmVuZGVyUXVldWUocmVuZGVyKTsgLy9jYXVzZXMgdGhlIERyYWdnYWJsZSB0byByZW5kZXIgb24gZWFjaCBcInRpY2tcIiBvZiBnc2FwLnRpY2tlciAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIC0gdXBkYXRpbmcgdmFsdWVzIGluIGEgbW91c2Vtb3ZlIGNhbiBjYXVzZSB0aGVtIHRvIGhhcHBlbiB0b28gZnJlcXVlbnRseSwgbGlrZSBtdWx0aXBsZSB0aW1lcyBiZXR3ZWVuIGZyYW1lIHJlZHJhd3Mgd2hpY2ggaXMgd2FzdGVmdWwsIGFuZCBpdCBhbHNvIHByZXZlbnRzIHZhbHVlcyBmcm9tIHVwZGF0aW5nIHByb3Blcmx5IGluIElFOClcblxuXG4gICAgICBzdGFydFBvaW50ZXJZID0gc2VsZi5wb2ludGVyWSA9IGUucGFnZVk7IC8vcmVjb3JkIHRoZSBzdGFydGluZyB4IGFuZCB5IHNvIHRoYXQgd2UgY2FuIGNhbGN1bGF0ZSB0aGUgbW92ZW1lbnQgZnJvbSB0aGUgb3JpZ2luYWwgaW4gX29uTW91c2VNb3ZlXG5cbiAgICAgIHN0YXJ0UG9pbnRlclggPSBzZWxmLnBvaW50ZXJYID0gZS5wYWdlWDtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJwcmVzc0luaXRcIiwgXCJvblByZXNzSW5pdFwiKTtcblxuICAgICAgaWYgKGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgfHwgc2VsZi5hdXRvU2Nyb2xsKSB7XG4gICAgICAgIF9yZWNvcmRNYXhTY3JvbGxzKHRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldC5wYXJlbnROb2RlICYmIHNlbGYuYXV0b1Njcm9sbCAmJiAhc2Nyb2xsUHJveHkgJiYgIXJvdGF0aW9uTW9kZSAmJiB0YXJnZXQucGFyZW50Tm9kZS5fZ3NNYXhTY3JvbGxYICYmICFfcGxhY2Vob2xkZXJEaXYucGFyZW50Tm9kZSAmJiAhdGFyZ2V0LmdldEJCb3gpIHtcbiAgICAgICAgLy9hZGQgYSBwbGFjZWhvbGRlciBkaXYgdG8gcHJldmVudCB0aGUgcGFyZW50IGNvbnRhaW5lciBmcm9tIGNvbGxhcHNpbmcgd2hlbiB0aGUgdXNlciBkcmFncyB0aGUgZWxlbWVudCBsZWZ0LlxuICAgICAgICBfcGxhY2Vob2xkZXJEaXYuc3R5bGUud2lkdGggPSB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxXaWR0aCArIFwicHhcIjtcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoX3BsYWNlaG9sZGVyRGl2KTtcbiAgICAgIH1cblxuICAgICAgcmVjb3JkU3RhcnRQb3NpdGlvbnMoKTtcbiAgICAgIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5raWxsKCk7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcbiAgICAgIGdzYXAua2lsbFR3ZWVuc09mKHNjcm9sbFByb3h5IHx8IHRhcmdldCwga2lsbFByb3BzLCB0cnVlKTsgLy9pbiBjYXNlIHRoZSB1c2VyIHRyaWVzIHRvIGRyYWcgaXQgYmVmb3JlIHRoZSBsYXN0IHR3ZWVuIGlzIGRvbmUuXG5cbiAgICAgIHNjcm9sbFByb3h5ICYmIGdzYXAua2lsbFR3ZWVuc09mKHRhcmdldCwge1xuICAgICAgICBzY3JvbGxUbzogMVxuICAgICAgfSwgdHJ1ZSk7IC8vanVzdCBpbiBjYXNlIHRoZSBvcmlnaW5hbCB0YXJnZXQncyBzY3JvbGwgcG9zaXRpb24gaXMgYmVpbmcgdHdlZW5lZCBzb21ld2hlcmUgZWxzZS5cblxuICAgICAgc2VsZi50d2VlbiA9IHNlbGYubG9ja2VkQXhpcyA9IG51bGw7XG5cbiAgICAgIGlmICh2YXJzLnpJbmRleEJvb3N0IHx8ICFyb3RhdGlvbk1vZGUgJiYgIXNjcm9sbFByb3h5ICYmIHZhcnMuekluZGV4Qm9vc3QgIT09IGZhbHNlKSB7XG4gICAgICAgIHRhcmdldC5zdHlsZS56SW5kZXggPSBEcmFnZ2FibGUuekluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIHNlbGYuaXNQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIGhhc0RyYWdDYWxsYmFjayA9ICEhKHZhcnMub25EcmFnIHx8IHNlbGYuX2xpc3RlbmVycy5kcmFnKTtcbiAgICAgIGhhc01vdmVDYWxsYmFjayA9ICEhKHZhcnMub25Nb3ZlIHx8IHNlbGYuX2xpc3RlbmVycy5tb3ZlKTtcblxuICAgICAgaWYgKHZhcnMuY3Vyc29yICE9PSBmYWxzZSB8fCB2YXJzLmFjdGl2ZUN1cnNvcikge1xuICAgICAgICBpID0gdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICAgIGdzYXAuc2V0KHRyaWdnZXJzW2ldLCB7XG4gICAgICAgICAgICBjdXJzb3I6IHZhcnMuYWN0aXZlQ3Vyc29yIHx8IHZhcnMuY3Vyc29yIHx8IChfZGVmYXVsdEN1cnNvciA9PT0gXCJncmFiXCIgPyBcImdyYWJiaW5nXCIgOiBfZGVmYXVsdEN1cnNvcilcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInByZXNzXCIsIFwib25QcmVzc1wiKTtcbiAgICB9LFxuICAgICAgICAvL2NhbGxlZCBldmVyeSB0aW1lIHRoZSBtb3VzZS90b3VjaCBtb3Zlc1xuICAgIG9uTW92ZSA9IGZ1bmN0aW9uIG9uTW92ZShlKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGUsXG4gICAgICAgICAgdG91Y2hlcyxcbiAgICAgICAgICBwb2ludGVyWCxcbiAgICAgICAgICBwb2ludGVyWSxcbiAgICAgICAgICBpLFxuICAgICAgICAgIGR4LFxuICAgICAgICAgIGR5O1xuXG4gICAgICBpZiAoIWVuYWJsZWQgfHwgX2lzTXVsdGlUb3VjaGluZyB8fCAhc2VsZi5pc1ByZXNzZWQgfHwgIWUpIHtcbiAgICAgICAgaXNQcmV2ZW50aW5nRGVmYXVsdCAmJiBlICYmIGVuYWJsZWQgJiYgX3ByZXZlbnREZWZhdWx0KGUpOyAvLyBpbiBzb21lIGJyb3dzZXJzLCB3ZSBtdXN0IGxpc3RlbiBmb3IgbXVsdGlwbGUgZXZlbnQgdHlwZXMgbGlrZSB0b3VjaG1vdmUsIHBvaW50ZXJtb3ZlLCBtb3VzZW1vdmUuIFRoZSBmaXJzdCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB3ZSByZWNvcmQgd2hldGhlciBvciBub3Qgd2UgX3ByZXZlbnREZWZhdWx0KCkgc28gdGhhdCBvbiBkdXBsaWNhdGUgY2FsbHMsIHdlIGNhbiBkbyB0aGUgc2FtZSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnBvaW50ZXJFdmVudCA9IGU7XG4gICAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgLy90b3VjaCBldmVudHMgc3RvcmUgdGhlIGRhdGEgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgICAgICAgZSA9IHRvdWNoZXNbMF07XG5cbiAgICAgICAgaWYgKGUgIT09IHRvdWNoICYmIGUuaWRlbnRpZmllciAhPT0gdG91Y2hJRCkge1xuICAgICAgICAgIC8vVXN1YWxseSBjaGFuZ2VkVG91Y2hlc1swXSB3aWxsIGJlIHdoYXQgd2UncmUgbG9va2luZyBmb3IsIGJ1dCBpbiBjYXNlIGl0J3Mgbm90LCBsb29rIHRocm91Z2ggdGhlIHJlc3Qgb2YgdGhlIGFycmF5Li4uKGFuZCBBbmRyb2lkIGJyb3dzZXJzIGRvbid0IHJldXNlIHRoZSBldmVudCBsaWtlIGlPUylcbiAgICAgICAgICBpID0gdG91Y2hlcy5sZW5ndGg7XG5cbiAgICAgICAgICB3aGlsZSAoLS1pID4gLTEgJiYgKGUgPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyICE9PSB0b3VjaElEICYmIGUudGFyZ2V0ICE9PSB0YXJnZXQpIHt9IC8vIFNvbWUgQW5kcm9pZCBkZXZpY2VzIGRpc3BhdGNoIGEgdG91Y2hzdGFydCBBTkQgcG9pbnRlcmRvd24gaW5pdGlhbGx5LCBhbmQgdGhlbiBvbmx5IHBvaW50ZXJtb3ZlIHRodXMgdGhlIHRvdWNoSUQgbWF5IG5vdCBtYXRjaCBiZWNhdXNlIGl0IHdhcyBncmFiYmVkIGZyb20gdGhlIHRvdWNoc3RhcnQgZXZlbnQgd2hlcmVhcyB0aGUgcG9pbnRlciBldmVudCBpcyB0aGUgb25lIHRoYXQgdGhlIGJyb3dzZXIgZGlzcGF0Y2hlcyBmb3IgbW92ZSwgc28gaWYgdGhlIGV2ZW50IHRhcmdldCBtYXRjaGVzIHRoaXMgRHJhZ2dhYmxlJ3MgdGFyZ2V0LCBsZXQgaXQgdGhyb3VnaC5cblxuXG4gICAgICAgICAgaWYgKGkgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUucG9pbnRlcklkICYmIHRvdWNoSUQgJiYgZS5wb2ludGVySWQgIT09IHRvdWNoSUQpIHtcbiAgICAgICAgLy9mb3Igc29tZSBNaWNyb3NvZnQgYnJvd3NlcnMsIHdlIG11c3QgYXR0YWNoIHRoZSBsaXN0ZW5lciB0byB0aGUgZG9jIHJhdGhlciB0aGFuIHRoZSB0cmlnZ2VyIHNvIHRoYXQgd2hlbiB0aGUgZmluZ2VyIG1vdmVzIG91dHNpZGUgdGhlIGJvdW5kcyBvZiB0aGUgdHJpZ2dlciwgdGhpbmdzIHN0aWxsIHdvcmsuIFNvIGlmIHRoZSBldmVudCB3ZSdyZSByZWNlaXZpbmcgaGFzIGEgcG9pbnRlcklkIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgdG91Y2hJRCwgaWdub3JlIGl0IChmb3IgbXVsdGktdG91Y2gpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRvdWNoRXZlbnRUYXJnZXQgJiYgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiAhdG91Y2hEcmFnQXhpcykge1xuICAgICAgICAvL0FuZHJvaWQgYnJvd3NlcnMgZm9yY2UgdXMgdG8gZGVjaWRlIG9uIHRoZSBmaXJzdCBcInRvdWNobW92ZVwiIGV2ZW50IGlmIHdlIHNob3VsZCBhbGxvdyB0aGUgZGVmYXVsdCAoc2Nyb2xsaW5nKSBiZWhhdmlvciBvciBwcmV2ZW50RGVmYXVsdCgpLiBPdGhlcndpc2UsIGEgXCJ0b3VjaGNhbmNlbFwiIHdpbGwgYmUgZmlyZWQgYW5kIHRoZW4gbm8gXCJ0b3VjaG1vdmVcIiBvciBcInRvdWNoZW5kXCIgd2lsbCBmaXJlIGR1cmluZyB0aGUgc2Nyb2xsaW5nIChubyBnb29kKS5cbiAgICAgICAgX3BvaW50MS54ID0gZS5wYWdlWCAtIChpc0ZpeGVkID8gX2dldERvY1Njcm9sbExlZnQob3duZXJEb2MpIDogMCk7XG4gICAgICAgIF9wb2ludDEueSA9IGUucGFnZVkgLSAoaXNGaXhlZCA/IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpIDogMCk7XG4gICAgICAgIG1hdHJpeCAmJiBtYXRyaXguYXBwbHkoX3BvaW50MSwgX3BvaW50MSk7XG4gICAgICAgIHBvaW50ZXJYID0gX3BvaW50MS54O1xuICAgICAgICBwb2ludGVyWSA9IF9wb2ludDEueTtcbiAgICAgICAgZHggPSBNYXRoLmFicyhwb2ludGVyWCAtIHN0YXJ0UG9pbnRlclgpO1xuICAgICAgICBkeSA9IE1hdGguYWJzKHBvaW50ZXJZIC0gc3RhcnRQb2ludGVyWSk7XG5cbiAgICAgICAgaWYgKGR4ICE9PSBkeSAmJiAoZHggPiBtaW5pbXVtTW92ZW1lbnQgfHwgZHkgPiBtaW5pbXVtTW92ZW1lbnQpIHx8IF9pc0FuZHJvaWQgJiYgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9PT0gdG91Y2hEcmFnQXhpcykge1xuICAgICAgICAgIHRvdWNoRHJhZ0F4aXMgPSBkeCA+IGR5ICYmIGFsbG93WCA/IFwieFwiIDogXCJ5XCI7XG5cbiAgICAgICAgICBpZiAoYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiB0b3VjaERyYWdBeGlzICE9PSBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ0b3VjaGZvcmNlY2hhbmdlXCIsIF9wcmV2ZW50RGVmYXVsdCk7IC8vIHByZXZlbnRzIG5hdGl2ZSB0b3VjaCBzY3JvbGxpbmcgZnJvbSB0YWtpbmcgb3ZlciBpZiB0aGUgdXNlciBzdGFydGVkIGRyYWdnaW5nIGluIHRoZSBvdGhlciBkaXJlY3Rpb24gaW4gaU9TIFNhZmFyaVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYudmFycy5sb2NrQXhpc09uVG91Y2hTY3JvbGwgIT09IGZhbHNlICYmIGFsbG93WCAmJiBhbGxvd1kpIHtcbiAgICAgICAgICAgIHNlbGYubG9ja2VkQXhpcyA9IHRvdWNoRHJhZ0F4aXMgPT09IFwieFwiID8gXCJ5XCIgOiBcInhcIjtcbiAgICAgICAgICAgIF9pc0Z1bmN0aW9uKHNlbGYudmFycy5vbkxvY2tBeGlzKSAmJiBzZWxmLnZhcnMub25Mb2NrQXhpcy5jYWxsKHNlbGYsIG9yaWdpbmFsRXZlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfaXNBbmRyb2lkICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgPT09IHRvdWNoRHJhZ0F4aXMpIHtcbiAgICAgICAgICAgIG9uUmVsZWFzZShvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLmFsbG93RXZlbnREZWZhdWx0ICYmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCB0b3VjaERyYWdBeGlzICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgIT09IHRvdWNoRHJhZ0F4aXMpICYmIG9yaWdpbmFsRXZlbnQuY2FuY2VsYWJsZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgX3ByZXZlbnREZWZhdWx0KG9yaWdpbmFsRXZlbnQpO1xuXG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChpc1ByZXZlbnRpbmdEZWZhdWx0KSB7XG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuYXV0b1Njcm9sbCkge1xuICAgICAgICBjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBzZXRQb2ludGVyUG9zaXRpb24oZS5wYWdlWCwgZS5wYWdlWSwgaGFzTW92ZUNhbGxiYWNrKTtcbiAgICB9LFxuICAgICAgICBzZXRQb2ludGVyUG9zaXRpb24gPSBmdW5jdGlvbiBzZXRQb2ludGVyUG9zaXRpb24ocG9pbnRlclgsIHBvaW50ZXJZLCBpbnZva2VPbk1vdmUpIHtcbiAgICAgIHZhciBkcmFnVG9sZXJhbmNlID0gMSAtIHNlbGYuZHJhZ1Jlc2lzdGFuY2UsXG4gICAgICAgICAgZWRnZVRvbGVyYW5jZSA9IDEgLSBzZWxmLmVkZ2VSZXNpc3RhbmNlLFxuICAgICAgICAgIHByZXZQb2ludGVyWCA9IHNlbGYucG9pbnRlclgsXG4gICAgICAgICAgcHJldlBvaW50ZXJZID0gc2VsZi5wb2ludGVyWSxcbiAgICAgICAgICBwcmV2U3RhcnRFbGVtZW50WSA9IHN0YXJ0RWxlbWVudFksXG4gICAgICAgICAgcHJldlggPSBzZWxmLngsXG4gICAgICAgICAgcHJldlkgPSBzZWxmLnksXG4gICAgICAgICAgcHJldkVuZFggPSBzZWxmLmVuZFgsXG4gICAgICAgICAgcHJldkVuZFkgPSBzZWxmLmVuZFksXG4gICAgICAgICAgcHJldkVuZFJvdGF0aW9uID0gc2VsZi5lbmRSb3RhdGlvbixcbiAgICAgICAgICBwcmV2RGlydHkgPSBkaXJ0eSxcbiAgICAgICAgICB4Q2hhbmdlLFxuICAgICAgICAgIHlDaGFuZ2UsXG4gICAgICAgICAgeCxcbiAgICAgICAgICB5LFxuICAgICAgICAgIGRpZixcbiAgICAgICAgICB0ZW1wO1xuICAgICAgc2VsZi5wb2ludGVyWCA9IHBvaW50ZXJYO1xuICAgICAgc2VsZi5wb2ludGVyWSA9IHBvaW50ZXJZO1xuXG4gICAgICBpZiAoaXNGaXhlZCkge1xuICAgICAgICBwb2ludGVyWCAtPSBfZ2V0RG9jU2Nyb2xsTGVmdChvd25lckRvYyk7XG4gICAgICAgIHBvaW50ZXJZIC09IF9nZXREb2NTY3JvbGxUb3Aob3duZXJEb2MpO1xuICAgICAgfVxuXG4gICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgIHkgPSBNYXRoLmF0YW4yKHJvdGF0aW9uT3JpZ2luLnkgLSBwb2ludGVyWSwgcG9pbnRlclggLSByb3RhdGlvbk9yaWdpbi54KSAqIF9SQUQyREVHO1xuICAgICAgICBkaWYgPSBzZWxmLnkgLSB5O1xuXG4gICAgICAgIGlmIChkaWYgPiAxODApIHtcbiAgICAgICAgICBzdGFydEVsZW1lbnRZIC09IDM2MDtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICB9IGVsc2UgaWYgKGRpZiA8IC0xODApIHtcbiAgICAgICAgICBzdGFydEVsZW1lbnRZICs9IDM2MDtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYueCAhPT0gc3RhcnRFbGVtZW50WCB8fCBNYXRoLmFicyhzdGFydEVsZW1lbnRZIC0geSkgPiBtaW5pbXVtTW92ZW1lbnQpIHtcbiAgICAgICAgICBzZWxmLnkgPSB5O1xuICAgICAgICAgIHggPSBzdGFydEVsZW1lbnRYICsgKHN0YXJ0RWxlbWVudFkgLSB5KSAqIGRyYWdUb2xlcmFuY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeCA9IHN0YXJ0RWxlbWVudFg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICB0ZW1wID0gcG9pbnRlclggKiBtYXRyaXguYSArIHBvaW50ZXJZICogbWF0cml4LmMgKyBtYXRyaXguZTtcbiAgICAgICAgICBwb2ludGVyWSA9IHBvaW50ZXJYICogbWF0cml4LmIgKyBwb2ludGVyWSAqIG1hdHJpeC5kICsgbWF0cml4LmY7XG4gICAgICAgICAgcG9pbnRlclggPSB0ZW1wO1xuICAgICAgICB9XG5cbiAgICAgICAgeUNoYW5nZSA9IHBvaW50ZXJZIC0gc3RhcnRQb2ludGVyWTtcbiAgICAgICAgeENoYW5nZSA9IHBvaW50ZXJYIC0gc3RhcnRQb2ludGVyWDtcblxuICAgICAgICBpZiAoeUNoYW5nZSA8IG1pbmltdW1Nb3ZlbWVudCAmJiB5Q2hhbmdlID4gLW1pbmltdW1Nb3ZlbWVudCkge1xuICAgICAgICAgIHlDaGFuZ2UgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhDaGFuZ2UgPCBtaW5pbXVtTW92ZW1lbnQgJiYgeENoYW5nZSA+IC1taW5pbXVtTW92ZW1lbnQpIHtcbiAgICAgICAgICB4Q2hhbmdlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc2VsZi5sb2NrQXhpcyB8fCBzZWxmLmxvY2tlZEF4aXMpICYmICh4Q2hhbmdlIHx8IHlDaGFuZ2UpKSB7XG4gICAgICAgICAgdGVtcCA9IHNlbGYubG9ja2VkQXhpcztcblxuICAgICAgICAgIGlmICghdGVtcCkge1xuICAgICAgICAgICAgc2VsZi5sb2NrZWRBeGlzID0gdGVtcCA9IGFsbG93WCAmJiBNYXRoLmFicyh4Q2hhbmdlKSA+IE1hdGguYWJzKHlDaGFuZ2UpID8gXCJ5XCIgOiBhbGxvd1kgPyBcInhcIiA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0ZW1wICYmIF9pc0Z1bmN0aW9uKHNlbGYudmFycy5vbkxvY2tBeGlzKSkge1xuICAgICAgICAgICAgICBzZWxmLnZhcnMub25Mb2NrQXhpcy5jYWxsKHNlbGYsIHNlbGYucG9pbnRlckV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGVtcCA9PT0gXCJ5XCIpIHtcbiAgICAgICAgICAgIHlDaGFuZ2UgPSAwO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGVtcCA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgIHhDaGFuZ2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHggPSBfcm91bmQoc3RhcnRFbGVtZW50WCArIHhDaGFuZ2UgKiBkcmFnVG9sZXJhbmNlKTtcbiAgICAgICAgeSA9IF9yb3VuZChzdGFydEVsZW1lbnRZICsgeUNoYW5nZSAqIGRyYWdUb2xlcmFuY2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHNuYXBYIHx8IHNuYXBZIHx8IHNuYXBYWSkgJiYgKHNlbGYueCAhPT0geCB8fCBzZWxmLnkgIT09IHkgJiYgIXJvdGF0aW9uTW9kZSkpIHtcbiAgICAgICAgaWYgKHNuYXBYWSkge1xuICAgICAgICAgIF90ZW1wMS54ID0geDtcbiAgICAgICAgICBfdGVtcDEueSA9IHk7XG4gICAgICAgICAgdGVtcCA9IHNuYXBYWShfdGVtcDEpO1xuICAgICAgICAgIHggPSBfcm91bmQodGVtcC54KTtcbiAgICAgICAgICB5ID0gX3JvdW5kKHRlbXAueSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc25hcFgpIHtcbiAgICAgICAgICB4ID0gX3JvdW5kKHNuYXBYKHgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzbmFwWSkge1xuICAgICAgICAgIHkgPSBfcm91bmQoc25hcFkoeSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNCb3VuZHMpIHtcbiAgICAgICAgaWYgKHggPiBtYXhYKSB7XG4gICAgICAgICAgeCA9IG1heFggKyBNYXRoLnJvdW5kKCh4IC0gbWF4WCkgKiBlZGdlVG9sZXJhbmNlKTtcbiAgICAgICAgfSBlbHNlIGlmICh4IDwgbWluWCkge1xuICAgICAgICAgIHggPSBtaW5YICsgTWF0aC5yb3VuZCgoeCAtIG1pblgpICogZWRnZVRvbGVyYW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJvdGF0aW9uTW9kZSkge1xuICAgICAgICAgIGlmICh5ID4gbWF4WSkge1xuICAgICAgICAgICAgeSA9IE1hdGgucm91bmQobWF4WSArICh5IC0gbWF4WSkgKiBlZGdlVG9sZXJhbmNlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgICB5ID0gTWF0aC5yb3VuZChtaW5ZICsgKHkgLSBtaW5ZKSAqIGVkZ2VUb2xlcmFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi54ICE9PSB4IHx8IHNlbGYueSAhPT0geSAmJiAhcm90YXRpb25Nb2RlKSB7XG4gICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICBzZWxmLmVuZFJvdGF0aW9uID0gc2VsZi54ID0gc2VsZi5lbmRYID0geDtcbiAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICAgICAgc2VsZi55ID0gc2VsZi5lbmRZID0geTtcbiAgICAgICAgICAgIGRpcnR5ID0gdHJ1ZTsgLy9hIGZsYWcgdGhhdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byByZW5kZXIgdGhlIHRhcmdldCBuZXh0IHRpbWUgdGhlIFR3ZWVuTGl0ZS50aWNrZXIgZGlzcGF0Y2hlcyBhIFwidGlja1wiIGV2ZW50ICh0eXBpY2FsbHkgb24gYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIC0gdGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiAod2Ugc2hvdWxkbid0IHJlbmRlciBvbiBldmVyeSBtb3ZlIGJlY2F1c2Ugc29tZXRpbWVzIG1hbnkgbW92ZSBldmVudHMgY2FuIGdldCBkaXNwYXRjaGVkIGJldHdlZW4gc2NyZWVuIHJlZnJlc2hlcywgYW5kIHRoYXQnZCBiZSB3YXN0ZWZ1bCB0byByZW5kZXIgZXZlcnkgdGltZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWxsb3dYKSB7XG4gICAgICAgICAgICBzZWxmLnggPSBzZWxmLmVuZFggPSB4O1xuICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW52b2tlT25Nb3ZlIHx8IF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwibW92ZVwiLCBcIm9uTW92ZVwiKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoIXNlbGYuaXNEcmFnZ2luZyAmJiBzZWxmLmlzUHJlc3NlZCkge1xuICAgICAgICAgICAgc2VsZi5pc0RyYWdnaW5nID0gZHJhZ2dlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ3N0YXJ0XCIsIFwib25EcmFnU3RhcnRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vcmV2ZXJ0IGJlY2F1c2UgdGhlIG9uTW92ZSByZXR1cm5lZCBmYWxzZSFcbiAgICAgICAgICBzZWxmLnBvaW50ZXJYID0gcHJldlBvaW50ZXJYO1xuICAgICAgICAgIHNlbGYucG9pbnRlclkgPSBwcmV2UG9pbnRlclk7XG4gICAgICAgICAgc3RhcnRFbGVtZW50WSA9IHByZXZTdGFydEVsZW1lbnRZO1xuICAgICAgICAgIHNlbGYueCA9IHByZXZYO1xuICAgICAgICAgIHNlbGYueSA9IHByZXZZO1xuICAgICAgICAgIHNlbGYuZW5kWCA9IHByZXZFbmRYO1xuICAgICAgICAgIHNlbGYuZW5kWSA9IHByZXZFbmRZO1xuICAgICAgICAgIHNlbGYuZW5kUm90YXRpb24gPSBwcmV2RW5kUm90YXRpb247XG4gICAgICAgICAgZGlydHkgPSBwcmV2RGlydHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICAgICAvL2NhbGxlZCB3aGVuIHRoZSBtb3VzZS90b3VjaCBpcyByZWxlYXNlZFxuICAgIG9uUmVsZWFzZSA9IGZ1bmN0aW9uIG9uUmVsZWFzZShlLCBmb3JjZSkge1xuICAgICAgaWYgKCFlbmFibGVkIHx8ICFzZWxmLmlzUHJlc3NlZCB8fCBlICYmIHRvdWNoSUQgIT0gbnVsbCAmJiAhZm9yY2UgJiYgKGUucG9pbnRlcklkICYmIGUucG9pbnRlcklkICE9PSB0b3VjaElEICYmIGUudGFyZ2V0ICE9PSB0YXJnZXQgfHwgZS5jaGFuZ2VkVG91Y2hlcyAmJiAhX2hhc1RvdWNoSUQoZS5jaGFuZ2VkVG91Y2hlcywgdG91Y2hJRCkpKSB7XG4gICAgICAgIC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzLCB3ZSBtdXN0IGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8gdGhlIGRvYyByYXRoZXIgdGhhbiB0aGUgdHJpZ2dlciBzbyB0aGF0IHdoZW4gdGhlIGZpbmdlciBtb3ZlcyBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIHRyaWdnZXIsIHRoaW5ncyBzdGlsbCB3b3JrLiBTbyBpZiB0aGUgZXZlbnQgd2UncmUgcmVjZWl2aW5nIGhhcyBhIHBvaW50ZXJJZCB0aGF0IGRvZXNuJ3QgbWF0Y2ggdGhlIHRvdWNoSUQsIGlnbm9yZSBpdCAoZm9yIG11bHRpLXRvdWNoKVxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ICYmIGUgJiYgZW5hYmxlZCAmJiBfcHJldmVudERlZmF1bHQoZSk7IC8vIGluIHNvbWUgYnJvd3NlcnMsIHdlIG11c3QgbGlzdGVuIGZvciBtdWx0aXBsZSBldmVudCB0eXBlcyBsaWtlIHRvdWNoZW5kLCBwb2ludGVydXAsIG1vdXNldXAuIFRoZSBmaXJzdCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB3ZSByZWNvcmQgd2hldGhlciBvciBub3Qgd2UgX3ByZXZlbnREZWZhdWx0KCkgc28gdGhhdCBvbiBkdXBsaWNhdGUgY2FsbHMsIHdlIGNhbiBkbyB0aGUgc2FtZSBpZiBuZWNlc3NhcnkuXG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBlLFxuICAgICAgICAgIHdhc0RyYWdnaW5nID0gc2VsZi5pc0RyYWdnaW5nLFxuICAgICAgICAgIGlzQ29udGV4dE1lbnVSZWxlYXNlID0gc2VsZi52YXJzLmFsbG93Q29udGV4dE1lbnUgJiYgZSAmJiAoZS5jdHJsS2V5IHx8IGUud2hpY2ggPiAyKSxcbiAgICAgICAgICBwbGFjZWhvbGRlckRlbGF5ZWRDYWxsID0gZ3NhcC5kZWxheWVkQ2FsbCgwLjAwMSwgcmVtb3ZlUGxhY2Vob2xkZXIpLFxuICAgICAgICAgIHRvdWNoZXMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzeW50aGV0aWNFdmVudCxcbiAgICAgICAgICBldmVudFRhcmdldCxcbiAgICAgICAgICBzeW50aGV0aWNDbGljaztcblxuICAgICAgaWYgKHRvdWNoRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hlbmRcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodG91Y2hFdmVudFRhcmdldCwgXCJ0b3VjaG1vdmVcIiwgb25Nb3ZlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodG91Y2hFdmVudFRhcmdldCwgXCJ0b3VjaGNhbmNlbFwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJ0b3VjaHN0YXJ0XCIsIF9vbk11bHRpVG91Y2hEb2N1bWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwibW91c2Vtb3ZlXCIsIG9uTW92ZSk7XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVMaXN0ZW5lcihfd2luLCBcInRvdWNoZm9yY2VjaGFuZ2VcIiwgX3ByZXZlbnREZWZhdWx0KTtcblxuICAgICAgaWYgKCFfc3VwcG9ydHNQb2ludGVyIHx8ICF0b3VjaEV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIF9yZW1vdmVMaXN0ZW5lcihvd25lckRvYywgXCJtb3VzZXVwXCIsIG9uUmVsZWFzZSk7XG5cbiAgICAgICAgZSAmJiBlLnRhcmdldCAmJiBfcmVtb3ZlTGlzdGVuZXIoZS50YXJnZXQsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuICAgICAgfVxuXG4gICAgICBkaXJ0eSA9IGZhbHNlO1xuXG4gICAgICBpZiAod2FzRHJhZ2dpbmcpIHtcbiAgICAgICAgZHJhZ0VuZFRpbWUgPSBfbGFzdERyYWdUaW1lID0gX2dldFRpbWUoKTtcbiAgICAgICAgc2VsZi5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVGcm9tUmVuZGVyUXVldWUocmVuZGVyKTtcblxuICAgICAgaWYgKGlzQ2xpY2tpbmcgJiYgIWlzQ29udGV4dE1lbnVSZWxlYXNlKSB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKGUudGFyZ2V0LCBcImNoYW5nZVwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgICAgc2VsZi5wb2ludGVyRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgX3NldFNlbGVjdGFibGUodHJpZ2dlcnMsIGZhbHNlKTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInJlbGVhc2VcIiwgXCJvblJlbGVhc2VcIik7XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJjbGlja1wiLCBcIm9uQ2xpY2tcIik7XG5cbiAgICAgICAgaXNDbGlja2luZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBfc2V0U3R5bGUodHJpZ2dlcnNbaV0sIFwiY3Vyc29yXCIsIHZhcnMuY3Vyc29yIHx8ICh2YXJzLmN1cnNvciAhPT0gZmFsc2UgPyBfZGVmYXVsdEN1cnNvciA6IG51bGwpKTtcbiAgICAgIH1cblxuICAgICAgX2RyYWdDb3VudC0tO1xuXG4gICAgICBpZiAoZSkge1xuICAgICAgICB0b3VjaGVzID0gZS5jaGFuZ2VkVG91Y2hlcztcblxuICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgIC8vdG91Y2ggZXZlbnRzIHN0b3JlIHRoZSBkYXRhIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gICAgICAgICAgZSA9IHRvdWNoZXNbMF07XG5cbiAgICAgICAgICBpZiAoZSAhPT0gdG91Y2ggJiYgZS5pZGVudGlmaWVyICE9PSB0b3VjaElEKSB7XG4gICAgICAgICAgICAvL1VzdWFsbHkgY2hhbmdlZFRvdWNoZXNbMF0gd2lsbCBiZSB3aGF0IHdlJ3JlIGxvb2tpbmcgZm9yLCBidXQgaW4gY2FzZSBpdCdzIG5vdCwgbG9vayB0aHJvdWdoIHRoZSByZXN0IG9mIHRoZSBhcnJheS4uLihhbmQgQW5kcm9pZCBicm93c2VycyBkb24ndCByZXVzZSB0aGUgZXZlbnQgbGlrZSBpT1MpXG4gICAgICAgICAgICBpID0gdG91Y2hlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdoaWxlICgtLWkgPiAtMSAmJiAoZSA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgIT09IHRvdWNoSUQgJiYgZS50YXJnZXQgIT09IHRhcmdldCkge31cblxuICAgICAgICAgICAgaWYgKGkgPCAwICYmICFmb3JjZSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5wb2ludGVyRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgICAgICBzZWxmLnBvaW50ZXJYID0gZS5wYWdlWDtcbiAgICAgICAgc2VsZi5wb2ludGVyWSA9IGUucGFnZVk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0NvbnRleHRNZW51UmVsZWFzZSAmJiBvcmlnaW5hbEV2ZW50KSB7XG4gICAgICAgIF9wcmV2ZW50RGVmYXVsdChvcmlnaW5hbEV2ZW50KTtcblxuICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gdHJ1ZTtcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInJlbGVhc2VcIiwgXCJvblJlbGVhc2VcIik7XG4gICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsRXZlbnQgJiYgIXdhc0RyYWdnaW5nKSB7XG4gICAgICAgIGlzUHJldmVudGluZ0RlZmF1bHQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoaW50ZXJydXB0ZWQgJiYgKHZhcnMuc25hcCB8fCB2YXJzLmJvdW5kcykpIHtcbiAgICAgICAgICAvL290aGVyd2lzZSwgaWYgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBvYmplY3Qgd2hpbGUgaXQncyBhbmltYXRpbmcgdG8gYSBzbmFwcGVkIHBvc2l0aW9uLCBhbmQgdGhlbiByZWxlYXNlcyB3aXRob3V0IG1vdmluZyAzIHBpeGVscywgaXQgd2lsbCBqdXN0IHN0YXkgdGhlcmUgKGl0IHNob3VsZCBhbmltYXRlL3NuYXApXG4gICAgICAgICAgYW5pbWF0ZSh2YXJzLmluZXJ0aWEgfHwgdmFycy50aHJvd1Byb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicmVsZWFzZVwiLCBcIm9uUmVsZWFzZVwiKTtcblxuICAgICAgICBpZiAoKCFfaXNBbmRyb2lkIHx8IG9yaWdpbmFsRXZlbnQudHlwZSAhPT0gXCJ0b3VjaG1vdmVcIikgJiYgb3JpZ2luYWxFdmVudC50eXBlLmluZGV4T2YoXCJjYW5jZWxcIikgPT09IC0xKSB7XG4gICAgICAgICAgLy90byBhY2NvbW1vZGF0ZSBuYXRpdmUgc2Nyb2xsaW5nIG9uIEFuZHJvaWQgZGV2aWNlcywgd2UgaGF2ZSB0byBpbW1lZGlhdGVseSBjYWxsIG9uUmVsZWFzZSgpIG9uIHRoZSBmaXJzdCB0b3VjaG1vdmUgZXZlbnQsIGJ1dCB0aGF0IHNob3VsZG4ndCB0cmlnZ2VyIGEgXCJjbGlja1wiLlxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiY2xpY2tcIiwgXCJvbkNsaWNrXCIpO1xuXG4gICAgICAgICAgaWYgKF9nZXRUaW1lKCkgLSBjbGlja1RpbWUgPCAzMDApIHtcbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZG91YmxlY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGV2ZW50VGFyZ2V0ID0gb3JpZ2luYWxFdmVudC50YXJnZXQgfHwgdGFyZ2V0OyAvL29sZCBJRSB1c2VzIHNyY0VsZW1lbnRcblxuICAgICAgICAgIGNsaWNrVGltZSA9IF9nZXRUaW1lKCk7XG5cbiAgICAgICAgICBzeW50aGV0aWNDbGljayA9IGZ1bmN0aW9uIHN5bnRoZXRpY0NsaWNrKCkge1xuICAgICAgICAgICAgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cbiAgICAgICAgICAgIGlmIChjbGlja1RpbWUgIT09IGNsaWNrRGlzcGF0Y2ggJiYgc2VsZi5lbmFibGVkKCkgJiYgIXNlbGYuaXNQcmVzc2VkICYmICFvcmlnaW5hbEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50VGFyZ2V0LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgLy9zb21lIGJyb3dzZXJzIChsaWtlIG1vYmlsZSBTYWZhcmkpIGRvbid0IHByb3Blcmx5IHRyaWdnZXIgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChvd25lckRvYy5jcmVhdGVFdmVudCkge1xuICAgICAgICAgICAgICAgIHN5bnRoZXRpY0V2ZW50ID0gb3duZXJEb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgICAgICBzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIF93aW4sIDEsIHNlbGYucG9pbnRlckV2ZW50LnNjcmVlblgsIHNlbGYucG9pbnRlckV2ZW50LnNjcmVlblksIHNlbGYucG9pbnRlclgsIHNlbGYucG9pbnRlclksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KHN5bnRoZXRpY0V2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoIV9pc0FuZHJvaWQgJiYgIW9yaWdpbmFsRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgLy9pT1MgU2FmYXJpIHJlcXVpcmVzIHRoZSBzeW50aGV0aWMgY2xpY2sgdG8gaGFwcGVuIGltbWVkaWF0ZWx5IG9yIGVsc2UgaXQgc2ltcGx5IHdvbid0IHdvcmssIGJ1dCBBbmRyb2lkIGRvZXNuJ3QgcGxheSBuaWNlLlxuICAgICAgICAgICAgZ3NhcC5kZWxheWVkQ2FsbCgwLjA1LCBzeW50aGV0aWNDbGljayk7IC8vaW4gYWRkaXRpb24gdG8gdGhlIGlPUyBidWcgd29ya2Fyb3VuZCwgdGhlcmUncyBhIEZpcmVmb3ggaXNzdWUgd2l0aCBjbGlja2luZyBvbiB0aGluZ3MgbGlrZSBhIHZpZGVvIHRvIHBsYXksIHNvIHdlIG11c3QgZmFrZSBhIGNsaWNrIGV2ZW50IGluIGEgc2xpZ2h0bHkgZGVsYXllZCBmYXNoaW9uLiBQcmV2aW91c2x5LCB3ZSBsaXN0ZW5lZCBmb3IgdGhlIFwiY2xpY2tcIiBldmVudCB3aXRoIFwiY2FwdHVyZVwiIGZhbHNlIHdoaWNoIHNvbHZlZCB0aGUgdmlkZW8tY2xpY2stdG8tcGxheSBpc3N1ZSwgYnV0IGl0IHdvdWxkIGFsbG93IHRoZSBcImNsaWNrXCIgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZCB0d2ljZSBsaWtlIGlmIHlvdSB3ZXJlIHVzaW5nIGEgalF1ZXJ5LmNsaWNrKCkgYmVjYXVzZSB0aGF0IHdhcyBoYW5kbGVkIGluIHRoZSBjYXB0dXJlIHBoYXNlLCB0aHVzIHdlIGhhZCB0byBzd2l0Y2ggdG8gdGhlIGNhcHR1cmUgcGhhc2UgdG8gYXZvaWQgdGhlIGRvdWJsZS1kaXNwYXRjaGluZywgYnV0IGRvIHRoZSBkZWxheWVkIHN5bnRoZXRpYyBjbGljay4gRG9uJ3QgZmlyZSBpdCB0b28gZmFzdCAobGlrZSAwLjAwMDAxKSBiZWNhdXNlIHdlIHdhbnQgdG8gZ2l2ZSB0aGUgbmF0aXZlIGV2ZW50IGEgY2hhbmNlIHRvIGZpcmUgZmlyc3QgYXMgaXQncyBcInRydXN0ZWRcIi5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGUodmFycy5pbmVydGlhIHx8IHZhcnMudGhyb3dQcm9wcyk7IC8vd2lsbCBza2lwIGlmIGluZXJ0aWEvdGhyb3dQcm9wcyBpc24ndCBkZWZpbmVkIG9yIEluZXJ0aWFQbHVnaW4gaXNuJ3QgbG9hZGVkLlxuXG4gICAgICAgIGlmICghc2VsZi5hbGxvd0V2ZW50RGVmYXVsdCAmJiBvcmlnaW5hbEV2ZW50ICYmICh2YXJzLmRyYWdDbGlja2FibGVzICE9PSBmYWxzZSB8fCAhaXNDbGlja2FibGUuY2FsbChzZWxmLCBvcmlnaW5hbEV2ZW50LnRhcmdldCkpICYmIHdhc0RyYWdnaW5nICYmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCB0b3VjaERyYWdBeGlzICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgPT09IHRvdWNoRHJhZ0F4aXMpICYmIG9yaWdpbmFsRXZlbnQuY2FuY2VsYWJsZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gdHJ1ZTtcblxuICAgICAgICAgIF9wcmV2ZW50RGVmYXVsdChvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1ByZXZlbnRpbmdEZWZhdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfZGlzcGF0Y2hFdmVudChzZWxmLCBcInJlbGVhc2VcIiwgXCJvblJlbGVhc2VcIik7XG4gICAgICB9XG5cbiAgICAgIGlzVHdlZW5pbmcoKSAmJiBwbGFjZWhvbGRlckRlbGF5ZWRDYWxsLmR1cmF0aW9uKHNlbGYudHdlZW4uZHVyYXRpb24oKSk7IC8vc3luYyB0aGUgdGltaW5nIHNvIHRoYXQgdGhlIHBsYWNlaG9sZGVyIERJViBnZXRzXG5cbiAgICAgIHdhc0RyYWdnaW5nICYmIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ2VuZFwiLCBcIm9uRHJhZ0VuZFwiKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgICAgIHVwZGF0ZVNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbChlKSB7XG4gICAgICBpZiAoZSAmJiBzZWxmLmlzRHJhZ2dpbmcgJiYgIXNjcm9sbFByb3h5KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlLnRhcmdldCB8fCB0YXJnZXQucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIGRlbHRhWCA9IHBhcmVudC5zY3JvbGxMZWZ0IC0gcGFyZW50Ll9nc1Njcm9sbFgsXG4gICAgICAgICAgICBkZWx0YVkgPSBwYXJlbnQuc2Nyb2xsVG9wIC0gcGFyZW50Ll9nc1Njcm9sbFk7XG5cbiAgICAgICAgaWYgKGRlbHRhWCB8fCBkZWx0YVkpIHtcbiAgICAgICAgICBpZiAobWF0cml4KSB7XG4gICAgICAgICAgICBzdGFydFBvaW50ZXJYIC09IGRlbHRhWCAqIG1hdHJpeC5hICsgZGVsdGFZICogbWF0cml4LmM7XG4gICAgICAgICAgICBzdGFydFBvaW50ZXJZIC09IGRlbHRhWSAqIG1hdHJpeC5kICsgZGVsdGFYICogbWF0cml4LmI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0UG9pbnRlclggLT0gZGVsdGFYO1xuICAgICAgICAgICAgc3RhcnRQb2ludGVyWSAtPSBkZWx0YVk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50Ll9nc1Njcm9sbFggKz0gZGVsdGFYO1xuICAgICAgICAgIHBhcmVudC5fZ3NTY3JvbGxZICs9IGRlbHRhWTtcbiAgICAgICAgICBzZXRQb2ludGVyUG9zaXRpb24oc2VsZi5wb2ludGVyWCwgc2VsZi5wb2ludGVyWSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICAgICBvbkNsaWNrID0gZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAvL3RoaXMgd2FzIGEgaHVnZSBwYWluIGluIHRoZSBuZWNrIHRvIGFsaWduIGFsbCB0aGUgdmFyaW91cyBicm93c2VycyBhbmQgdGhlaXIgYmVoYXZpb3JzLiBDaHJvbWUsIEZpcmVmb3gsIFNhZmFyaSwgT3BlcmEsIEFuZHJvaWQsIGFuZCBNaWNyb3NvZnQgRWRnZSBhbGwgaGFuZGxlIGV2ZW50cyBkaWZmZXJlbnRseSEgU29tZSB3aWxsIG9ubHkgdHJpZ2dlciBuYXRpdmUgYmVoYXZpb3IgKGxpa2UgY2hlY2tib3ggdG9nZ2xpbmcpIGZyb20gdHJ1c3RlZCBldmVudHMuIE90aGVycyBkb24ndCBldmVuIHN1cHBvcnQgaXNUcnVzdGVkLCBidXQgcmVxdWlyZSAyIGV2ZW50cyB0byBmbG93IHRocm91Z2ggYmVmb3JlIHRyaWdnZXJpbmcgbmF0aXZlIGJlaGF2aW9yLiBFZGdlIHRyZWF0cyBldmVyeXRoaW5nIGFzIHRydXN0ZWQgYnV0IGFsc28gbWFuZGF0ZXMgdGhhdCAyIGZsb3cgdGhyb3VnaCB0byB0cmlnZ2VyIHRoZSBjb3JyZWN0IG5hdGl2ZSBiZWhhdmlvci5cbiAgICAgIHZhciB0aW1lID0gX2dldFRpbWUoKSxcbiAgICAgICAgICByZWNlbnRseUNsaWNrZWQgPSB0aW1lIC0gY2xpY2tUaW1lIDwgMTAwLFxuICAgICAgICAgIHJlY2VudGx5RHJhZ2dlZCA9IHRpbWUgLSBkcmFnRW5kVGltZSA8IDUwLFxuICAgICAgICAgIGFscmVhZHlEaXNwYXRjaGVkID0gcmVjZW50bHlDbGlja2VkICYmIGNsaWNrRGlzcGF0Y2ggPT09IGNsaWNrVGltZSxcbiAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gc2VsZi5wb2ludGVyRXZlbnQgJiYgc2VsZi5wb2ludGVyRXZlbnQuZGVmYXVsdFByZXZlbnRlZCxcbiAgICAgICAgICBhbHJlYWR5RGlzcGF0Y2hlZFRydXN0ZWQgPSByZWNlbnRseUNsaWNrZWQgJiYgdHJ1c3RlZENsaWNrRGlzcGF0Y2ggPT09IGNsaWNrVGltZSxcbiAgICAgICAgICB0cnVzdGVkID0gZS5pc1RydXN0ZWQgfHwgZS5pc1RydXN0ZWQgPT0gbnVsbCAmJiByZWNlbnRseUNsaWNrZWQgJiYgYWxyZWFkeURpc3BhdGNoZWQ7IC8vbm90ZTogU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCBpc1RydXN0ZWQsIGFuZCBpdCB3b24ndCBwcm9wZXJseSBleGVjdXRlIG5hdGl2ZSBiZWhhdmlvciAobGlrZSB0b2dnbGluZyBjaGVja2JveGVzKSBvbiB0aGUgZmlyc3Qgc3ludGhldGljIFwiY2xpY2tcIiBldmVudCAtIHdlIG11c3Qgd2FpdCBmb3IgdGhlIDJuZCBhbmQgdHJlYXQgaXQgYXMgdHJ1c3RlZCAoYnV0IHN0b3AgcHJvcGFnYXRpb24gYXQgdGhhdCBwb2ludCkuIENvbmZ1c2luZywgSSBrbm93LiBEb24ndCB5b3UgbG92ZSBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkgY2hhbGxlbmdlcz9cblxuXG4gICAgICBpZiAoKGFscmVhZHlEaXNwYXRjaGVkIHx8IHJlY2VudGx5RHJhZ2dlZCAmJiBzZWxmLnZhcnMuc3VwcHJlc3NDbGlja09uRHJhZyAhPT0gZmFsc2UpICYmIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNlbnRseUNsaWNrZWQgJiYgIShzZWxmLnBvaW50ZXJFdmVudCAmJiBzZWxmLnBvaW50ZXJFdmVudC5kZWZhdWx0UHJldmVudGVkKSAmJiAoIWFscmVhZHlEaXNwYXRjaGVkIHx8IHRydXN0ZWQgJiYgIWFscmVhZHlEaXNwYXRjaGVkVHJ1c3RlZCkpIHtcbiAgICAgICAgLy9sZXQgdGhlIGZpcnN0IGNsaWNrIHBhc3MgdGhyb3VnaCB1bmhpbmRlcmVkLiBMZXQgdGhlIG5leHQgb25lIG9ubHkgaWYgaXQncyB0cnVzdGVkLCB0aGVuIG5vIG1vcmUgKHN0b3AgcXVpY2stc3VjY2Vzc2lvbiBvbmVzKVxuICAgICAgICBpZiAodHJ1c3RlZCAmJiBhbHJlYWR5RGlzcGF0Y2hlZCkge1xuICAgICAgICAgIHRydXN0ZWRDbGlja0Rpc3BhdGNoID0gY2xpY2tUaW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpY2tEaXNwYXRjaCA9IGNsaWNrVGltZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5pc1ByZXNzZWQgfHwgcmVjZW50bHlEcmFnZ2VkIHx8IHJlY2VudGx5Q2xpY2tlZCkge1xuICAgICAgICBpZiAoIXRydXN0ZWQgfHwgIWUuZGV0YWlsIHx8ICFyZWNlbnRseUNsaWNrZWQgfHwgZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIF9wcmV2ZW50RGVmYXVsdChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlY2VudGx5Q2xpY2tlZCAmJiAhcmVjZW50bHlEcmFnZ2VkICYmICFkcmFnZ2VkKSB7XG4gICAgICAgIC8vIGZvciBzY3JpcHQtdHJpZ2dlcmVkIGV2ZW50IGRpc3BhdGNoZXMsIGxpa2UgZWxlbWVudC5jbGljaygpXG4gICAgICAgIGUgJiYgZS50YXJnZXQgJiYgKHNlbGYucG9pbnRlckV2ZW50ID0gZSk7XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJjbGlja1wiLCBcIm9uQ2xpY2tcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICAgICAgbG9jYWxpemVQb2ludCA9IGZ1bmN0aW9uIGxvY2FsaXplUG9pbnQocCkge1xuICAgICAgcmV0dXJuIG1hdHJpeCA/IHtcbiAgICAgICAgeDogcC54ICogbWF0cml4LmEgKyBwLnkgKiBtYXRyaXguYyArIG1hdHJpeC5lLFxuICAgICAgICB5OiBwLnggKiBtYXRyaXguYiArIHAueSAqIG1hdHJpeC5kICsgbWF0cml4LmZcbiAgICAgIH0gOiB7XG4gICAgICAgIHg6IHAueCxcbiAgICAgICAgeTogcC55XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBvbGQgPSBEcmFnZ2FibGUuZ2V0KHRhcmdldCk7XG4gICAgb2xkICYmIG9sZC5raWxsKCk7IC8vIGF2b2lkcyBkdXBsaWNhdGVzIChhbiBlbGVtZW50IGNhbiBvbmx5IGJlIGNvbnRyb2xsZWQgYnkgb25lIERyYWdnYWJsZSlcbiAgICAvL2dpdmUgdGhlIHVzZXIgYWNjZXNzIHRvIHN0YXJ0L3N0b3AgZHJhZ2dpbmcuLi5cblxuICAgIF90aGlzMi5zdGFydERyYWcgPSBmdW5jdGlvbiAoZXZlbnQsIGFsaWduKSB7XG4gICAgICB2YXIgcjEsIHIyLCBwMSwgcDI7XG4gICAgICBvblByZXNzKGV2ZW50IHx8IHNlbGYucG9pbnRlckV2ZW50LCB0cnVlKTsgLy9pZiB0aGUgcG9pbnRlciBpc24ndCBvbiB0b3Agb2YgdGhlIGVsZW1lbnQsIGFkanVzdCB0aGluZ3MgYWNjb3JkaW5nbHlcblxuICAgICAgaWYgKGFsaWduICYmICFzZWxmLmhpdFRlc3QoZXZlbnQgfHwgc2VsZi5wb2ludGVyRXZlbnQpKSB7XG4gICAgICAgIHIxID0gX3BhcnNlUmVjdChldmVudCB8fCBzZWxmLnBvaW50ZXJFdmVudCk7XG4gICAgICAgIHIyID0gX3BhcnNlUmVjdCh0YXJnZXQpO1xuICAgICAgICBwMSA9IGxvY2FsaXplUG9pbnQoe1xuICAgICAgICAgIHg6IHIxLmxlZnQgKyByMS53aWR0aCAvIDIsXG4gICAgICAgICAgeTogcjEudG9wICsgcjEuaGVpZ2h0IC8gMlxuICAgICAgICB9KTtcbiAgICAgICAgcDIgPSBsb2NhbGl6ZVBvaW50KHtcbiAgICAgICAgICB4OiByMi5sZWZ0ICsgcjIud2lkdGggLyAyLFxuICAgICAgICAgIHk6IHIyLnRvcCArIHIyLmhlaWdodCAvIDJcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXJ0UG9pbnRlclggLT0gcDEueCAtIHAyLng7XG4gICAgICAgIHN0YXJ0UG9pbnRlclkgLT0gcDEueSAtIHAyLnk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc2VsZi5pc0RyYWdnaW5nKSB7XG4gICAgICAgIHNlbGYuaXNEcmFnZ2luZyA9IGRyYWdnZWQgPSB0cnVlO1xuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ3N0YXJ0XCIsIFwib25EcmFnU3RhcnRcIik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzMi5kcmFnID0gb25Nb3ZlO1xuXG4gICAgX3RoaXMyLmVuZERyYWcgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIG9uUmVsZWFzZShlIHx8IHNlbGYucG9pbnRlckV2ZW50LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMyLnRpbWVTaW5jZURyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2VsZi5pc0RyYWdnaW5nID8gMCA6IChfZ2V0VGltZSgpIC0gZHJhZ0VuZFRpbWUpIC8gMTAwMDtcbiAgICB9O1xuXG4gICAgX3RoaXMyLnRpbWVTaW5jZUNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChfZ2V0VGltZSgpIC0gY2xpY2tUaW1lKSAvIDEwMDA7XG4gICAgfTtcblxuICAgIF90aGlzMi5oaXRUZXN0ID0gZnVuY3Rpb24gKHRhcmdldCwgdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gRHJhZ2dhYmxlLmhpdFRlc3Qoc2VsZi50YXJnZXQsIHRhcmdldCwgdGhyZXNob2xkKTtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uIChmcm9tLCBkaWFnb25hbFRocmVzaG9sZCkge1xuICAgICAgLy9mcm9tIGNhbiBiZSBcInN0YXJ0XCIgKGRlZmF1bHQpLCBcInZlbG9jaXR5XCIsIG9yIGFuIGVsZW1lbnRcbiAgICAgIHZhciBtb2RlID0gZnJvbSA9PT0gXCJ2ZWxvY2l0eVwiICYmIEluZXJ0aWFQbHVnaW4gPyBmcm9tIDogX2lzT2JqZWN0KGZyb20pICYmICFyb3RhdGlvbk1vZGUgPyBcImVsZW1lbnRcIiA6IFwic3RhcnRcIixcbiAgICAgICAgICB4Q2hhbmdlLFxuICAgICAgICAgIHlDaGFuZ2UsXG4gICAgICAgICAgcmF0aW8sXG4gICAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICAgIHIxLFxuICAgICAgICAgIHIyO1xuXG4gICAgICBpZiAobW9kZSA9PT0gXCJlbGVtZW50XCIpIHtcbiAgICAgICAgcjEgPSBfcGFyc2VSZWN0KHNlbGYudGFyZ2V0KTtcbiAgICAgICAgcjIgPSBfcGFyc2VSZWN0KGZyb20pO1xuICAgICAgfVxuXG4gICAgICB4Q2hhbmdlID0gbW9kZSA9PT0gXCJzdGFydFwiID8gc2VsZi54IC0gc3RhcnRFbGVtZW50WCA6IG1vZGUgPT09IFwidmVsb2NpdHlcIiA/IEluZXJ0aWFQbHVnaW4uZ2V0VmVsb2NpdHkodGFyZ2V0LCB4UHJvcCkgOiByMS5sZWZ0ICsgcjEud2lkdGggLyAyIC0gKHIyLmxlZnQgKyByMi53aWR0aCAvIDIpO1xuXG4gICAgICBpZiAocm90YXRpb25Nb2RlKSB7XG4gICAgICAgIHJldHVybiB4Q2hhbmdlIDwgMCA/IFwiY291bnRlci1jbG9ja3dpc2VcIiA6IFwiY2xvY2t3aXNlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWFnb25hbFRocmVzaG9sZCA9IGRpYWdvbmFsVGhyZXNob2xkIHx8IDI7XG4gICAgICAgIHlDaGFuZ2UgPSBtb2RlID09PSBcInN0YXJ0XCIgPyBzZWxmLnkgLSBzdGFydEVsZW1lbnRZIDogbW9kZSA9PT0gXCJ2ZWxvY2l0eVwiID8gSW5lcnRpYVBsdWdpbi5nZXRWZWxvY2l0eSh0YXJnZXQsIHlQcm9wKSA6IHIxLnRvcCArIHIxLmhlaWdodCAvIDIgLSAocjIudG9wICsgcjIuaGVpZ2h0IC8gMik7XG4gICAgICAgIHJhdGlvID0gTWF0aC5hYnMoeENoYW5nZSAvIHlDaGFuZ2UpO1xuICAgICAgICBkaXJlY3Rpb24gPSByYXRpbyA8IDEgLyBkaWFnb25hbFRocmVzaG9sZCA/IFwiXCIgOiB4Q2hhbmdlIDwgMCA/IFwibGVmdFwiIDogXCJyaWdodFwiO1xuXG4gICAgICAgIGlmIChyYXRpbyA8IGRpYWdvbmFsVGhyZXNob2xkKSB7XG4gICAgICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gXCJcIikge1xuICAgICAgICAgICAgZGlyZWN0aW9uICs9IFwiLVwiO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcmVjdGlvbiArPSB5Q2hhbmdlIDwgMCA/IFwidXBcIiA6IFwiZG93blwiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgfTtcblxuICAgIF90aGlzMi5hcHBseUJvdW5kcyA9IGZ1bmN0aW9uIChuZXdCb3VuZHMsIHN0aWNreSkge1xuICAgICAgdmFyIHgsIHksIGZvcmNlWmVyb1ZlbG9jaXR5LCBlLCBwYXJlbnQsIGlzUm9vdDtcblxuICAgICAgaWYgKG5ld0JvdW5kcyAmJiB2YXJzLmJvdW5kcyAhPT0gbmV3Qm91bmRzKSB7XG4gICAgICAgIHZhcnMuYm91bmRzID0gbmV3Qm91bmRzO1xuICAgICAgICByZXR1cm4gc2VsZi51cGRhdGUodHJ1ZSwgc3RpY2t5KTtcbiAgICAgIH1cblxuICAgICAgc3luY1hZKHRydWUpO1xuICAgICAgY2FsY3VsYXRlQm91bmRzKCk7XG5cbiAgICAgIGlmIChoYXNCb3VuZHMgJiYgIWlzVHdlZW5pbmcoKSkge1xuICAgICAgICB4ID0gc2VsZi54O1xuICAgICAgICB5ID0gc2VsZi55O1xuXG4gICAgICAgIGlmICh4ID4gbWF4WCkge1xuICAgICAgICAgIHggPSBtYXhYO1xuICAgICAgICB9IGVsc2UgaWYgKHggPCBtaW5YKSB7XG4gICAgICAgICAgeCA9IG1pblg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgICB5ID0gbWF4WTtcbiAgICAgICAgfSBlbHNlIGlmICh5IDwgbWluWSkge1xuICAgICAgICAgIHkgPSBtaW5ZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYueCAhPT0geCB8fCBzZWxmLnkgIT09IHkpIHtcbiAgICAgICAgICBmb3JjZVplcm9WZWxvY2l0eSA9IHRydWU7XG4gICAgICAgICAgc2VsZi54ID0gc2VsZi5lbmRYID0geDtcblxuICAgICAgICAgIGlmIChyb3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgIHNlbGYuZW5kUm90YXRpb24gPSB4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnkgPSBzZWxmLmVuZFkgPSB5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICByZW5kZXIodHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoc2VsZi5hdXRvU2Nyb2xsICYmICFzZWxmLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIF9yZWNvcmRNYXhTY3JvbGxzKHRhcmdldC5wYXJlbnROb2RlKTtcblxuICAgICAgICAgICAgZSA9IHRhcmdldDtcbiAgICAgICAgICAgIF93aW5kb3dQcm94eS5zY3JvbGxUb3AgPSBfd2luLnBhZ2VZT2Zmc2V0ICE9IG51bGwgPyBfd2luLnBhZ2VZT2Zmc2V0IDogb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAhPSBudWxsID8gb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IG93bmVyRG9jLmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgX3dpbmRvd1Byb3h5LnNjcm9sbExlZnQgPSBfd2luLnBhZ2VYT2Zmc2V0ICE9IG51bGwgPyBfd2luLnBhZ2VYT2Zmc2V0IDogb3duZXJEb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgIT0gbnVsbCA/IG93bmVyRG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogb3duZXJEb2MuYm9keS5zY3JvbGxMZWZ0O1xuXG4gICAgICAgICAgICB3aGlsZSAoZSAmJiAhaXNSb290KSB7XG4gICAgICAgICAgICAgIC8vd2FsayB1cCB0aGUgY2hhaW4gYW5kIHNlbnNlIHdoZXJldmVyIHRoZSBzY3JvbGxUb3Avc2Nyb2xsTGVmdCBleGNlZWRzIHRoZSBtYXhpbXVtLlxuICAgICAgICAgICAgICBpc1Jvb3QgPSBfaXNSb290KGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgIHBhcmVudCA9IGlzUm9vdCA/IF93aW5kb3dQcm94eSA6IGUucGFyZW50Tm9kZTtcblxuICAgICAgICAgICAgICBpZiAoYWxsb3dZICYmIHBhcmVudC5zY3JvbGxUb3AgPiBwYXJlbnQuX2dzTWF4U2Nyb2xsWSkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5zY3JvbGxUb3AgPSBwYXJlbnQuX2dzTWF4U2Nyb2xsWTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhbGxvd1ggJiYgcGFyZW50LnNjcm9sbExlZnQgPiBwYXJlbnQuX2dzTWF4U2Nyb2xsWCkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5zY3JvbGxMZWZ0ID0gcGFyZW50Ll9nc01heFNjcm9sbFg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBlID0gcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLmlzVGhyb3dpbmcgJiYgKGZvcmNlWmVyb1ZlbG9jaXR5IHx8IHNlbGYuZW5kWCA+IG1heFggfHwgc2VsZi5lbmRYIDwgbWluWCB8fCBzZWxmLmVuZFkgPiBtYXhZIHx8IHNlbGYuZW5kWSA8IG1pblkpKSB7XG4gICAgICAgICAgYW5pbWF0ZSh2YXJzLmluZXJ0aWEgfHwgdmFycy50aHJvd1Byb3BzLCBmb3JjZVplcm9WZWxvY2l0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIF90aGlzMi51cGRhdGUgPSBmdW5jdGlvbiAoYXBwbHlCb3VuZHMsIHN0aWNreSwgaWdub3JlRXh0ZXJuYWxDaGFuZ2VzKSB7XG4gICAgICBpZiAoc3RpY2t5ICYmIHNlbGYuaXNQcmVzc2VkKSB7XG4gICAgICAgIC8vIGluIGNhc2UgdGhlIGVsZW1lbnQgd2FzIHJlcG9zaXRpb25lZCBpbiB0aGUgZG9jdW1lbnQgZmxvdywgdGh1cyBpdHMgeC95IG1heSBiZSBpZGVudGljYWwgYnV0IGl0cyBwb3NpdGlvbiBpcyBhY3R1YWxseSBxdWl0ZSBkaWZmZXJlbnQuXG4gICAgICAgIHZhciBtID0gZ2V0R2xvYmFsTWF0cml4KHRhcmdldCksXG4gICAgICAgICAgICBwID0gaW5uZXJNYXRyaXguYXBwbHkoe1xuICAgICAgICAgIHg6IHNlbGYueCAtIHN0YXJ0RWxlbWVudFgsXG4gICAgICAgICAgeTogc2VsZi55IC0gc3RhcnRFbGVtZW50WVxuICAgICAgICB9KSxcbiAgICAgICAgICAgIG0yID0gZ2V0R2xvYmFsTWF0cml4KHRhcmdldC5wYXJlbnROb2RlLCB0cnVlKTtcbiAgICAgICAgbTIuYXBwbHkoe1xuICAgICAgICAgIHg6IG0uZSAtIHAueCxcbiAgICAgICAgICB5OiBtLmYgLSBwLnlcbiAgICAgICAgfSwgcCk7XG4gICAgICAgIHNlbGYueCAtPSBwLnggLSBtMi5lO1xuICAgICAgICBzZWxmLnkgLT0gcC55IC0gbTIuZjtcbiAgICAgICAgcmVuZGVyKHRydWUpO1xuICAgICAgICByZWNvcmRTdGFydFBvc2l0aW9ucygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeCA9IHNlbGYueCxcbiAgICAgICAgICB5ID0gc2VsZi55O1xuICAgICAgdXBkYXRlTWF0cml4KCFzdGlja3kpO1xuXG4gICAgICBpZiAoYXBwbHlCb3VuZHMpIHtcbiAgICAgICAgc2VsZi5hcHBseUJvdW5kcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlydHkgJiYgaWdub3JlRXh0ZXJuYWxDaGFuZ2VzICYmIHJlbmRlcih0cnVlKTtcbiAgICAgICAgc3luY1hZKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RpY2t5KSB7XG4gICAgICAgIHNldFBvaW50ZXJQb3NpdGlvbihzZWxmLnBvaW50ZXJYLCBzZWxmLnBvaW50ZXJZKTtcbiAgICAgICAgZGlydHkgJiYgcmVuZGVyKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5pc1ByZXNzZWQgJiYgIXN0aWNreSAmJiAoYWxsb3dYICYmIE1hdGguYWJzKHggLSBzZWxmLngpID4gMC4wMSB8fCBhbGxvd1kgJiYgTWF0aC5hYnMoeSAtIHNlbGYueSkgPiAwLjAxICYmICFyb3RhdGlvbk1vZGUpKSB7XG4gICAgICAgIHJlY29yZFN0YXJ0UG9zaXRpb25zKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmF1dG9TY3JvbGwpIHtcbiAgICAgICAgX3JlY29yZE1heFNjcm9sbHModGFyZ2V0LnBhcmVudE5vZGUsIHNlbGYuaXNEcmFnZ2luZyk7XG5cbiAgICAgICAgY2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gc2VsZi5pc0RyYWdnaW5nO1xuICAgICAgICByZW5kZXIodHJ1ZSk7IC8vaW4gY2FzZSByZXBhcmVudGluZyBvY2N1cnJlZC5cblxuICAgICAgICBfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIodGFyZ2V0LCB1cGRhdGVTY3JvbGwpO1xuXG4gICAgICAgIF9hZGRTY3JvbGxMaXN0ZW5lcih0YXJnZXQsIHVwZGF0ZVNjcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBfdGhpczIuZW5hYmxlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBzZXRWYXJzID0ge1xuICAgICAgICBsYXp5OiB0cnVlXG4gICAgICB9LFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIGksXG4gICAgICAgICAgdHJpZ2dlcjtcblxuICAgICAgaWYgKHZhcnMuY3Vyc29yICE9PSBmYWxzZSkge1xuICAgICAgICBzZXRWYXJzLmN1cnNvciA9IHZhcnMuY3Vyc29yIHx8IF9kZWZhdWx0Q3Vyc29yO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ3NhcC51dGlscy5jaGVja1ByZWZpeChcInRvdWNoQ2FsbG91dFwiKSkge1xuICAgICAgICBzZXRWYXJzLnRvdWNoQ2FsbG91dCA9IFwibm9uZVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSAhPT0gXCJzb2Z0XCIpIHtcbiAgICAgICAgX3NldFRvdWNoQWN0aW9uRm9yQWxsRGVzY2VuZGFudHModHJpZ2dlcnMsIGFsbG93WCA9PT0gYWxsb3dZID8gXCJub25lXCIgOiB2YXJzLmFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgJiYgdGFyZ2V0LnNjcm9sbEhlaWdodCA9PT0gdGFyZ2V0LmNsaWVudEhlaWdodCA9PT0gKHRhcmdldC5zY3JvbGxXaWR0aCA9PT0gdGFyZ2V0LmNsaWVudEhlaWdodCkgfHwgdmFycy5hbGxvd0V2ZW50RGVmYXVsdCA/IFwibWFuaXB1bGF0aW9uXCIgOiBhbGxvd1ggPyBcInBhbi15XCIgOiBcInBhbi14XCIpOyAvLyBTb21lIGJyb3dzZXJzIGxpa2UgSW50ZXJuZXQgRXhwbG9yZXIgd2lsbCBmaXJlIGEgcG9pbnRlcmNhbmNlbCBldmVudCB3aGVuIHRoZSB1c2VyIGF0dGVtcHRzIHRvIGRyYWcgd2hlbiB0b3VjaEFjdGlvbiBpcyBcIm1hbmlwdWxhdGVcIiBiZWNhdXNlIGl0J3MgcGVyY2VpdmVkIGFzIGEgcGFuLiBJZiB0aGUgZWxlbWVudCBoYXMgc2Nyb2xsYWJsZSBjb250ZW50IGluIG9ubHkgb25lIGRpcmVjdGlvbiwgd2Ugc2hvdWxkIHVzZSBwYW4teCBvciBwYW4teSBhY2NvcmRpbmdseSBzbyB0aGF0IHRoZSBwb2ludGVyY2FuY2VsIGRvZXNuJ3QgcHJldmVudCBkcmFnZ2luZy5cblxuXG4gICAgICAgIGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXJzW2ldO1xuICAgICAgICAgIF9zdXBwb3J0c1BvaW50ZXIgfHwgX2FkZExpc3RlbmVyKHRyaWdnZXIsIFwibW91c2Vkb3duXCIsIG9uUHJlc3MpO1xuXG4gICAgICAgICAgX2FkZExpc3RlbmVyKHRyaWdnZXIsIFwidG91Y2hzdGFydFwiLCBvblByZXNzKTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcih0cmlnZ2VyLCBcImNsaWNrXCIsIG9uQ2xpY2ssIHRydWUpOyAvLyBub3RlOiB1c2VkIHRvIHBhc3MgdHJ1ZSBmb3IgY2FwdHVyZSBidXQgaXQgcHJldmVudGVkIGNsaWNrLXRvLXBsYXktdmlkZW8gZnVuY3Rpb25hbGl0eSBpbiBGaXJlZm94LlxuXG5cbiAgICAgICAgICBnc2FwLnNldCh0cmlnZ2VyLCBzZXRWYXJzKTtcblxuICAgICAgICAgIGlmICh0cmlnZ2VyLmdldEJCb3ggJiYgdHJpZ2dlci5vd25lclNWR0VsZW1lbnQgJiYgYWxsb3dYICE9PSBhbGxvd1kpIHtcbiAgICAgICAgICAgIC8vIGEgYnVnIGluIGNocm9tZSBkb2Vzbid0IHJlc3BlY3QgdG91Y2gtYWN0aW9uIG9uIFNWRyBlbGVtZW50cyAtIGl0IG9ubHkgd29ya3MgaWYgd2Ugc2V0IGl0IG9uIHRoZSBwYXJlbnQgU1ZHLlxuICAgICAgICAgICAgZ3NhcC5zZXQodHJpZ2dlci5vd25lclNWR0VsZW1lbnQsIHtcbiAgICAgICAgICAgICAgdG91Y2hBY3Rpb246IHZhcnMuYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCB2YXJzLmFsbG93RXZlbnREZWZhdWx0ID8gXCJtYW5pcHVsYXRpb25cIiA6IGFsbG93WCA/IFwicGFuLXlcIiA6IFwicGFuLXhcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycy5hbGxvd0NvbnRleHRNZW51IHx8IF9hZGRMaXN0ZW5lcih0cmlnZ2VyLCBcImNvbnRleHRtZW51XCIsIG9uQ29udGV4dE1lbnUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3NldFNlbGVjdGFibGUodHJpZ2dlcnMsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgX2FkZFNjcm9sbExpc3RlbmVyKHRhcmdldCwgdXBkYXRlU2Nyb2xsKTtcblxuICAgICAgZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIGlmIChJbmVydGlhUGx1Z2luICYmIHR5cGUgIT09IFwic29mdFwiKSB7XG4gICAgICAgIEluZXJ0aWFQbHVnaW4udHJhY2soc2Nyb2xsUHJveHkgfHwgdGFyZ2V0LCB4eU1vZGUgPyBcIngseVwiIDogcm90YXRpb25Nb2RlID8gXCJyb3RhdGlvblwiIDogXCJ0b3AsbGVmdFwiKTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0Ll9nc0RyYWdJRCA9IGlkID0gXCJkXCIgKyBfbG9va3VwQ291bnQrKztcbiAgICAgIF9sb29rdXBbaWRdID0gc2VsZjtcblxuICAgICAgaWYgKHNjcm9sbFByb3h5KSB7XG4gICAgICAgIHNjcm9sbFByb3h5LmVuYWJsZSgpO1xuICAgICAgICBzY3JvbGxQcm94eS5lbGVtZW50Ll9nc0RyYWdJRCA9IGlkO1xuICAgICAgfVxuXG4gICAgICAodmFycy5ib3VuZHMgfHwgcm90YXRpb25Nb2RlKSAmJiByZWNvcmRTdGFydFBvc2l0aW9ucygpO1xuICAgICAgdmFycy5ib3VuZHMgJiYgc2VsZi5hcHBseUJvdW5kcygpO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIF90aGlzMi5kaXNhYmxlID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHZhciBkcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcbiAgICAgICAgICBpID0gdHJpZ2dlcnMubGVuZ3RoLFxuICAgICAgICAgIHRyaWdnZXI7XG5cbiAgICAgIHdoaWxlICgtLWkgPiAtMSkge1xuICAgICAgICBfc2V0U3R5bGUodHJpZ2dlcnNbaV0sIFwiY3Vyc29yXCIsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSAhPT0gXCJzb2Z0XCIpIHtcbiAgICAgICAgX3NldFRvdWNoQWN0aW9uRm9yQWxsRGVzY2VuZGFudHModHJpZ2dlcnMsIG51bGwpO1xuXG4gICAgICAgIGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXJzW2ldO1xuXG4gICAgICAgICAgX3NldFN0eWxlKHRyaWdnZXIsIFwidG91Y2hDYWxsb3V0XCIsIG51bGwpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRyaWdnZXIsIFwibW91c2Vkb3duXCIsIG9uUHJlc3MpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRyaWdnZXIsIFwidG91Y2hzdGFydFwiLCBvblByZXNzKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0cmlnZ2VyLCBcImNsaWNrXCIsIG9uQ2xpY2ssIHRydWUpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRyaWdnZXIsIFwiY29udGV4dG1lbnVcIiwgb25Db250ZXh0TWVudSk7XG4gICAgICAgIH1cblxuICAgICAgICBfc2V0U2VsZWN0YWJsZSh0cmlnZ2VycywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRvdWNoRXZlbnRUYXJnZXQpIHtcbiAgICAgICAgICBfcmVtb3ZlTGlzdGVuZXIodG91Y2hFdmVudFRhcmdldCwgXCJ0b3VjaGNhbmNlbFwiLCBvblJlbGVhc2UpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hlbmRcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICAgIF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNobW92ZVwiLCBvbk1vdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3JlbW92ZUxpc3RlbmVyKG93bmVyRG9jLCBcIm1vdXNldXBcIiwgb25SZWxlYXNlKTtcblxuICAgICAgICBfcmVtb3ZlTGlzdGVuZXIob3duZXJEb2MsIFwibW91c2Vtb3ZlXCIsIG9uTW92ZSk7XG4gICAgICB9XG5cbiAgICAgIF9yZW1vdmVTY3JvbGxMaXN0ZW5lcih0YXJnZXQsIHVwZGF0ZVNjcm9sbCk7XG5cbiAgICAgIGVuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKEluZXJ0aWFQbHVnaW4gJiYgdHlwZSAhPT0gXCJzb2Z0XCIpIHtcbiAgICAgICAgSW5lcnRpYVBsdWdpbi51bnRyYWNrKHNjcm9sbFByb3h5IHx8IHRhcmdldCwgeHlNb2RlID8gXCJ4LHlcIiA6IHJvdGF0aW9uTW9kZSA/IFwicm90YXRpb25cIiA6IFwidG9wLGxlZnRcIik7XG4gICAgICAgIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5raWxsKCk7XG4gICAgICB9XG5cbiAgICAgIHNjcm9sbFByb3h5ICYmIHNjcm9sbFByb3h5LmRpc2FibGUoKTtcblxuICAgICAgX3JlbW92ZUZyb21SZW5kZXJRdWV1ZShyZW5kZXIpO1xuXG4gICAgICBzZWxmLmlzRHJhZ2dpbmcgPSBzZWxmLmlzUHJlc3NlZCA9IGlzQ2xpY2tpbmcgPSBmYWxzZTtcbiAgICAgIGRyYWdnaW5nICYmIF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ2VuZFwiLCBcIm9uRHJhZ0VuZFwiKTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH07XG5cbiAgICBfdGhpczIuZW5hYmxlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgdHlwZSkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB2YWx1ZSA/IHNlbGYuZW5hYmxlKHR5cGUpIDogc2VsZi5kaXNhYmxlKHR5cGUpIDogZW5hYmxlZDtcbiAgICB9O1xuXG4gICAgX3RoaXMyLmtpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYudHdlZW4gJiYgc2VsZi50d2Vlbi5raWxsKCk7XG4gICAgICBzZWxmLmRpc2FibGUoKTtcbiAgICAgIGdzYXAuc2V0KHRyaWdnZXJzLCB7XG4gICAgICAgIGNsZWFyUHJvcHM6IFwidXNlclNlbGVjdFwiXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBfbG9va3VwW3RhcmdldC5fZ3NEcmFnSURdO1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIF90aGlzMi5yZXZlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmtpbGwoKTtcbiAgICAgIHRoaXMuc3R5bGVzICYmIHRoaXMuc3R5bGVzLnJldmVydCgpO1xuICAgIH07XG5cbiAgICBpZiAofnR5cGUuaW5kZXhPZihcInNjcm9sbFwiKSkge1xuICAgICAgc2Nyb2xsUHJveHkgPSBfdGhpczIuc2Nyb2xsUHJveHkgPSBuZXcgU2Nyb2xsUHJveHkodGFyZ2V0LCBfZXh0ZW5kKHtcbiAgICAgICAgb25LaWxsOiBmdW5jdGlvbiBvbktpbGwoKSB7XG4gICAgICAgICAgLy9TY3JvbGxQcm94eSdzIG9uS2lsbCgpIGdldHMgY2FsbGVkIGlmL3doZW4gdGhlIFNjcm9sbFByb3h5IHNlbnNlcyB0aGF0IHRoZSB1c2VyIGludGVyYWN0ZWQgd2l0aCB0aGUgc2Nyb2xsIHBvc2l0aW9uIG1hbnVhbGx5IChsaWtlIHVzaW5nIHRoZSBzY3JvbGxiYXIpLiBJRTkgZG9lc24ndCBmaXJlIHRoZSBcIm1vdXNldXBcIiBwcm9wZXJseSB3aGVuIHVzZXJzIGRyYWcgdGhlIHNjcm9sbGJhciBvZiBhbiBlbGVtZW50LCBzbyB0aGlzIHdvcmtzIGFyb3VuZCB0aGF0IGlzc3VlLlxuICAgICAgICAgIHNlbGYuaXNQcmVzc2VkICYmIG9uUmVsZWFzZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSwgdmFycykpOyAvL2EgYnVnIGluIG1hbnkgQW5kcm9pZCBkZXZpY2VzJyBzdG9jayBicm93c2VyIGNhdXNlcyBzY3JvbGxUb3AgdG8gZ2V0IGZvcmNlZCBiYWNrIHRvIDAgYWZ0ZXIgaXQgaXMgYWx0ZXJlZCB2aWEgSlMsIHNvIHdlIHNldCBvdmVyZmxvdyB0byBcImhpZGRlblwiIG9uIG1vYmlsZS90b3VjaCBkZXZpY2VzICh0aGV5IGhpZGUgdGhlIHNjcm9sbCBiYXIgYW55d2F5KS4gVGhhdCB3b3JrcyBhcm91bmQgdGhlIGJ1Zy4gKFRoaXMgYnVnIGlzIGRpc2N1c3NlZCBhdCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2FuZHJvaWQvaXNzdWVzL2RldGFpbD9pZD0xOTYyNSlcblxuICAgICAgdGFyZ2V0LnN0eWxlLm92ZXJmbG93WSA9IGFsbG93WSAmJiAhX2lzVG91Y2hEZXZpY2UgPyBcImF1dG9cIiA6IFwiaGlkZGVuXCI7XG4gICAgICB0YXJnZXQuc3R5bGUub3ZlcmZsb3dYID0gYWxsb3dYICYmICFfaXNUb3VjaERldmljZSA/IFwiYXV0b1wiIDogXCJoaWRkZW5cIjtcbiAgICAgIHRhcmdldCA9IHNjcm9sbFByb3h5LmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgaWYgKHJvdGF0aW9uTW9kZSkge1xuICAgICAga2lsbFByb3BzLnJvdGF0aW9uID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFsbG93WCkge1xuICAgICAgICBraWxsUHJvcHNbeFByb3BdID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFsbG93WSkge1xuICAgICAgICBraWxsUHJvcHNbeVByb3BdID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnc0NhY2hlLmZvcmNlM0QgPSBcImZvcmNlM0RcIiBpbiB2YXJzID8gdmFycy5mb3JjZTNEIDogdHJ1ZTsgLy9vdGhlcndpc2UsIG5vcm1hbCBkcmFnZ2luZyB3b3VsZCBiZSBpbiAyRCBhbmQgdGhlbiBhcyBzb29uIGFzIGl0J3MgcmVsZWFzZWQgYW5kIHRoZXJlJ3MgYW4gaW5lcnRpYSB0d2VlbiwgaXQnZCBqdW1wIHRvIDNEIHdoaWNoIGNhbiBjcmVhdGUgYW4gaW5pdGlhbCBqdW1wIGR1ZSB0byB0aGUgd29yayB0aGUgYnJvd3NlciBtdXN0IHRvIGRvIGxheWVyaXplIGl0LlxuXG4gICAgX2NvbnRleHQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpKTtcblxuICAgIF90aGlzMi5lbmFibGUoKTtcblxuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICBEcmFnZ2FibGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcihjb3JlKSB7XG4gICAgZ3NhcCA9IGNvcmU7XG5cbiAgICBfaW5pdENvcmUoKTtcbiAgfTtcblxuICBEcmFnZ2FibGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHRhcmdldHMsIHZhcnMpIHtcbiAgICBfY29yZUluaXR0ZWQgfHwgX2luaXRDb3JlKHRydWUpO1xuICAgIHJldHVybiBfdG9BcnJheSh0YXJnZXRzKS5tYXAoZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgcmV0dXJuIG5ldyBEcmFnZ2FibGUodGFyZ2V0LCB2YXJzKTtcbiAgICB9KTtcbiAgfTtcblxuICBEcmFnZ2FibGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiBfbG9va3VwWyhfdG9BcnJheSh0YXJnZXQpWzBdIHx8IHt9KS5fZ3NEcmFnSURdO1xuICB9O1xuXG4gIERyYWdnYWJsZS50aW1lU2luY2VEcmFnID0gZnVuY3Rpb24gdGltZVNpbmNlRHJhZygpIHtcbiAgICByZXR1cm4gKF9nZXRUaW1lKCkgLSBfbGFzdERyYWdUaW1lKSAvIDEwMDA7XG4gIH07XG5cbiAgRHJhZ2dhYmxlLmhpdFRlc3QgPSBmdW5jdGlvbiBoaXRUZXN0KG9iajEsIG9iajIsIHRocmVzaG9sZCkge1xuICAgIGlmIChvYmoxID09PSBvYmoyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHIxID0gX3BhcnNlUmVjdChvYmoxKSxcbiAgICAgICAgcjIgPSBfcGFyc2VSZWN0KG9iajIpLFxuICAgICAgICB0b3AgPSByMS50b3AsXG4gICAgICAgIGxlZnQgPSByMS5sZWZ0LFxuICAgICAgICByaWdodCA9IHIxLnJpZ2h0LFxuICAgICAgICBib3R0b20gPSByMS5ib3R0b20sXG4gICAgICAgIHdpZHRoID0gcjEud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHIxLmhlaWdodCxcbiAgICAgICAgaXNPdXRzaWRlID0gcjIubGVmdCA+IHJpZ2h0IHx8IHIyLnJpZ2h0IDwgbGVmdCB8fCByMi50b3AgPiBib3R0b20gfHwgcjIuYm90dG9tIDwgdG9wLFxuICAgICAgICBvdmVybGFwLFxuICAgICAgICBhcmVhLFxuICAgICAgICBpc1JhdGlvO1xuXG4gICAgaWYgKGlzT3V0c2lkZSB8fCAhdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gIWlzT3V0c2lkZTtcbiAgICB9XG5cbiAgICBpc1JhdGlvID0gKHRocmVzaG9sZCArIFwiXCIpLmluZGV4T2YoXCIlXCIpICE9PSAtMTtcbiAgICB0aHJlc2hvbGQgPSBwYXJzZUZsb2F0KHRocmVzaG9sZCkgfHwgMDtcbiAgICBvdmVybGFwID0ge1xuICAgICAgbGVmdDogTWF0aC5tYXgobGVmdCwgcjIubGVmdCksXG4gICAgICB0b3A6IE1hdGgubWF4KHRvcCwgcjIudG9wKVxuICAgIH07XG4gICAgb3ZlcmxhcC53aWR0aCA9IE1hdGgubWluKHJpZ2h0LCByMi5yaWdodCkgLSBvdmVybGFwLmxlZnQ7XG4gICAgb3ZlcmxhcC5oZWlnaHQgPSBNYXRoLm1pbihib3R0b20sIHIyLmJvdHRvbSkgLSBvdmVybGFwLnRvcDtcblxuICAgIGlmIChvdmVybGFwLndpZHRoIDwgMCB8fCBvdmVybGFwLmhlaWdodCA8IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaXNSYXRpbykge1xuICAgICAgdGhyZXNob2xkICo9IDAuMDE7XG4gICAgICBhcmVhID0gb3ZlcmxhcC53aWR0aCAqIG92ZXJsYXAuaGVpZ2h0O1xuICAgICAgcmV0dXJuIGFyZWEgPj0gd2lkdGggKiBoZWlnaHQgKiB0aHJlc2hvbGQgfHwgYXJlYSA+PSByMi53aWR0aCAqIHIyLmhlaWdodCAqIHRocmVzaG9sZDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3ZlcmxhcC53aWR0aCA+IHRocmVzaG9sZCAmJiBvdmVybGFwLmhlaWdodCA+IHRocmVzaG9sZDtcbiAgfTtcblxuICByZXR1cm4gRHJhZ2dhYmxlO1xufShFdmVudERpc3BhdGNoZXIpO1xuXG5fc2V0RGVmYXVsdHMoRHJhZ2dhYmxlLnByb3RvdHlwZSwge1xuICBwb2ludGVyWDogMCxcbiAgcG9pbnRlclk6IDAsXG4gIHN0YXJ0WDogMCxcbiAgc3RhcnRZOiAwLFxuICBkZWx0YVg6IDAsXG4gIGRlbHRhWTogMCxcbiAgaXNEcmFnZ2luZzogZmFsc2UsXG4gIGlzUHJlc3NlZDogZmFsc2Vcbn0pO1xuXG5EcmFnZ2FibGUuekluZGV4ID0gMTAwMDtcbkRyYWdnYWJsZS52ZXJzaW9uID0gXCIzLjEyLjVcIjtcbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihEcmFnZ2FibGUpO1xuZXhwb3J0IHsgRHJhZ2dhYmxlIGFzIGRlZmF1bHQgfTsiXSwibmFtZXMiOlsiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJnZXRHbG9iYWxNYXRyaXgiLCJNYXRyaXgyRCIsImdzYXAiLCJfd2luIiwiX2RvYyIsIl9kb2NFbGVtZW50IiwiX2JvZHkiLCJfdGVtcERpdiIsIl9wbGFjZWhvbGRlckRpdiIsIl9jb3JlSW5pdHRlZCIsIl9jaGVja1ByZWZpeCIsIl90b0FycmF5IiwiX3N1cHBvcnRzUGFzc2l2ZSIsIl9pc1RvdWNoRGV2aWNlIiwiX3RvdWNoRXZlbnRMb29rdXAiLCJfaXNNdWx0aVRvdWNoaW5nIiwiX2lzQW5kcm9pZCIsIkluZXJ0aWFQbHVnaW4iLCJfZGVmYXVsdEN1cnNvciIsIl9zdXBwb3J0c1BvaW50ZXIiLCJfY29udGV4dCIsIl9nZXRTdHlsZVNhdmVyIiwiX2RyYWdDb3VudCIsIl93aW5kb3dFeGlzdHMiLCJfZ2V0R1NBUCIsIndpbmRvdyIsInJlZ2lzdGVyUGx1Z2luIiwiX2lzRnVuY3Rpb24iLCJ2YWx1ZSIsIl9pc09iamVjdCIsIl9pc1VuZGVmaW5lZCIsIl9lbXB0eUZ1bmMiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX3JvdW5kIiwiTWF0aCIsInJvdW5kIiwiX2lzQXJyYXkiLCJBcnJheSIsImlzQXJyYXkiLCJfY3JlYXRlRWxlbWVudCIsInR5cGUiLCJucyIsImUiLCJjcmVhdGVFbGVtZW50TlMiLCJyZXBsYWNlIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiX1JBRDJERUciLCJQSSIsIl9iaWdOdW0iLCJfaWRlbnRpdHlNYXRyaXgiLCJfZ2V0VGltZSIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwiX3JlbmRlclF1ZXVlIiwiX2xvb2t1cCIsIl9sb29rdXBDb3VudCIsIl9jbGlja2FibGVUYWdFeHAiLCJfbGFzdERyYWdUaW1lIiwiX3RlbXAxIiwiX3dpbmRvd1Byb3h5IiwiX2NvcHkiLCJvYmoiLCJmYWN0b3IiLCJjb3B5IiwicCIsIl9leHRlbmQiLCJkZWZhdWx0cyIsIl9zZXRUb3VjaEFjdGlvbkZvckFsbERlc2NlbmRhbnRzIiwiZWxlbWVudHMiLCJpIiwibGVuZ3RoIiwiY2hpbGRyZW4iLCJ0b3VjaEFjdGlvbiIsInJlbW92ZVByb3BlcnR5IiwiX3JlbmRlclF1ZXVlVGljayIsImZvckVhY2giLCJmdW5jIiwiX2FkZFRvUmVuZGVyUXVldWUiLCJwdXNoIiwidGlja2VyIiwiYWRkIiwiX3JlbmRlclF1ZXVlVGltZW91dCIsInJlbW92ZSIsIl9yZW1vdmVGcm9tUmVuZGVyUXVldWUiLCJzcGxpY2UiLCJ0byIsIm92ZXJ3cml0ZSIsImRlbGF5IiwiZHVyYXRpb24iLCJvbkNvbXBsZXRlIiwiZGF0YSIsIl9zZXREZWZhdWx0cyIsIl9hZGRMaXN0ZW5lciIsImVsZW1lbnQiLCJjYXB0dXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvdWNoVHlwZSIsInBhc3NpdmUiLCJfcmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3ByZXZlbnREZWZhdWx0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInByZXZlbnRNYW5pcHVsYXRpb24iLCJfaGFzVG91Y2hJRCIsImxpc3QiLCJJRCIsImlkZW50aWZpZXIiLCJfb25NdWx0aVRvdWNoRG9jdW1lbnRFbmQiLCJ0b3VjaGVzIiwidGFyZ2V0IiwiX29uTXVsdGlUb3VjaERvY3VtZW50IiwiX2dldERvY1Njcm9sbFRvcCIsImRvYyIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiZG9jdW1lbnRFbGVtZW50IiwiYm9keSIsIl9nZXREb2NTY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwiX2FkZFNjcm9sbExpc3RlbmVyIiwiY2FsbGJhY2siLCJfaXNSb290IiwicGFyZW50Tm9kZSIsIl9yZW1vdmVTY3JvbGxMaXN0ZW5lciIsIm5vZGVUeXBlIiwiX2dldE1heFNjcm9sbCIsImF4aXMiLCJkaW0iLCJzY3JvbGwiLCJjbGllbnQiLCJtYXgiLCJfcmVjb3JkTWF4U2Nyb2xscyIsInNraXBDdXJyZW50IiwieCIsInkiLCJfZ3NNYXhTY3JvbGxYIiwiX2dzTWF4U2Nyb2xsWSIsIl9nc1Njcm9sbFgiLCJfZ3NTY3JvbGxZIiwiX3NldFN0eWxlIiwicHJvcGVydHkiLCJ0b0xvd2VyQ2FzZSIsIl9nZXRDb21wdXRlZFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIkVsZW1lbnQiLCJob3N0IiwiX3RlbXBSZWN0IiwiX3BhcnNlUmVjdCIsImxlZnQiLCJ0b3AiLCJ3aWR0aCIsInJpZ2h0IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJvd25lckRvY3VtZW50IiwiciIsInBhZ2VYIiwicGFnZVkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfZGlzcGF0Y2hFdmVudCIsImNhbGxiYWNrTmFtZSIsInZhcnMiLCJsaXN0ZW5lcnMiLCJfbGlzdGVuZXJzIiwicmVzdWx0IiwiYXBwbHkiLCJjYWxsYmFja1Njb3BlIiwicG9pbnRlckV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIl9nZXRCb3VuZHMiLCJjb250ZXh0Iiwib2Zmc2V0IiwibWluIiwibWluWCIsIm1pblJvdGF0aW9uIiwibWluWSIsIm1heFgiLCJtYXhSb3RhdGlvbiIsIm1heFkiLCJfZ2V0RWxlbWVudEJvdW5kcyIsIl9wb2ludDEiLCJpc1NWRyIsImdldEJCb3giLCJvd25lclNWR0VsZW1lbnQiLCJtYXRyaXgiLCJwMSIsInAyIiwicDMiLCJwNCIsImJib3giLCJjcyIsInZpZXdCb3giLCJiYXNlVmFsIiwiYm94U2l6aW5nIiwicGFyc2VGbG9hdCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwibXVsdGlwbHkiLCJfcGFyc2VJbmVydGlhIiwiZHJhZ2dhYmxlIiwic25hcCIsImZvcmNlWmVyb1ZlbG9jaXR5IiwiYSIsImwiLCJlbmQiLCJjYWxsIiwidmVsb2NpdHkiLCJfaXNDbGlja2FibGUiLCJnZXRBdHRyaWJ1dGUiLCJ0ZXN0Iiwibm9kZU5hbWUiLCJfc2V0U2VsZWN0YWJsZSIsInNlbGVjdGFibGUiLCJvbmRyYWdzdGFydCIsIm9uc2VsZWN0c3RhcnQiLCJzZXQiLCJsYXp5IiwidXNlclNlbGVjdCIsIl9pc0ZpeGVkIiwicG9zaXRpb24iLCJfc3VwcG9ydHMzRCIsIl9hZGRQYWRkaW5nQlIiLCJTY3JvbGxQcm94eSIsInV0aWxzIiwidG9BcnJheSIsImNvbnRlbnQiLCJkb2N1bWVudCIsIm5vZGUiLCJmaXJzdENoaWxkIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsInByZXZUb3AiLCJwcmV2TGVmdCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiZXh0cmFQYWRSaWdodCIsIm1heExlZnQiLCJtYXhUb3AiLCJlbGVtZW50V2lkdGgiLCJlbGVtZW50SGVpZ2h0IiwiY29udGVudEhlaWdodCIsIm5leHROb2RlIiwidHJhbnNmb3JtU3RhcnQiLCJ0cmFuc2Zvcm1FbmQiLCJmb3JjZTNEIiwiZm9yY2UiLCJhcmd1bWVudHMiLCJkaWYiLCJvbGRPZmZzZXQiLCJraWxsVHdlZW5zT2YiLCJvbktpbGwiLCJfc2tpcCIsInBhZGRpbmdSaWdodCIsIm1heFNjcm9sbFRvcCIsIm1heFNjcm9sbExlZnQiLCJkaXNhYmxlIiwibmV4dFNpYmxpbmciLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiZW5hYmxlIiwiY2FsaWJyYXRlIiwid2lkdGhNYXRjaGVzIiwib2Zmc2V0SGVpZ2h0IiwiZGlzcGxheSIsInBhZGRpbmdMZWZ0Iiwib3ZlcmZsb3ciLCJ2ZXJ0aWNhbEFsaWduIiwicGFkZGluZ0JvdHRvbSIsIl9pbml0Q29yZSIsInJlcXVpcmVkIiwibmF2IiwibmF2aWdhdG9yIiwiUG9pbnRlckV2ZW50IiwiY3NzVGV4dCIsImN1cnNvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJNYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJkaXYiLCJjaGlsZCIsImNoaWxkU3R5bGUiLCJwYXJlbnQiLCJ2YWwiLCJ0eXBlcyIsInN0YW5kYXJkIiwic3BsaXQiLCJjb252ZXJ0ZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImlzUHJlc3NlZCIsImVuZERyYWciLCJwbHVnaW5zIiwiaW5lcnRpYSIsImNvcmUiLCJjaGVja1ByZWZpeCIsImdldFN0eWxlU2F2ZXIiLCJjb25zb2xlIiwid2FybiIsIkV2ZW50RGlzcGF0Y2hlciIsIl9wcm90byIsIl90aGlzIiwiRHJhZ2dhYmxlIiwiX0V2ZW50RGlzcGF0Y2hlciIsIl90aGlzMiIsInN0eWxlcyIsInJvdGF0aW9uIiwiZHJhZ1Jlc2lzdGFuY2UiLCJlZGdlUmVzaXN0YW5jZSIsImlzTmFOIiwibG9ja0F4aXMiLCJhdXRvU2Nyb2xsIiwibG9ja2VkQXhpcyIsImFsbG93RXZlbnREZWZhdWx0IiwiZ2V0UHJvcGVydHkiLCJ4eU1vZGUiLCJyb3RhdGlvbk1vZGUiLCJ4UHJvcCIsInlQcm9wIiwiYWxsb3dYIiwiYWxsb3dZIiwibWluaW11bU1vdmVtZW50IiwidHJpZ2dlcnMiLCJ0cmlnZ2VyIiwiaGFuZGxlIiwia2lsbFByb3BzIiwiZHJhZ0VuZFRpbWUiLCJjaGVja0F1dG9TY3JvbGxCb3VuZHMiLCJhdXRvU2Nyb2xsTWFyZ2luVG9wIiwiYXV0b1Njcm9sbE1hcmdpblJpZ2h0IiwiYXV0b1Njcm9sbE1hcmdpbkJvdHRvbSIsImF1dG9TY3JvbGxNYXJnaW5MZWZ0IiwiaXNDbGlja2FibGUiLCJjbGlja2FibGVUZXN0IiwiY2xpY2tUaW1lIiwiZ3NDYWNoZSIsIl9nc2FwIiwiZ2V0Q2FjaGUiLCJpc0ZpeGVkIiwiZ2V0UHJvcEFzTnVtIiwidW5pdCIsIm93bmVyRG9jIiwiZW5hYmxlZCIsInNjcm9sbFByb3h5Iiwic3RhcnRQb2ludGVyWCIsInN0YXJ0UG9pbnRlclkiLCJzdGFydEVsZW1lbnRYIiwic3RhcnRFbGVtZW50WSIsImhhc0JvdW5kcyIsImhhc0RyYWdDYWxsYmFjayIsImhhc01vdmVDYWxsYmFjayIsInRvdWNoIiwidG91Y2hJRCIsInJvdGF0aW9uT3JpZ2luIiwiZGlydHkiLCJvbGQiLCJzbmFwWCIsInNuYXBZIiwic25hcFhZIiwiaXNDbGlja2luZyIsInRvdWNoRXZlbnRUYXJnZXQiLCJpbnRlcnJ1cHRlZCIsImFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmciLCJ0b3VjaERyYWdBeGlzIiwiaXNEaXNwYXRjaGluZyIsImNsaWNrRGlzcGF0Y2giLCJ0cnVzdGVkQ2xpY2tEaXNwYXRjaCIsImlzUHJldmVudGluZ0RlZmF1bHQiLCJpbm5lck1hdHJpeCIsImRyYWdnZWQiLCJvbkNvbnRleHRNZW51Iiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVuZGVyIiwic3VwcHJlc3NFdmVudHMiLCJpc0RyYWdnaW5nIiwiYXV0b1Njcm9sbEZhY3RvciIsImlzUm9vdCIsInJlY3QiLCJwb2ludGVyWCIsInBvaW50ZXJZIiwiY2hhbmdlWCIsImNoYW5nZVkiLCJnYXAiLCJzY3JvbGxUbyIsInNldFBvaW50ZXJQb3NpdGlvbiIsImRlbHRhWCIsInJlbmRlclRyYW5zZm9ybSIsImRlbHRhWSIsInN5bmNYWSIsInNraXBPblVwZGF0ZSIsInNraXBTbmFwIiwic25hcHBlZFZhbHVlIiwidW5jYWNoZSIsImlzVGhyb3dpbmciLCJidWlsZFNuYXBGdW5jIiwibiIsImVkZ2VUb2xlcmFuY2UiLCJjbG9zZXN0IiwiYWJzRGlmIiwiYnVpbGRQb2ludFNuYXBGdW5jIiwicmFkaXVzIiwicG9pbnQiLCJkeCIsImR5IiwibWluRGlzdCIsImRpc3QiLCJjYWxjdWxhdGVCb3VuZHMiLCJib3VuZHMiLCJ0YXJnZXRCb3VuZHMiLCJzbmFwSXNSYXciLCJsaXZlU25hcCIsInBvaW50cyIsIm9uVGhyb3dDb21wbGV0ZSIsIm9uVGhyb3dJbnRlcnJ1cHQiLCJhbmltYXRlIiwidHdlZW4iLCJvdmVyc2hvb3RUb2xlcmFuY2UiLCJyZXNpc3RhbmNlIiwidGhyb3dSZXNpc3RhbmNlIiwibGlua2VkUHJvcHMiLCJtaW5EdXJhdGlvbiIsIm1heER1cmF0aW9uIiwib3ZlcnNob290IiwiaW5oZXJpdCIsIm9uSW50ZXJydXB0Iiwib25VcGRhdGUiLCJmYXN0TW9kZSIsIm9uVXBkYXRlUGFyYW1zIiwiZW5kWCIsImVuZFkiLCJlbmRSb3RhdGlvbiIsInBsYXkiLCJhcHBseUJvdW5kcyIsInVwZGF0ZU1hdHJpeCIsInNoaWZ0U3RhcnQiLCJzdGFydCIsImVxdWFscyIsImludmVyc2UiLCJyZWNvcmRTdGFydFBvc2l0aW9ucyIsIm9mZnNldFgiLCJvZmZzZXRZIiwicGFyc2VkT3JpZ2luIiwiaXNUd2VlbmluZyIsInhPcmlnaW4iLCJ5T3JpZ2luIiwiYXRhbjIiLCJzdGFydFgiLCJzdGFydFkiLCJpc0FjdGl2ZSIsInJlbW92ZVBsYWNlaG9sZGVyIiwib25QcmVzcyIsImN1cnJlbnRUYXJnZXQiLCJvblJlbGVhc2UiLCJvbk1vdmUiLCJkcmFnQ2xpY2thYmxlcyIsImFsbG93Q29udGV4dE1lbnUiLCJjdHJsS2V5Iiwid2hpY2giLCJjaGFuZ2VkVG91Y2hlcyIsInBvaW50ZXJJZCIsImtpbGwiLCJ6SW5kZXhCb29zdCIsInpJbmRleCIsIm9uRHJhZyIsImRyYWciLCJtb3ZlIiwiYWN0aXZlQ3Vyc29yIiwib3JpZ2luYWxFdmVudCIsImFicyIsImxvY2tBeGlzT25Ub3VjaFNjcm9sbCIsIm9uTG9ja0F4aXMiLCJjYW5jZWxhYmxlIiwiaW52b2tlT25Nb3ZlIiwiZHJhZ1RvbGVyYW5jZSIsInByZXZQb2ludGVyWCIsInByZXZQb2ludGVyWSIsInByZXZTdGFydEVsZW1lbnRZIiwicHJldlgiLCJwcmV2WSIsInByZXZFbmRYIiwicHJldkVuZFkiLCJwcmV2RW5kUm90YXRpb24iLCJwcmV2RGlydHkiLCJ4Q2hhbmdlIiwieUNoYW5nZSIsInRlbXAiLCJjIiwiYiIsImQiLCJmIiwid2FzRHJhZ2dpbmciLCJpc0NvbnRleHRNZW51UmVsZWFzZSIsInBsYWNlaG9sZGVyRGVsYXllZENhbGwiLCJkZWxheWVkQ2FsbCIsInN5bnRoZXRpY0V2ZW50IiwiZXZlbnRUYXJnZXQiLCJzeW50aGV0aWNDbGljayIsInRocm93UHJvcHMiLCJkZWZhdWx0UHJldmVudGVkIiwiY2xpY2siLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJ1cGRhdGVTY3JvbGwiLCJvbkNsaWNrIiwidGltZSIsInJlY2VudGx5Q2xpY2tlZCIsInJlY2VudGx5RHJhZ2dlZCIsImFscmVhZHlEaXNwYXRjaGVkIiwiYWxyZWFkeURpc3BhdGNoZWRUcnVzdGVkIiwidHJ1c3RlZCIsImlzVHJ1c3RlZCIsInN1cHByZXNzQ2xpY2tPbkRyYWciLCJkZXRhaWwiLCJsb2NhbGl6ZVBvaW50Iiwic3RhcnREcmFnIiwiYWxpZ24iLCJyMSIsInIyIiwiaGl0VGVzdCIsInRpbWVTaW5jZURyYWciLCJ0aW1lU2luY2VDbGljayIsInRocmVzaG9sZCIsImdldERpcmVjdGlvbiIsImZyb20iLCJkaWFnb25hbFRocmVzaG9sZCIsIm1vZGUiLCJyYXRpbyIsImRpcmVjdGlvbiIsImdldFZlbG9jaXR5IiwibmV3Qm91bmRzIiwic3RpY2t5IiwidXBkYXRlIiwiaWdub3JlRXh0ZXJuYWxDaGFuZ2VzIiwibSIsIm0yIiwic2V0VmFycyIsImlkIiwidG91Y2hDYWxsb3V0IiwidHJhY2siLCJfZ3NEcmFnSUQiLCJkcmFnZ2luZyIsInVudHJhY2siLCJjbGVhclByb3BzIiwicmV2ZXJ0Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwicmVnaXN0ZXIiLCJ0YXJnZXRzIiwibWFwIiwib2JqMSIsIm9iajIiLCJpc091dHNpZGUiLCJvdmVybGFwIiwiYXJlYSIsImlzUmF0aW8iLCJ2ZXJzaW9uIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/Draggable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/gsap-core.js":
/*!****************************************!*\
  !*** ./node_modules/gsap/gsap-core.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animation: () => (/* binding */ Animation),\n/* harmony export */   Back: () => (/* binding */ Back),\n/* harmony export */   Bounce: () => (/* binding */ Bounce),\n/* harmony export */   Circ: () => (/* binding */ Circ),\n/* harmony export */   Cubic: () => (/* binding */ Cubic),\n/* harmony export */   Elastic: () => (/* binding */ Elastic),\n/* harmony export */   Expo: () => (/* binding */ Expo),\n/* harmony export */   GSCache: () => (/* binding */ GSCache),\n/* harmony export */   Linear: () => (/* binding */ Linear),\n/* harmony export */   Power0: () => (/* binding */ Power0),\n/* harmony export */   Power1: () => (/* binding */ Power1),\n/* harmony export */   Power2: () => (/* binding */ Power2),\n/* harmony export */   Power3: () => (/* binding */ Power3),\n/* harmony export */   Power4: () => (/* binding */ Power4),\n/* harmony export */   PropTween: () => (/* binding */ PropTween),\n/* harmony export */   Quad: () => (/* binding */ Quad),\n/* harmony export */   Quart: () => (/* binding */ Quart),\n/* harmony export */   Quint: () => (/* binding */ Quint),\n/* harmony export */   Sine: () => (/* binding */ Sine),\n/* harmony export */   SteppedEase: () => (/* binding */ SteppedEase),\n/* harmony export */   Strong: () => (/* binding */ Strong),\n/* harmony export */   Timeline: () => (/* binding */ Timeline),\n/* harmony export */   TimelineLite: () => (/* binding */ Timeline),\n/* harmony export */   TimelineMax: () => (/* binding */ Timeline),\n/* harmony export */   Tween: () => (/* binding */ Tween),\n/* harmony export */   TweenLite: () => (/* binding */ Tween),\n/* harmony export */   TweenMax: () => (/* binding */ Tween),\n/* harmony export */   _checkPlugin: () => (/* binding */ _checkPlugin),\n/* harmony export */   _colorExp: () => (/* binding */ _colorExp),\n/* harmony export */   _colorStringFilter: () => (/* binding */ _colorStringFilter),\n/* harmony export */   _config: () => (/* binding */ _config),\n/* harmony export */   _forEachName: () => (/* binding */ _forEachName),\n/* harmony export */   _getCache: () => (/* binding */ _getCache),\n/* harmony export */   _getProperty: () => (/* binding */ _getProperty),\n/* harmony export */   _getSetter: () => (/* binding */ _getSetter),\n/* harmony export */   _isString: () => (/* binding */ _isString),\n/* harmony export */   _isUndefined: () => (/* binding */ _isUndefined),\n/* harmony export */   _missingPlugin: () => (/* binding */ _missingPlugin),\n/* harmony export */   _numExp: () => (/* binding */ _numExp),\n/* harmony export */   _numWithUnitExp: () => (/* binding */ _numWithUnitExp),\n/* harmony export */   _parseRelative: () => (/* binding */ _parseRelative),\n/* harmony export */   _plugins: () => (/* binding */ _plugins),\n/* harmony export */   _relExp: () => (/* binding */ _relExp),\n/* harmony export */   _removeLinkedListItem: () => (/* binding */ _removeLinkedListItem),\n/* harmony export */   _renderComplexString: () => (/* binding */ _renderComplexString),\n/* harmony export */   _replaceRandom: () => (/* binding */ _replaceRandom),\n/* harmony export */   _round: () => (/* binding */ _round),\n/* harmony export */   _roundModifier: () => (/* binding */ _roundModifier),\n/* harmony export */   _setDefaults: () => (/* binding */ _setDefaults),\n/* harmony export */   _sortPropTweensByPriority: () => (/* binding */ _sortPropTweensByPriority),\n/* harmony export */   _ticker: () => (/* binding */ _ticker),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   \"default\": () => (/* binding */ gsap),\n/* harmony export */   distribute: () => (/* binding */ distribute),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   gsap: () => (/* binding */ gsap),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   mapRange: () => (/* binding */ mapRange),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   selector: () => (/* binding */ selector),\n/* harmony export */   shuffle: () => (/* binding */ shuffle),\n/* harmony export */   snap: () => (/* binding */ snap),\n/* harmony export */   splitColor: () => (/* binding */ splitColor),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   unitize: () => (/* binding */ unitize),\n/* harmony export */   wrap: () => (/* binding */ wrap),\n/* harmony export */   wrapYoyo: () => (/* binding */ wrapYoyo)\n/* harmony export */ });\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\n/*!\n * GSAP 3.12.5\n * https://gsap.com\n *\n * @license Copyright 2008-2024, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n        lineHeight: \"\"\n    }\n}, _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n}, _suppressOverwrites, _reverting, _context, _bigNum = 1e8, _tinyNum = 1 / _bigNum, _2PI = Math.PI * 2, _HALF_PI = _2PI / 4, _gsID = 0, _sqrt = Math.sqrt, _cos = Math.cos, _sin = Math.sin, _isString = function _isString(value) {\n    return typeof value === \"string\";\n}, _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n}, _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n}, _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n}, _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n}, _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n}, _windowExists = function _windowExists() {\n    return \"undefined\" !== \"undefined\";\n}, _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n}, _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function() {}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().\n_isArray = Array.isArray, _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.\n_numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g, _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.\n_relExp = /[+-]=-?[.\\d]+/, _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi, // previously /[#\\-+.]*\\b[a-z\\d\\-=+%.]+/gi but didn't catch special characters.\n_unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i, _globalTimeline, _win, _coreInitted, _doc, _globals = {}, _installScope = {}, _coreReady, _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n}, _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n}, _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n}, _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n}, _emptyFunc = function _emptyFunc() {\n    return 0;\n}, _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n}, _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n}, _revertConfig = {\n    suppressEvents: true\n}, _reservedProps = {}, _lazyTweens = [], _lazyLookup = {}, _lastRenderedFrame, _plugins = {}, _effects = {}, _nextGCFrame = 30, _harnessPlugins = [], _callbackNames = \"\", _harness = function _harness(targets) {\n    var target = targets[0], harnessPlugin, i;\n    _isObject(target) || _isFunction(target) || (targets = [\n        targets\n    ]);\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)\n        i = _harnessPlugins.length;\n        while(i-- && !_harnessPlugins[i].targetTest(target)){}\n        harnessPlugin = _harnessPlugins[i];\n    }\n    i = targets.length;\n    while(i--){\n        targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n    return targets;\n}, _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n}, _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n}, _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n}, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).\n_round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n}, _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n}, // increased precision mostly for timing values.\n_parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0), end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n}, _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.\n    var l = toFind.length, i = 0;\n    for(; toSearch.indexOf(toFind[i]) < 0 && ++i < l;){}\n    return i < l;\n}, _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length, a = _lazyTweens.slice(0), i, tween;\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n    for(i = 0; i < l; i++){\n        tween = a[i];\n        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n}, _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n}, _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n}, _passThrough = function _passThrough(p) {\n    return p;\n}, _setDefaults = function _setDefaults(obj, defaults) {\n    for(var p in defaults){\n        p in obj || (obj[p] = defaults[p]);\n    }\n    return obj;\n}, _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function(obj, defaults) {\n        for(var p in defaults){\n            p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n        }\n    };\n}, _merge = function _merge(base, toMerge) {\n    for(var p in toMerge){\n        base[p] = toMerge[p];\n    }\n    return base;\n}, _mergeDeep = function _mergeDeep(base, toMerge) {\n    for(var p in toMerge){\n        p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n    return base;\n}, _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {}, p;\n    for(p in obj){\n        p in excluding || (copy[p] = obj[p]);\n    }\n    return copy;\n}, _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline, func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n    if (_isNotFalse(vars.inherit)) {\n        while(parent){\n            func(vars, parent.vars.defaults);\n            parent = parent.parent || parent._dp;\n        }\n    }\n    return vars;\n}, _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length, match = i === a2.length;\n    while(match && i-- && a1[i] === a2[i]){}\n    return i < 0;\n}, _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = parent[lastProp], t;\n    if (sortBy) {\n        t = child[sortBy];\n        while(prev && prev[sortBy] > t){\n            prev = prev._prev;\n        }\n    }\n    if (prev) {\n        child._next = prev._next;\n        prev._next = child;\n    } else {\n        child._next = parent[firstProp];\n        parent[firstProp] = child;\n    }\n    if (child._next) {\n        child._next._prev = child;\n    } else {\n        parent[lastProp] = child;\n    }\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n}, _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n        firstProp = \"_first\";\n    }\n    if (lastProp === void 0) {\n        lastProp = \"_last\";\n    }\n    var prev = child._prev, next = child._next;\n    if (prev) {\n        prev._next = next;\n    } else if (parent[firstProp] === child) {\n        parent[firstProp] = next;\n    }\n    if (next) {\n        next._prev = prev;\n    } else if (parent[lastProp] === child) {\n        parent[lastProp] = prev;\n    }\n    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.\n}, _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);\n    child._act = 0;\n}, _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)\n        var a = animation;\n        while(a){\n            a._dirty = 1;\n            a = a.parent;\n        }\n    }\n    return animation;\n}, _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n    while(parent && parent.parent){\n        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n        parent._dirty = 1;\n        parent.totalDuration();\n        parent = parent.parent;\n    }\n    return animation;\n}, _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n}, _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n}, _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n}, // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.\n_animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n}, _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n}, _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n}, _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.\n    var parent = animation._dp;\n    if (parent && parent.smoothChildTiming && animation._ts) {\n        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n        _setEnd(animation);\n        parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n    }\n    return animation;\n}, /*\n_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {\n\tlet cycleDuration = duration + repeatDelay,\n\t\ttime = _round(clampedTotalTime % cycleDuration);\n\tif (time > duration) {\n\t\ttime = duration;\n\t}\n\treturn (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;\n},\n*/ _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n    if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {\n        // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).\n        t = _parentToChildTotalTime(timeline.rawTime(), child);\n        if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n            child.render(t, true);\n        }\n    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n        //in case any of the ancestors had completed but should now be enabled...\n        if (timeline._dur < timeline.duration()) {\n            t = timeline;\n            while(t._dp){\n                t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.\n                t = t._dp;\n            }\n        }\n        timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.\n    }\n}, _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)\n    return timeline;\n}, _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n}, _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n    if (!tween._initted) {\n        return 1;\n    }\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n        _lazyTweens.push(tween);\n        tween._lazy = [\n            tTime,\n            suppressEvents\n        ];\n        return 1;\n    }\n}, _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n}, // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0\n_isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n}, _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the \"startAt\" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any \"from\" and \"fromTo\" startAt tweens are rendered the first time at a ratio of 1.\n    repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;\n    if (repeatDelay && tween._repeat) {\n        // in case there's a zero-duration tween that has a repeat with a repeatDelay\n        tTime = _clamp(0, tween._tDur, totalTime);\n        iteration = _animationCycle(tTime, repeatDelay);\n        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n            // if iteration changed\n            prevRatio = 1 - ratio;\n            tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n        }\n    }\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n            // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n            return;\n        }\n        prevIteration = tween._zTime;\n        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.\n        tween.ratio = ratio;\n        tween._from && (ratio = 1 - ratio);\n        tween._time = 0;\n        tween._tTime = tTime;\n        pt = tween._pt;\n        while(pt){\n            pt.r(ratio, pt.d);\n            pt = pt._next;\n        }\n        totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n        tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n        tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n            ratio && _removeFromParent(tween, 1);\n            if (!suppressEvents && !_reverting) {\n                _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n                tween._prom && tween._prom();\n            }\n        }\n    } else if (!tween._zTime) {\n        tween._zTime = totalTime;\n    }\n}, _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n    if (time > prevTime) {\n        child = animation._first;\n        while(child && child._start <= time){\n            if (child.data === \"isPause\" && child._start > prevTime) {\n                return child;\n            }\n            child = child._next;\n        }\n    } else {\n        child = animation._last;\n        while(child && child._start >= time){\n            if (child.data === \"isPause\" && child._start < prevTime) {\n                return child;\n            }\n            child = child._prev;\n        }\n    }\n}, _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat, dur = _roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n}, _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n}, _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n}, _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels, recent = animation._recent || _zeroPosition, clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n    i, offset, isPercent;\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n        //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n        offset = position.charAt(0);\n        isPercent = position.substr(-1) === \"%\";\n        i = position.indexOf(\"=\");\n        if (offset === \"<\" || offset === \">\") {\n            i >= 0 && (position = position.replace(/=/, \"\"));\n            return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n        }\n        if (i < 0) {\n            position in labels || (labels[position] = clippedDuration);\n            return labels[position];\n        }\n        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n        if (isPercent && percentAnimation) {\n            offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n        }\n        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n    return position == null ? clippedDuration : +position;\n}, _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n    if (type) {\n        irVars = vars;\n        parent = timeline;\n        while(parent && !(\"immediateRender\" in irVars)){\n            // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.\n            irVars = parent.vars.defaults || {};\n            parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n        }\n        vars.immediateRender = _isNotFalse(irVars.immediateRender);\n        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // \"from\" vars\n    }\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n}, _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n}, _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n}, getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n}, // note: protect against padded numbers as strings, like \"100.100\". That shouldn't return \"00\" as the unit. If it's numeric, return no unit.\nclamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function(v) {\n        return _clamp(min, max, v);\n    });\n}, _slice = [].slice, _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n}, _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n        accumulator = [];\n    }\n    return ar.forEach(function(value) {\n        var _accumulator;\n        return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n}, //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.\ntoArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [\n        value\n    ] : [];\n}, selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function(v) {\n        var el = value.current || value.nativeElement || value;\n        return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n}, shuffle = function shuffle(a) {\n    return a.sort(function() {\n        return .5 - Math.random();\n    });\n}, // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;\n//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\ndistribute = function distribute(v) {\n    if (_isFunction(v)) {\n        return v;\n    }\n    var vars = _isObject(v) ? v : {\n        each: v\n    }, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n    ease = _parseEase(vars.ease), from = vars.from || 0, base = parseFloat(vars.base) || 0, cache = {}, isDecimal = from > 0 && from < 1, ratios = isNaN(from) || isDecimal, axis = vars.axis, ratioX = from, ratioY = from;\n    if (_isString(from)) {\n        ratioX = ratioY = ({\n            center: .5,\n            edges: .5,\n            end: 1\n        })[from] || 0;\n    } else if (!isDecimal && ratios) {\n        ratioX = from[0];\n        ratioY = from[1];\n    }\n    return function(i, target, a) {\n        var l = (a || vars).length, distances = cache[l], originX, originY, x, y, d, j, max, min, wrapAt;\n        if (!distances) {\n            wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [\n                1,\n                _bigNum\n            ])[1];\n            if (!wrapAt) {\n                max = -_bigNum;\n                while(max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l){}\n                wrapAt < l && wrapAt--;\n            }\n            distances = cache[l] = [];\n            originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n            originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n            max = 0;\n            min = _bigNum;\n            for(j = 0; j < l; j++){\n                x = j % wrapAt - originX;\n                y = originY - (j / wrapAt | 0);\n                distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n                d > max && (max = d);\n                d < min && (min = d);\n            }\n            from === \"random\" && shuffle(distances);\n            distances.max = max - min;\n            distances.min = min;\n            distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n            distances.b = l < 0 ? base - l : base;\n            distances.u = getUnit(vars.amount || vars.each) || 0; //unit\n            ease = ease && l < 0 ? _invertEase(ease) : ease;\n        }\n        l = (distances[i] - distances.min) / distances.max || 0;\n        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors\n    };\n}, _roundModifier = function _roundModifier(v) {\n    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())\n    return function(raw) {\n        var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n        return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!\n    };\n}, snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo), radius, is2D;\n    if (!isArray && _isObject(snapTo)) {\n        radius = isArray = snapTo.radius || _bigNum;\n        if (snapTo.values) {\n            snapTo = toArray(snapTo.values);\n            if (is2D = !_isNumber(snapTo[0])) {\n                radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.\n            }\n        } else {\n            snapTo = _roundModifier(snapTo.increment);\n        }\n    }\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function(raw) {\n        is2D = snapTo(raw);\n        return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function(raw) {\n        var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min = _bigNum, closest = 0, i = snapTo.length, dx, dy;\n        while(i--){\n            if (is2D) {\n                dx = snapTo[i].x - x;\n                dy = snapTo[i].y - y;\n                dx = dx * dx + dy * dy;\n            } else {\n                dx = Math.abs(snapTo[i] - x);\n            }\n            if (dx < min) {\n                min = dx;\n                closest = i;\n            }\n        }\n        closest = !radius || min <= radius ? snapTo[closest] : raw;\n        return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n}, random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function() {\n        return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n}, pipe = function pipe() {\n    for(var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++){\n        functions[_key] = arguments[_key];\n    }\n    return function(value) {\n        return functions.reduce(function(v, f) {\n            return f(v);\n        }, value);\n    };\n}, unitize = function unitize(func, unit) {\n    return function(value) {\n        return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n}, normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n}, _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function(index) {\n        return a[~~wrapper(index)];\n    });\n}, wrap = function wrap(min, max, value) {\n    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function(value) {\n        return (range + (value - min) % range) % range + min;\n    });\n}, wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min, total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function(value) {\n        value = (total + (value - min) % total) % total || 0;\n        return min + (value > range ? total - value : value);\n    });\n}, _replaceRandom = function _replaceRandom(value) {\n    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])\n    var prev = 0, s = \"\", i, nums, end, isArray;\n    while(~(i = value.indexOf(\"random(\", prev))){\n        end = value.indexOf(\")\", i);\n        isArray = value.charAt(i + 7) === \"[\";\n        nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n        s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n        prev = end + 1;\n    }\n    return s + value.substr(prev, value.length - prev);\n}, mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin, outRange = outMax - outMin;\n    return _conditionalReturn(value, function(value) {\n        return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n}, interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function(p) {\n        return (1 - p) * start + p * end;\n    };\n    if (!func) {\n        var isString = _isString(start), master = {}, p, i, interpolators, l, il;\n        progress === true && (mutate = 1) && (progress = null);\n        if (isString) {\n            start = {\n                p: start\n            };\n            end = {\n                p: end\n            };\n        } else if (_isArray(start) && !_isArray(end)) {\n            interpolators = [];\n            l = start.length;\n            il = l - 2;\n            for(i = 1; i < l; i++){\n                interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.\n            }\n            l--;\n            func = function func(p) {\n                p *= l;\n                var i = Math.min(il, ~~p);\n                return interpolators[i](p - i);\n            };\n            progress = end;\n        } else if (!mutate) {\n            start = _merge(_isArray(start) ? [] : {}, start);\n        }\n        if (!interpolators) {\n            for(p in end){\n                _addPropTween.call(master, start, p, \"get\", end[p]);\n            }\n            func = function func(p) {\n                return _renderPropTweens(p, master) || (isString ? start.p : start);\n            };\n        }\n    }\n    return _conditionalReturn(progress, func);\n}, _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    //used for nextLabel() and previousLabel()\n    var labels = timeline.labels, min = _bigNum, p, distance, label;\n    for(p in labels){\n        distance = labels[p] - fromTime;\n        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n            label = p;\n            min = distance;\n        }\n    }\n    return label;\n}, _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars, callback = v[type], prevContext = _context, context = animation._ctx, params, scope, result;\n    if (!callback) {\n        return;\n    }\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n}, _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n}, _quickTween, _registerPluginQueue = [], _createPlugin = function _createPlugin(config) {\n    if (!config) return;\n    config = !config.name && config[\"default\"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.\n    if (_windowExists() || config.headless) {\n        // edge case: some build tools may pass in a null/undefined value\n        var name = config.name, isFunc = _isFunction(config), Plugin = name && !isFunc && config.init ? function() {\n            this._props = [];\n        } : config, //in case someone passes in an object that's not a plugin, like CustomEase\n        instanceDefaults = {\n            init: _emptyFunc,\n            render: _renderPropTweens,\n            add: _addPropTween,\n            kill: _killPropTweensOf,\n            modifier: _addPluginModifier,\n            rawVars: 0\n        }, statics = {\n            targetTest: 0,\n            get: 0,\n            getSetter: _getSetter,\n            aliases: {},\n            register: 0\n        };\n        _wake();\n        if (config !== Plugin) {\n            if (_plugins[name]) {\n                return;\n            }\n            _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods\n            _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods\n            _plugins[Plugin.prop = name] = Plugin;\n            if (config.targetTest) {\n                _harnessPlugins.push(Plugin);\n                _reservedProps[name] = 1;\n            }\n            name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\"; //for the global name. \"motionPath\" should become MotionPathPlugin\n        }\n        _addGlobal(name, Plugin);\n        config.register && config.register(gsap, Plugin, PropTween);\n    } else {\n        _registerPluginQueue.push(config);\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * COLORS\n * --------------------------------------------------------------------------------------\n */ _255 = 255, _colorLookup = {\n    aqua: [\n        0,\n        _255,\n        _255\n    ],\n    lime: [\n        0,\n        _255,\n        0\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    blue: [\n        0,\n        0,\n        _255\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    white: [\n        _255,\n        _255,\n        _255\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    yellow: [\n        _255,\n        _255,\n        0\n    ],\n    orange: [\n        _255,\n        165,\n        0\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    red: [\n        _255,\n        0,\n        0\n    ],\n    pink: [\n        _255,\n        192,\n        203\n    ],\n    cyan: [\n        0,\n        _255,\n        _255\n    ],\n    transparent: [\n        _255,\n        _255,\n        _255,\n        0\n    ]\n}, // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:\n// let ctx = _doc.createElement(\"canvas\").getContext(\"2d\");\n// _forEachName(\"aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan\", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});\n_hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n}, splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [\n        v >> 16,\n        v >> 8 & _255,\n        v & _255\n    ] : 0, r, g, b, h, s, l, max, min, d, wasHSL;\n    if (!a) {\n        if (v.substr(-1) === \",\") {\n            //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n            v = v.substr(0, v.length - 1);\n        }\n        if (_colorLookup[v]) {\n            a = _colorLookup[v];\n        } else if (v.charAt(0) === \"#\") {\n            if (v.length < 6) {\n                //for shorthand like #9F0 or #9F0F (could have alpha)\n                r = v.charAt(1);\n                g = v.charAt(2);\n                b = v.charAt(3);\n                v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n            }\n            if (v.length === 9) {\n                // hex with alpha, like #fd5e53ff\n                a = parseInt(v.substr(1, 6), 16);\n                return [\n                    a >> 16,\n                    a >> 8 & _255,\n                    a & _255,\n                    parseInt(v.substr(7), 16) / 255\n                ];\n            }\n            v = parseInt(v.substr(1), 16);\n            a = [\n                v >> 16,\n                v >> 8 & _255,\n                v & _255\n            ];\n        } else if (v.substr(0, 3) === \"hsl\") {\n            a = wasHSL = v.match(_strictNumExp);\n            if (!toHSL) {\n                h = +a[0] % 360 / 360;\n                s = +a[1] / 100;\n                l = +a[2] / 100;\n                g = l <= .5 ? l * (s + 1) : l + s - l * s;\n                r = l * 2 - g;\n                a.length > 3 && (a[3] *= 1); //cast as number\n                a[0] = _hue(h + 1 / 3, r, g);\n                a[1] = _hue(h, r, g);\n                a[2] = _hue(h - 1 / 3, r, g);\n            } else if (~v.indexOf(\"=\")) {\n                //if relative values are found, just return the raw strings with the relative prefixes in place.\n                a = v.match(_numExp);\n                forceAlpha && a.length < 4 && (a[3] = 1);\n                return a;\n            }\n        } else {\n            a = v.match(_strictNumExp) || _colorLookup.transparent;\n        }\n        a = a.map(Number);\n    }\n    if (toHSL && !wasHSL) {\n        r = a[0] / _255;\n        g = a[1] / _255;\n        b = a[2] / _255;\n        max = Math.max(r, g, b);\n        min = Math.min(r, g, b);\n        l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0;\n        } else {\n            d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n            h *= 60;\n        }\n        a[0] = ~~(h + .5);\n        a[1] = ~~(s * 100 + .5);\n        a[2] = ~~(l * 100 + .5);\n    }\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n}, _colorOrderData = function _colorOrderData(v) {\n    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a \"c\" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()\n    var values = [], c = [], i = -1;\n    v.split(_colorExp).forEach(function(v) {\n        var a = v.match(_numWithUnitExp) || [];\n        values.push.apply(values, a);\n        c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n}, _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\", colors = (s + result).match(_colorExp), type = toHSL ? \"hsla(\" : \"rgba(\", i = 0, c, shell, d, l;\n    if (!colors) {\n        return s;\n    }\n    colors = colors.map(function(color) {\n        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n    if (orderMatchData) {\n        d = _colorOrderData(s);\n        c = orderMatchData.c;\n        if (c.join(result) !== d.c.join(result)) {\n            shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n            l = shell.length - 1;\n            for(; i < l; i++){\n                result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n            }\n        }\n    }\n    if (!shell) {\n        shell = s.split(_colorExp);\n        l = shell.length - 1;\n        for(; i < l; i++){\n            result += shell[i] + colors[i];\n        }\n    }\n    return result + shell[l];\n}, _colorExp = function() {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,\n    p;\n    for(p in _colorLookup){\n        s += \"|\" + p + \"\\\\b\";\n    }\n    return new RegExp(s + \")\", \"gi\");\n}(), _hslExp = /hsl[a]?\\(/, _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"), toHSL;\n    _colorExp.lastIndex = 0;\n    if (_colorExp.test(combined)) {\n        toHSL = _hslExp.test(combined);\n        a[1] = _formatColors(a[1], toHSL);\n        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.\n        return true;\n    }\n}, /*\n * --------------------------------------------------------------------------------------\n * TICKER\n * --------------------------------------------------------------------------------------\n */ _tickerActive, _ticker = function() {\n    var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1000 / 240, _nextTime = _gap, _listeners = [], _id, _req, _raf, _self, _delta, _i, _tick = function _tick(v) {\n        var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;\n        (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);\n        _lastUpdate += elapsed;\n        time = _lastUpdate - _startTime;\n        overlap = time - _nextTime;\n        if (overlap > 0 || manual) {\n            frame = ++_self.frame;\n            _delta = time - _self.time * 1000;\n            _self.time = time = time / 1000;\n            _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n            dispatch = 1;\n        }\n        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n        if (dispatch) {\n            for(_i = 0; _i < _listeners.length; _i++){\n                // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.\n                _listeners[_i](time, _delta, frame, v);\n            }\n        }\n    };\n    _self = {\n        time: 0,\n        frame: 0,\n        tick: function tick() {\n            _tick(true);\n        },\n        deltaRatio: function deltaRatio(fps) {\n            return _delta / (1000 / (fps || 60));\n        },\n        wake: function wake() {\n            if (_coreReady) {\n                if (!_coreInitted && _windowExists()) {\n                    _win = _coreInitted = window;\n                    _doc = _win.document || {};\n                    _globals.gsap = gsap;\n                    (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n                    _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n                    _registerPluginQueue.forEach(_createPlugin);\n                }\n                _raf = typeof requestAnimationFrame !== \"undefined\" && requestAnimationFrame;\n                _id && _self.sleep();\n                _req = _raf || function(f) {\n                    return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n                };\n                _tickerActive = 1;\n                _tick(2);\n            }\n        },\n        sleep: function sleep() {\n            (_raf ? cancelAnimationFrame : clearTimeout)(_id);\n            _tickerActive = 0;\n            _req = _emptyFunc;\n        },\n        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n            _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited\n            _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n        },\n        fps: function fps(_fps) {\n            _gap = 1000 / (_fps || 240);\n            _nextTime = _self.time * 1000 + _gap;\n        },\n        add: function add(callback, once, prioritize) {\n            var func = once ? function(t, d, f, v) {\n                callback(t, d, f, v);\n                _self.remove(func);\n            } : callback;\n            _self.remove(callback);\n            _listeners[prioritize ? \"unshift\" : \"push\"](func);\n            _wake();\n            return func;\n        },\n        remove: function remove(callback, i) {\n            ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n        },\n        _listeners: _listeners\n    };\n    return _self;\n}(), _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n}, //also ensures the core classes are initialized.\n/*\n* -------------------------------------------------\n* EASING\n* -------------------------------------------------\n*/ _easeMap = {}, _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/, _quotesExp = /[\"']/g, _parseObjectInString = function _parseObjectInString(value) {\n    //takes a string like \"{wiggles:10, type:anticipate})\" and turns it into a real object. Notice it ends in \")\" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.\n    var obj = {}, split = value.substr(1, value.length - 3).split(\":\"), key = split[0], i = 1, l = split.length, index, val, parsedVal;\n    for(; i < l; i++){\n        val = split[i];\n        index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n        parsedVal = val.substr(0, index);\n        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n        key = val.substr(index + 1).trim();\n    }\n    return obj;\n}, _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1, close = value.indexOf(\")\"), nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n}, _configEaseFromString = function _configEaseFromString(name) {\n    //name can be a string like \"elastic.out(1,0.5)\", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).\n    var split = (name + \"\").split(\"(\"), ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [\n        _parseObjectInString(split[1])\n    ] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n}, _invertEase = function _invertEase(ease) {\n    return function(p) {\n        return 1 - ease(1 - p);\n    };\n}, // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.\n_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first, ease;\n    while(child){\n        if (child instanceof Timeline) {\n            _propagateYoyoEase(child, isYoyo);\n        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n            if (child.timeline) {\n                _propagateYoyoEase(child.timeline, isYoyo);\n            } else {\n                ease = child._ease;\n                child._ease = child._yEase;\n                child._yEase = ease;\n                child._yoyo = isYoyo;\n            }\n        }\n        child = child._next;\n    }\n}, _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n}, _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n        easeOut = function easeOut(p) {\n            return 1 - easeIn(1 - p);\n        };\n    }\n    if (easeInOut === void 0) {\n        easeInOut = function easeInOut(p) {\n            return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n        };\n    }\n    var ease = {\n        easeIn: easeIn,\n        easeOut: easeOut,\n        easeInOut: easeInOut\n    }, lowercaseName;\n    _forEachName(names, function(name) {\n        _easeMap[name] = _globals[name] = ease;\n        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n        for(var p in ease){\n            _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n        }\n    });\n    return ease;\n}, _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function(p) {\n        return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n}, _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n    p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1), p3 = p2 / _2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut(p) {\n        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    p2 = _2PI / p2; //precalculate to optimize\n    ease.config = function(amplitude, period) {\n        return _configElastic(type, amplitude, period);\n    };\n    return ease;\n}, _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n        overshoot = 1.70158;\n    }\n    var easeOut = function easeOut(p) {\n        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    }, ease = type === \"out\" ? easeOut : type === \"in\" ? function(p) {\n        return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n    ease.config = function(overshoot) {\n        return _configBack(type, overshoot);\n    };\n    return ease;\n}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEase = ratio => {\n// \tlet y = 0.5 + ratio / 2;\n// \treturn p => (2 * (1 - p) * p * y + p * p);\n// },\n// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEaseStrong = ratio => {\n// \tratio = .5 + ratio / 2;\n// \tlet o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),\n// \t\tb = ratio - o,\n// \t\tc = ratio + o;\n// \treturn p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;\n// };\n_forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function(name, i) {\n    var power = i < 5 ? i + 1 : i;\n    _insertEase(name + \",Power\" + (power - 1), i ? function(p) {\n        return Math.pow(p, power);\n    } : function(p) {\n        return p;\n    }, function(p) {\n        return 1 - Math.pow(1 - p, power);\n    }, function(p) {\n        return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n});\n_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n_insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n(function(n, c) {\n    var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut(p) {\n        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n    _insertEase(\"Bounce\", function(p) {\n        return 1 - easeOut(1 - p);\n    }, easeOut);\n})(7.5625, 2.75);\n_insertEase(\"Expo\", function(p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n});\n_insertEase(\"Circ\", function(p) {\n    return -(_sqrt(1 - p * p) - 1);\n});\n_insertEase(\"Sine\", function(p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n});\n_insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n        if (steps === void 0) {\n            steps = 1;\n        }\n        var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max = 1 - _tinyNum;\n        return function(p) {\n            return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n        };\n    }\n};\n_defaults.ease = _easeMap[\"quad.out\"];\n_forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function(name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n});\n/*\n * --------------------------------------------------------------------------------------\n * CACHE\n * --------------------------------------------------------------------------------------\n */ var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n};\n/*\n * --------------------------------------------------------------------------------------\n * ANIMATION\n * --------------------------------------------------------------------------------------\n */ var Animation = /*#__PURE__*/ function() {\n    function Animation(vars) {\n        this.vars = vars;\n        this._delay = +vars.delay || 0;\n        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n            // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.\n            this._rDelay = vars.repeatDelay || 0;\n            this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n        }\n        this._ts = 1;\n        _setDuration(this, +vars.duration, 1, 1);\n        this.data = vars.data;\n        if (_context) {\n            this._ctx = _context;\n            _context.data.push(this);\n        }\n        _tickerActive || _ticker.wake();\n    }\n    var _proto = Animation.prototype;\n    _proto.delay = function delay(value) {\n        if (value || value === 0) {\n            this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n            this._delay = value;\n            return this;\n        }\n        return this._delay;\n    };\n    _proto.duration = function duration(value) {\n        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n    _proto.totalDuration = function totalDuration(value) {\n        if (!arguments.length) {\n            return this._tDur;\n        }\n        this._dirty = 0;\n        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n        _wake();\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        var parent = this._dp;\n        if (parent && parent.smoothChildTiming && this._ts) {\n            _alignPlayhead(this, _totalTime);\n            !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.\n            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.\n            while(parent && parent.parent){\n                if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n                    parent.totalTime(parent._tTime, true);\n                }\n                parent = parent.parent;\n            }\n            if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n                //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.\n                _addToTimeline(this._dp, this, this._start - this._delay);\n            }\n        }\n        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n            // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)\n            this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause\n            //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)\n            //   this._lock = 1;\n            _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;\n        //}\n        }\n        return this;\n    };\n    _proto.time = function time(value, suppressEvents) {\n        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!\n    };\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() > 0 ? 1 : 0;\n    };\n    _proto.progress = function progress(value, suppressEvents) {\n        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;\n    };\n    _proto.iteration = function iteration(value, suppressEvents) {\n        var cycleDuration = this.duration() + this._rDelay;\n        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    } // potential future addition:\n    ;\n    _proto.timeScale = function timeScale(value, suppressEvents) {\n        if (!arguments.length) {\n            return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.\n        }\n        if (this._rts === value) {\n            return this;\n        }\n        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.\n        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.\n        //(+value < 0 && this._rts >= 0) && _callback(this, \"onReverse\", true);\n        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.\n        this._rts = +value || 0;\n        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.\n        this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);\n        _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.\n        return _recacheAncestors(this);\n    };\n    _proto.paused = function paused(value) {\n        if (!arguments.length) {\n            return this._ps;\n        }\n        if (this._ps !== value) {\n            this._ps = value;\n            if (value) {\n                this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.\n                this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the \"real\" timeScale as _rts (recorded time scale)\n            } else {\n                _wake();\n                this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.\n                this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.\n            }\n        }\n        return this;\n    };\n    _proto.startTime = function startTime(value) {\n        if (arguments.length) {\n            this._start = value;\n            var parent = this.parent || this._dp;\n            parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n            return this;\n        }\n        return this._start;\n    };\n    _proto.endTime = function endTime(includeRepeats) {\n        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n    _proto.rawTime = function rawTime(wrapRepeats) {\n        var parent = this.parent || this._dp; // _dp = detached parent\n        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n    _proto.revert = function revert(config) {\n        if (config === void 0) {\n            config = _revertConfig;\n        }\n        var prevIsReverting = _reverting;\n        _reverting = config;\n        if (this._initted || this._startAt) {\n            this.timeline && this.timeline.revert(config);\n            this.totalTime(-0.01, config.suppressEvents);\n        }\n        this.data !== \"nested\" && config.kill !== false && this.kill();\n        _reverting = prevIsReverting;\n        return this;\n    };\n    _proto.globalTime = function globalTime(rawTime) {\n        var animation = this, time = arguments.length ? rawTime : animation.rawTime();\n        while(animation){\n            time = animation._start + time / (Math.abs(animation._ts) || 1);\n            animation = animation._dp;\n        }\n        return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). \"_sat\" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().\n    };\n    _proto.repeat = function repeat(value) {\n        if (arguments.length) {\n            this._repeat = value === Infinity ? -2 : value;\n            return _onUpdateTotalDuration(this);\n        }\n        return this._repeat === -2 ? Infinity : this._repeat;\n    };\n    _proto.repeatDelay = function repeatDelay(value) {\n        if (arguments.length) {\n            var time = this._time;\n            this._rDelay = value;\n            _onUpdateTotalDuration(this);\n            return time ? this.time(time) : this;\n        }\n        return this._rDelay;\n    };\n    _proto.yoyo = function yoyo(value) {\n        if (arguments.length) {\n            this._yoyo = value;\n            return this;\n        }\n        return this._yoyo;\n    };\n    _proto.seek = function seek(position, suppressEvents) {\n        return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n        return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n    _proto.play = function play(from, suppressEvents) {\n        from != null && this.seek(from, suppressEvents);\n        return this.reversed(false).paused(false);\n    };\n    _proto.reverse = function reverse(from, suppressEvents) {\n        from != null && this.seek(from || this.totalDuration(), suppressEvents);\n        return this.reversed(true).paused(false);\n    };\n    _proto.pause = function pause(atTime, suppressEvents) {\n        atTime != null && this.seek(atTime, suppressEvents);\n        return this.paused(true);\n    };\n    _proto.resume = function resume() {\n        return this.paused(false);\n    };\n    _proto.reversed = function reversed(value) {\n        if (arguments.length) {\n            !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.\n            return this;\n        }\n        return this._rts < 0;\n    };\n    _proto.invalidate = function invalidate() {\n        this._initted = this._act = 0;\n        this._zTime = -_tinyNum;\n        return this;\n    };\n    _proto.isActive = function isActive() {\n        var parent = this.parent || this._dp, start = this._start, rawTime;\n        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n        var vars = this.vars;\n        if (arguments.length > 1) {\n            if (!callback) {\n                delete vars[type];\n            } else {\n                vars[type] = callback;\n                params && (vars[type + \"Params\"] = params);\n                type === \"onUpdate\" && (this._onUpdate = callback);\n            }\n            return this;\n        }\n        return vars[type];\n    };\n    _proto.then = function then(onFulfilled) {\n        var self = this;\n        return new Promise(function(resolve) {\n            var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough, _resolve = function _resolve() {\n                var _then = self.then;\n                self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)\n                _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n                resolve(f);\n                self.then = _then;\n            };\n            if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n                _resolve();\n            } else {\n                self._prom = _resolve;\n            }\n        });\n    };\n    _proto.kill = function kill() {\n        _interrupt(this);\n    };\n    return Animation;\n}();\n_setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n});\n/*\n * -------------------------------------------------\n * TIMELINE\n * -------------------------------------------------\n */ var Timeline = /*#__PURE__*/ function(_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n    function Timeline(vars, position) {\n        var _this;\n        if (vars === void 0) {\n            vars = {};\n        }\n        _this = _Animation.call(this, vars) || this;\n        _this.labels = {};\n        _this.smoothChildTiming = !!vars.smoothChildTiming;\n        _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n        _this._sort = _isNotFalse(vars.sortChildren);\n        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n        vars.reversed && _this.reverse();\n        vars.paused && _this.paused(true);\n        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n        return _this;\n    }\n    var _proto2 = Timeline.prototype;\n    _proto2.to = function to(targets, vars, position) {\n        _createTweenType(0, arguments, this);\n        return this;\n    };\n    _proto2.from = function from(targets, vars, position) {\n        _createTweenType(1, arguments, this);\n        return this;\n    };\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n        _createTweenType(2, arguments, this);\n        return this;\n    };\n    _proto2.set = function set(targets, vars, position) {\n        vars.duration = 0;\n        vars.parent = this;\n        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n        vars.immediateRender = !!vars.immediateRender;\n        new Tween(targets, vars, _parsePosition(this, position), 1);\n        return this;\n    };\n    _proto2.call = function call(callback, params, position) {\n        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    } //ONLY for backward compatibility! Maybe delete?\n    ;\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.duration = duration;\n        vars.stagger = vars.stagger || stagger;\n        vars.onComplete = onCompleteAll;\n        vars.onCompleteParams = onCompleteAllParams;\n        vars.parent = this;\n        new Tween(targets, vars, _parsePosition(this, position));\n        return this;\n    };\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        vars.runBackwards = 1;\n        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n        toVars.startAt = fromVars;\n        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.\n        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;\n        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n        if (tTime !== this._tTime || force || crossingStart) {\n            if (prevTime !== this._time && dur) {\n                //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n                tTime += this._time - prevTime;\n                totalTime += this._time - prevTime;\n            }\n            time = tTime;\n            prevStart = this._start;\n            timeScale = this._ts;\n            prevPaused = !timeScale;\n            if (crossingStart) {\n                dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n                (totalTime || !suppressEvents) && (this._zTime = totalTime);\n            }\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                yoyo = this._yoyo;\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && totalTime < 0) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    iteration = ~~(tTime / cycleDuration);\n                    if (iteration && iteration === tTime / cycleDuration) {\n                        time = dur;\n                        iteration--;\n                    }\n                    time > dur && (time = dur);\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the \"repeatDelay\" portion\n                if (yoyo && iteration & 1) {\n                    time = dur - time;\n                    isYoyo = 1;\n                }\n                /*\n        make sure children at the end/beginning of the timeline are rendered properly. If, for example,\n        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n        ensure that zero-duration tweens at the very beginning or end of the Timeline work.\n        */ if (iteration !== prevIteration && !this._lock) {\n                    var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);\n                    iteration < prevIteration && (rewinding = !rewinding);\n                    prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.\n                    this._lock = 1;\n                    this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n                    this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.\n                    !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n                    this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n                    if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n                        // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.\n                        return this;\n                    }\n                    dur = this._dur; // in case the duration changed in the onRepeat\n                    tDur = this._tDur;\n                    if (doesWrap) {\n                        this._lock = 2;\n                        prevTime = rewinding ? dur : -0.0001;\n                        this.render(prevTime, true);\n                        this.vars.repeatRefresh && !isYoyo && this.invalidate();\n                    }\n                    this._lock = 0;\n                    if (!this._ts && !prevPaused) {\n                        return this;\n                    } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.\n                    _propagateYoyoEase(this, isYoyo);\n                }\n            }\n            if (this._hasPause && !this._forcing && this._lock < 2) {\n                pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n                if (pauseTween) {\n                    tTime -= time - (time = pauseTween._start);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n            if (!this._initted) {\n                this._onUpdate = this.vars.onUpdate;\n                this._initted = 1;\n                this._zTime = totalTime;\n                prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).\n            }\n            if (!prevTime && time && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            if (time >= prevTime && totalTime >= 0) {\n                child = this._first;\n                while(child){\n                    next = child._next;\n                    if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            } else {\n                child = this._last;\n                var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.\n                while(child){\n                    next = child._prev;\n                    if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n                        if (child.parent !== this) {\n                            // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n                            return this.render(totalTime, suppressEvents, force);\n                        }\n                        child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.\n                        if (time !== this._time || !this._ts && !prevPaused) {\n                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n                            pauseTween = 0;\n                            next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)\n                            break;\n                        }\n                    }\n                    child = next;\n                }\n            }\n            if (pauseTween && !suppressEvents) {\n                this.pause();\n                pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n                if (this._ts) {\n                    //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).\n                    this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.\n                    _setEnd(this);\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n            if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) {\n                if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {\n                    if (!this._lock) {\n                        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.\n                        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n                            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n                            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    };\n    _proto2.add = function add(child, position) {\n        var _this2 = this;\n        _isNumber(position) || (position = _parsePosition(this, position, child));\n        if (!(child instanceof Animation)) {\n            if (_isArray(child)) {\n                child.forEach(function(obj) {\n                    return _this2.add(obj, position);\n                });\n                return this;\n            }\n            if (_isString(child)) {\n                return this.addLabel(child, position);\n            }\n            if (_isFunction(child)) {\n                child = Tween.delayedCall(0, child);\n            } else {\n                return this;\n            }\n        }\n        return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!\n    };\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n        if (nested === void 0) {\n            nested = true;\n        }\n        if (tweens === void 0) {\n            tweens = true;\n        }\n        if (timelines === void 0) {\n            timelines = true;\n        }\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = -_bigNum;\n        }\n        var a = [], child = this._first;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                if (child instanceof Tween) {\n                    tweens && a.push(child);\n                } else {\n                    timelines && a.push(child);\n                    nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n                }\n            }\n            child = child._next;\n        }\n        return a;\n    };\n    _proto2.getById = function getById(id) {\n        var animations = this.getChildren(1, 1, 1), i = animations.length;\n        while(i--){\n            if (animations[i].vars.id === id) {\n                return animations[i];\n            }\n        }\n    };\n    _proto2.remove = function remove(child) {\n        if (_isString(child)) {\n            return this.removeLabel(child);\n        }\n        if (_isFunction(child)) {\n            return this.killTweensOf(child);\n        }\n        _removeLinkedListItem(this, child);\n        if (child === this._recent) {\n            this._recent = this._last;\n        }\n        return _uncache(this);\n    };\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n        if (!arguments.length) {\n            return this._tTime;\n        }\n        this._forcing = 1;\n        if (!this._dp && this._ts) {\n            //special case for the global timeline (or any other that has no parent or detached parent).\n            this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n        }\n        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n        this._forcing = 0;\n        return this;\n    };\n    _proto2.addLabel = function addLabel(label, position) {\n        this.labels[label] = _parsePosition(this, position);\n        return this;\n    };\n    _proto2.removeLabel = function removeLabel(label) {\n        delete this.labels[label];\n        return this;\n    };\n    _proto2.addPause = function addPause(position, callback, params) {\n        var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n        t.data = \"isPause\";\n        this._hasPause = 1;\n        return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n    _proto2.removePause = function removePause(position) {\n        var child = this._first;\n        position = _parsePosition(this, position);\n        while(child){\n            if (child._start === position && child.data === \"isPause\") {\n                _removeFromParent(child);\n            }\n            child = child._next;\n        }\n    };\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        var tweens = this.getTweensOf(targets, onlyActive), i = tweens.length;\n        while(i--){\n            _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n        }\n        return this;\n    };\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n        var a = [], parsedTargets = toArray(targets), child = this._first, isGlobalTime = _isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans\n        children;\n        while(child){\n            if (child instanceof Tween) {\n                if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n                    // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.\n                    a.push(child);\n                }\n            } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n                a.push.apply(a, children);\n            }\n            child = child._next;\n        }\n        return a;\n    } // potential future feature - targets() on timelines\n    ;\n    _proto2.tweenTo = function tweenTo(position, vars) {\n        vars = vars || {};\n        var tl = this, endTime = _parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = Tween.to(tl, _setDefaults({\n            ease: vars.ease || \"none\",\n            lazy: false,\n            immediateRender: false,\n            time: endTime,\n            overwrite: \"auto\",\n            duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n            onStart: function onStart() {\n                tl.pause();\n                if (!initted) {\n                    var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n                    tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n                    initted = 1;\n                }\n                _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.\n            }\n        }, vars));\n        return immediateRender ? tween.render(0) : tween;\n    };\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n        return this.tweenTo(toPosition, _setDefaults({\n            startAt: {\n                time: _parsePosition(this, fromPosition)\n            }\n        }, vars));\n    };\n    _proto2.recent = function recent() {\n        return this._recent;\n    };\n    _proto2.nextLabel = function nextLabel(afterTime) {\n        if (afterTime === void 0) {\n            afterTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n        if (beforeTime === void 0) {\n            beforeTime = this._time;\n        }\n        return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n    _proto2.currentLabel = function currentLabel(value) {\n        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n        if (ignoreBeforeTime === void 0) {\n            ignoreBeforeTime = 0;\n        }\n        var child = this._first, labels = this.labels, p;\n        while(child){\n            if (child._start >= ignoreBeforeTime) {\n                child._start += amount;\n                child._end += amount;\n            }\n            child = child._next;\n        }\n        if (adjustLabels) {\n            for(p in labels){\n                if (labels[p] >= ignoreBeforeTime) {\n                    labels[p] += amount;\n                }\n            }\n        }\n        return _uncache(this);\n    };\n    _proto2.invalidate = function invalidate(soft) {\n        var child = this._first;\n        this._lock = 0;\n        while(child){\n            child.invalidate(soft);\n            child = child._next;\n        }\n        return _Animation.prototype.invalidate.call(this, soft);\n    };\n    _proto2.clear = function clear(includeLabels) {\n        if (includeLabels === void 0) {\n            includeLabels = true;\n        }\n        var child = this._first, next;\n        while(child){\n            next = child._next;\n            this.remove(child);\n            child = next;\n        }\n        this._dp && (this._time = this._tTime = this._pTime = 0);\n        includeLabels && (this.labels = {});\n        return _uncache(this);\n    };\n    _proto2.totalDuration = function totalDuration(value) {\n        var max = 0, self = this, child = self._last, prevStart = _bigNum, prev, start, parent;\n        if (arguments.length) {\n            return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n        }\n        if (self._dirty) {\n            parent = self.parent;\n            while(child){\n                prev = child._prev; //record it here in case the tween changes position in the sequence...\n                child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.\n                start = child._start;\n                if (start > prevStart && self._sort && child._ts && !self._lock) {\n                    //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n                    self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().\n                    _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n                } else {\n                    prevStart = start;\n                }\n                if (start < 0 && child._ts) {\n                    //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n                    max -= start;\n                    if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n                        self._start += start / self._ts;\n                        self._time -= start;\n                        self._tTime -= start;\n                    }\n                    self.shiftChildren(-start, false, -Infinity);\n                    prevStart = 0;\n                }\n                child._end > max && child._ts && (max = child._end);\n                child = prev;\n            }\n            _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n            self._dirty = 0;\n        }\n        return self._tDur;\n    };\n    Timeline.updateRoot = function updateRoot(time) {\n        if (_globalTimeline._ts) {\n            _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n            _lastRenderedFrame = _ticker.frame;\n        }\n        if (_ticker.frame >= _nextGCFrame) {\n            _nextGCFrame += _config.autoSleep || 120;\n            var child = _globalTimeline._first;\n            if (!child || !child._ts) {\n                if (_config.autoSleep && _ticker._listeners.length < 2) {\n                    while(child && !child._ts){\n                        child = child._next;\n                    }\n                    child || _ticker.sleep();\n                }\n            }\n        }\n    };\n    return Timeline;\n}(Animation);\n_setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n});\nvar _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\"; //ensure values are strings\n    end += \"\";\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n    }\n    if (stringFilter) {\n        a = [\n            start,\n            end\n        ];\n        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n        start = a[0];\n        end = a[1];\n    }\n    startNums = start.match(_complexStringNumExp) || [];\n    while(result = _complexStringNumExp.exec(end)){\n        endNum = result[0];\n        chunk = end.substring(index, result.index);\n        if (color) {\n            color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\") {\n            color = 1;\n        }\n        if (endNum !== startNums[matchIndex++]) {\n            startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n            pt._pt = {\n                _next: pt._pt,\n                p: chunk || matchIndex === 1 ? chunk : \",\",\n                //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n                s: startNum,\n                c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n                m: color && color < 4 ? Math.round : 0\n            };\n            index = _complexStringNumExp.lastIndex;\n        }\n    }\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n    pt.fp = funcParam;\n    if (_relExp.test(end) || hasRandom) {\n        pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n    }\n    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n    return pt;\n}, _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop], parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](), setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc, pt;\n    if (_isString(end)) {\n        if (~end.indexOf(\"random(\")) {\n            end = _replaceRandom(end);\n        }\n        if (end.charAt(1) === \"=\") {\n            pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n            if (pt || pt === 0) {\n                // to avoid isNaN, like if someone passes in a value like \"!= whatever\"\n                end = pt;\n            }\n        }\n    }\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n        if (!isNaN(parsedStart * end) && end !== \"\") {\n            // fun fact: any number multiplied by \"\" is evaluated as the number 0!\n            pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n            funcParam && (pt.fp = funcParam);\n            modifier && pt.modifier(modifier, this, target);\n            return this._pt = pt;\n        }\n        !currentValue && !(prop in target) && _missingPlugin(prop, end);\n        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n}, //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with \"random()\" in them. It does NOT process relative values.\n_processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n        return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n    var copy = {}, p;\n    for(p in vars){\n        copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n    return copy;\n}, _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n        if (tween !== _quickTween) {\n            ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.\n            i = plugin._props.length;\n            while(i--){\n                ptLookup[plugin._props[i]] = pt;\n            }\n        }\n    }\n    return plugin;\n}, _overwritingTween, //store a reference temporarily so we can avoid overwriting itself.\n_forceAllPropTweens, _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets, autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites, tl = tween.timeline, cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.\n        yoyoEase = tween._yEase;\n        tween._yEase = tween._ease;\n        tween._ease = yoyoEase;\n    }\n    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.\n    if (!tl || keyframes && !vars.stagger) {\n        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.\n        harness = targets[0] ? _getCache(targets[0]).harness : 0;\n        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an \"x\" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.\n        cleanVars = _copyExcluding(vars, _reservedProps);\n        if (prevStartAt) {\n            prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.\n            time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a \"startAt\" (not \"from()\" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)\n            // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for \"startAt\" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.\n            prevStartAt._lazy = 0;\n        }\n        if (startAt) {\n            _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n                data: \"isStart\",\n                overwrite: false,\n                parent: parent,\n                immediateRender: true,\n                lazy: !prevStartAt && _isNotFalse(lazy),\n                startAt: null,\n                delay: 0,\n                onUpdate: onUpdate && function() {\n                    return _callback(tween, \"onUpdate\");\n                },\n                stagger: 0\n            }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);\n            tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.\n            tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween\n            time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.\n            if (immediateRender) {\n                if (dur && time <= 0 && tTime <= 0) {\n                    // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.\n                    time && (tween._zTime = time);\n                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n                }\n            }\n        } else if (runBackwards && dur) {\n            //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n            if (!prevStartAt) {\n                time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n                p = _setDefaults({\n                    overwrite: false,\n                    data: \"isFromStart\",\n                    //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n                    lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n                    immediateRender: immediateRender,\n                    //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n                    stagger: 0,\n                    parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(\".class\", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})\n                }, cleanVars);\n                harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})\n                _removeFromParent(tween._startAt = Tween.set(targets, p));\n                tween._startAt._dp = 0; // don't allow it to get put back into root timeline!\n                tween._startAt._sat = tween; // used in globalTime()\n                time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n                tween._zTime = time;\n                if (!immediateRender) {\n                    _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded\n                } else if (!time) {\n                    return;\n                }\n            }\n        }\n        tween._pt = tween._ptCache = 0;\n        lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n        for(i = 0; i < targets.length; i++){\n            target = targets[i];\n            gsData = target._gsap || _harness(targets)[i]._gsap;\n            tween._ptLookup[i] = ptLookup = {};\n            _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n            index = fullTargets === targets ? i : fullTargets.indexOf(target);\n            if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n                tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n                plugin._props.forEach(function(name) {\n                    ptLookup[name] = pt;\n                });\n                plugin.priority && (hasPriority = 1);\n            }\n            if (!harness || harnessVars) {\n                for(p in cleanVars){\n                    if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n                        plugin.priority && (hasPriority = 1);\n                    } else {\n                        ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n                    }\n                }\n            }\n            tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n            if (autoOverwrite && tween._pt) {\n                _overwritingTween = tween;\n                _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!\n                overwritten = !tween.parent;\n                _overwritingTween = 0;\n            }\n            tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n        }\n        hasPriority && _sortPropTweensByPriority(tween);\n        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.\n    }\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.\n    keyframes && time <= 0 && tl.render(_bigNum, true, true); // if there's a 0% keyframe, it'll render in the \"before\" state for any staggered/delayed animations thus when the following tween initializes, it'll use the \"before\" state instead of the \"after\" state as the initial values.\n}, _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property], pt, rootPT, lookup, i;\n    if (!ptCache) {\n        ptCache = tween._ptCache[property] = [];\n        lookup = tween._ptLookup;\n        i = tween._targets.length;\n        while(i--){\n            pt = lookup[i][property];\n            if (pt && pt.d && pt.d._pt) {\n                // it's a plugin, so find the nested PropTween\n                pt = pt.d._pt;\n                while(pt && pt.p !== property && pt.fp !== property){\n                    // \"fp\" is functionParam for things like setting CSS variables which require .setProperty(\"--var-name\", value)\n                    pt = pt._next;\n                }\n            }\n            if (!pt) {\n                // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this\n                // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo(\"x\", 200) for example.\n                _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.\n                tween.vars[property] = \"+=0\";\n                _initTween(tween, time);\n                _forceAllPropTweens = 0;\n                return skipRecursion ? _warn(property + \" not eligible for reset\") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().\n            }\n            ptCache.push(pt);\n        }\n    }\n    i = ptCache.length;\n    while(i--){\n        rootPT = ptCache[i];\n        pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.\n        pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n        pt.c = value - pt.s;\n        rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)\n        rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)\n    }\n}, _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p, i, aliases;\n    if (!propertyAliases) {\n        return vars;\n    }\n    copy = _merge({}, vars);\n    for(p in propertyAliases){\n        if (p in copy) {\n            aliases = propertyAliases[p].split(\",\");\n            i = aliases.length;\n            while(i--){\n                copy[aliases[i]] = copy[p];\n            }\n        }\n    }\n    return copy;\n}, // parses multiple formats, like {\"0%\": {x: 100}, {\"50%\": {x: -20}} and { x: {\"0%\": 100, \"50%\": -20} }, and an \"ease\" can be set on any object. We populate an \"allProps\" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a \"t\" (time), \"v\", (value), and \"e\" (ease) property. This allows us to piece together a timeline later.\n_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\", p, a;\n    if (_isArray(obj)) {\n        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease\n        obj.forEach(function(value, i) {\n            return a.push({\n                t: i / (obj.length - 1) * 100,\n                v: value,\n                e: ease\n            });\n        });\n    } else {\n        for(p in obj){\n            a = allProps[p] || (allProps[p] = []);\n            p === \"ease\" || a.push({\n                t: parseFloat(prop),\n                v: obj[p],\n                e: ease\n            });\n        }\n    }\n}, _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n}, _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\", _staggerPropsToSkip = {};\n_forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function(name) {\n    return _staggerPropsToSkip[name] = 1;\n});\n/*\n * --------------------------------------------------------------------------------------\n * TWEEN\n * --------------------------------------------------------------------------------------\n */ var Tween = /*#__PURE__*/ function(_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n    function Tween(targets, vars, position, skipInherit) {\n        var _this3;\n        if (typeof vars === \"number\") {\n            position.duration = vars;\n            vars = position;\n            position = null;\n        }\n        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n        var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || _globalTimeline, parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [\n            targets\n        ] : toArray(targets), tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;\n        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://gsap.com\", !_config.nullTargetWarn) || [];\n        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property\n        _this3._overwrite = overwrite;\n        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n            vars = _this3.vars;\n            tl = _this3.timeline = new Timeline({\n                data: \"nested\",\n                defaults: defaults || {},\n                targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n            }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.\n            tl.kill();\n            tl.parent = tl._dp = _assertThisInitialized(_this3);\n            tl._start = 0;\n            if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n                l = parsedTargets.length;\n                staggerFunc = stagger && distribute(stagger);\n                if (_isObject(stagger)) {\n                    //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.\n                    for(p in stagger){\n                        if (~_staggerTweenProps.indexOf(p)) {\n                            staggerVarsToMerge || (staggerVarsToMerge = {});\n                            staggerVarsToMerge[p] = stagger[p];\n                        }\n                    }\n                }\n                for(i = 0; i < l; i++){\n                    copy = _copyExcluding(vars, _staggerPropsToSkip);\n                    copy.stagger = 0;\n                    yoyoEase && (copy.yoyoEase = yoyoEase);\n                    staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n                    curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.\n                    copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n                    copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n                    if (!stagger && l === 1 && copy.delay) {\n                        // if someone does delay:\"random(1, 5)\", repeat:-1, for example, the delay shouldn't be inside the repeat.\n                        _this3._delay = delay = copy.delay;\n                        _this3._start += delay;\n                        copy.delay = 0;\n                    }\n                    tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n                    tl._ease = _easeMap.none;\n                }\n                tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!\n            } else if (keyframes) {\n                _inheritDefaults(_setDefaults(tl.vars.defaults, {\n                    ease: \"none\"\n                }));\n                tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n                var time = 0, a, kf, v;\n                if (_isArray(keyframes)) {\n                    keyframes.forEach(function(frame) {\n                        return tl.to(parsedTargets, frame, \">\");\n                    });\n                    tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.\n                } else {\n                    copy = {};\n                    for(p in keyframes){\n                        p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n                    }\n                    for(p in copy){\n                        a = copy[p].sort(function(a, b) {\n                            return a.t - b.t;\n                        });\n                        time = 0;\n                        for(i = 0; i < a.length; i++){\n                            kf = a[i];\n                            v = {\n                                ease: kf.e,\n                                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                            };\n                            v[p] = kf.v;\n                            tl.to(parsedTargets, v, time);\n                            time += v.duration;\n                        }\n                    }\n                    tl.duration() < duration && tl.to({}, {\n                        duration: duration - tl.duration()\n                    }); // in case keyframes didn't go to 100%\n                }\n            }\n            duration || _this3.duration(duration = tl.duration());\n        } else {\n            _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)\n        }\n        if (overwrite === true && !_suppressOverwrites) {\n            _overwritingTween = _assertThisInitialized(_this3);\n            _globalTimeline.killTweensOf(parsedTargets);\n            _overwritingTween = 0;\n        }\n        _addToTimeline(parent, _assertThisInitialized(_this3), position);\n        vars.reversed && _this3.reverse();\n        vars.paused && _this3.paused(true);\n        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n            _this3._tTime = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n            _this3.render(Math.max(0, -delay) || 0); //in case delay is negative\n        }\n        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n        return _this3;\n    }\n    var _proto3 = Tween.prototype;\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n        var prevTime = this._time, tDur = this._tDur, dur = this._dur, isNegative = totalTime < 0, tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;\n        if (!dur) {\n            _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n            //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)\n            time = tTime;\n            timeline = this.timeline;\n            if (this._repeat) {\n                //adjust the time for repeats and yoyos\n                cycleDuration = dur + this._rDelay;\n                if (this._repeat < -1 && isNegative) {\n                    return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n                }\n                time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n                if (tTime === tDur) {\n                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n                    iteration = this._repeat;\n                    time = dur;\n                } else {\n                    iteration = ~~(tTime / cycleDuration);\n                    if (iteration && iteration === _roundPrecise(tTime / cycleDuration)) {\n                        time = dur;\n                        iteration--;\n                    }\n                    time > dur && (time = dur);\n                }\n                isYoyo = this._yoyo && iteration & 1;\n                if (isYoyo) {\n                    yoyoEase = this._yEase;\n                    time = dur - time;\n                }\n                prevIteration = _animationCycle(this._tTime, cycleDuration);\n                if (time === prevTime && !force && this._initted && iteration === prevIteration) {\n                    //could be during the repeatDelay part. No need to render and fire callbacks.\n                    this._tTime = tTime;\n                    return this;\n                }\n                if (iteration !== prevIteration) {\n                    timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality\n                    if (this.vars.repeatRefresh && !isYoyo && !this._lock && this._time !== cycleDuration && this._initted) {\n                        // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).\n                        this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.\n                        this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n                    }\n                }\n            }\n            if (!this._initted) {\n                if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n                    this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.\n                    return this;\n                }\n                if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {\n                    // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!\n                    return this;\n                }\n                if (dur !== this._dur) {\n                    // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.\n                    return this.render(totalTime, suppressEvents, force);\n                }\n            }\n            this._tTime = tTime;\n            this._time = time;\n            if (!this._act && this._ts) {\n                this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n                this._lazy = 0;\n            }\n            this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n            if (this._from) {\n                this.ratio = ratio = 1 - ratio;\n            }\n            if (time && !prevTime && !suppressEvents && !iteration) {\n                _callback(this, \"onStart\");\n                if (this._tTime !== tTime) {\n                    // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.\n                    return this;\n                }\n            }\n            pt = this._pt;\n            while(pt){\n                pt.r(ratio, pt.d);\n                pt = pt._next;\n            }\n            timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n            if (this._onUpdate && !suppressEvents) {\n                isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n                _callback(this, \"onUpdate\");\n            }\n            this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n                isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n                (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n                if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n                    // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();\n                    _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n                    this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n                }\n            }\n        }\n        return this;\n    };\n    _proto3.targets = function targets() {\n        return this._targets;\n    };\n    _proto3.invalidate = function invalidate(soft) {\n        // \"soft\" gives us a way to clear out everything EXCEPT the recorded pre-\"from\" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the \"from\" values would persist and then on the next render, the from() tweens would initialize and the current value would match the \"from\" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.\n        (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n        this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n        this._ptLookup = [];\n        this.timeline && this.timeline.invalidate(soft);\n        return _Animation2.prototype.invalidate.call(this, soft);\n    };\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {\n        _tickerActive || _ticker.wake();\n        this._ts || this.play();\n        var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts), ratio;\n        this._initted || _initTween(this, time);\n        ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.\n        // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.\n        // if (_isObject(property)) { // performance optimization\n        // \tfor (p in property) {\n        // \t\tif (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {\n        // \t\t\treturn this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        // \t\t}\n        // \t}\n        // } else {\n        if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {\n            return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.\n        } //}\n        _alignPlayhead(this, 0);\n        this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n        return this.render(0);\n    };\n    _proto3.kill = function kill(targets, vars) {\n        if (vars === void 0) {\n            vars = \"all\";\n        }\n        if (!targets && (!vars || vars === \"all\")) {\n            this._lazy = this._pt = 0;\n            return this.parent ? _interrupt(this) : this;\n        }\n        if (this.timeline) {\n            var tDur = this.timeline.totalDuration();\n            this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.\n            this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.\n            return this;\n        }\n        var parsedTargets = this._targets, killingTargets = targets ? toArray(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;\n        if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n            vars === \"all\" && (this._pt = 0);\n            return _interrupt(this);\n        }\n        overwrittenProps = this._op = this._op || [];\n        if (vars !== \"all\") {\n            //so people can pass in a comma-delimited list of property names\n            if (_isString(vars)) {\n                p = {};\n                _forEachName(vars, function(name) {\n                    return p[name] = 1;\n                });\n                vars = p;\n            }\n            vars = _addAliasesToVars(parsedTargets, vars);\n        }\n        i = parsedTargets.length;\n        while(i--){\n            if (~killingTargets.indexOf(parsedTargets[i])) {\n                curLookup = propTweenLookup[i];\n                if (vars === \"all\") {\n                    overwrittenProps[i] = vars;\n                    props = curLookup;\n                    curOverwriteProps = {};\n                } else {\n                    curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n                    props = vars;\n                }\n                for(p in props){\n                    pt = curLookup && curLookup[p];\n                    if (pt) {\n                        if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                            _removeLinkedListItem(this, pt, \"_pt\");\n                        }\n                        delete curLookup[p];\n                    }\n                    if (curOverwriteProps !== \"all\") {\n                        curOverwriteProps[p] = 1;\n                    }\n                }\n            }\n        }\n        this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n        return this;\n    };\n    Tween.to = function to(targets, vars) {\n        return new Tween(targets, vars, arguments[2]);\n    };\n    Tween.from = function from(targets, vars) {\n        return _createTweenType(1, arguments);\n    };\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n        return new Tween(callback, 0, {\n            immediateRender: false,\n            lazy: false,\n            overwrite: false,\n            delay: delay,\n            onComplete: callback,\n            onReverseComplete: callback,\n            onCompleteParams: params,\n            onReverseCompleteParams: params,\n            callbackScope: scope\n        }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)\n    };\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n        return _createTweenType(2, arguments);\n    };\n    Tween.set = function set(targets, vars) {\n        vars.duration = 0;\n        vars.repeatDelay || (vars.repeat = 0);\n        return new Tween(targets, vars);\n    };\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n        return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n    return Tween;\n}(Animation);\n_setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)\n// _forEachName(\"to,from,fromTo,set,call,add,addLabel,addPause\", name => {\n// \tTween.prototype[name] = function() {\n// \t\tlet tl = new Timeline();\n// \t\treturn _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));\n// \t}\n// });\n//for backward compatibility. Leverage the timeline calls.\n_forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function(name) {\n    Tween[name] = function() {\n        var tl = new Timeline(), params = _slice.call(arguments, 0);\n        params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n        return tl[name].apply(tl, params);\n    };\n});\n/*\n * --------------------------------------------------------------------------------------\n * PROPTWEEN\n * --------------------------------------------------------------------------------------\n */ var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n}, _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n}, _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n}, _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n}, _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n}, _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n}, _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n}, _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt, s = \"\";\n    if (!ratio && data.b) {\n        //b = beginning string\n        s = data.b;\n    } else if (ratio === 1 && data.e) {\n        //e = ending string\n        s = data.e;\n    } else {\n        while(pt){\n            s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the \"p\" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.\n            pt = pt._next;\n        }\n        s += data.c; //we use the \"c\" of the PropTween to store the final chunk of non-numeric text.\n    }\n    data.set(data.t, data.p, s, data);\n}, _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n    while(pt){\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n    }\n}, _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt, next;\n    while(pt){\n        next = pt._next;\n        pt.p === property && pt.modifier(modifier, tween, target);\n        pt = next;\n    }\n}, _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt, hasNonDependentRemaining, next;\n    while(pt){\n        next = pt._next;\n        if (pt.p === property && !pt.op || pt.op === property) {\n            _removeLinkedListItem(this, pt, \"_pt\");\n        } else if (!pt.dep) {\n            hasNonDependentRemaining = 1;\n        }\n        pt = next;\n    }\n    return !hasNonDependentRemaining;\n}, _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n}, _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt, next, pt2, first, last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)\n    while(pt){\n        next = pt._next;\n        pt2 = first;\n        while(pt2 && pt2.pr > pt.pr){\n            pt2 = pt2._next;\n        }\n        if (pt._prev = pt2 ? pt2._prev : last) {\n            pt._prev._next = pt;\n        } else {\n            first = pt;\n        }\n        if (pt._next = pt2) {\n            pt2._prev = pt;\n        } else {\n            last = pt;\n        }\n        pt = next;\n    }\n    parent._pt = first;\n}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)\nvar PropTween = /*#__PURE__*/ function() {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n        this.t = target;\n        this.s = start;\n        this.c = change;\n        this.p = prop;\n        this.r = renderer || _renderPlain;\n        this.d = data || this;\n        this.set = setter || _setterPlain;\n        this.pr = priority || 0;\n        this._next = next;\n        if (next) {\n            next._prev = this;\n        }\n    }\n    var _proto4 = PropTween.prototype;\n    _proto4.modifier = function modifier(func, tween, target) {\n        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)\n        this.set = _setterWithModifier;\n        this.m = func;\n        this.mt = target; //modifier target\n        this.tween = tween;\n    };\n    return PropTween;\n}(); //Initialization tasks\n_forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function(name) {\n    return _reservedProps[name] = 1;\n});\n_globals.TweenMax = _globals.TweenLite = Tween;\n_globals.TimelineLite = _globals.TimelineMax = Timeline;\n_globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n});\n_config.stringFilter = _colorStringFilter;\nvar _media = [], _listeners = {}, _emptyArray = [], _lastMediaTime = 0, _contextID = 0, _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function(f) {\n        return f();\n    });\n}, _onMediaChange = function _onMediaChange() {\n    var time = Date.now(), matches = [];\n    if (time - _lastMediaTime > 2) {\n        _dispatch(\"matchMediaInit\");\n        _media.forEach(function(c) {\n            var queries = c.queries, conditions = c.conditions, match, p, anyMatch, toggled;\n            for(p in queries){\n                match = _win.matchMedia(queries[p]).matches; // Firefox doesn't update the \"matches\" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.\n                match && (anyMatch = 1);\n                if (match !== conditions[p]) {\n                    conditions[p] = match;\n                    toggled = 1;\n                }\n            }\n            if (toggled) {\n                c.revert();\n                anyMatch && matches.push(c);\n            }\n        });\n        _dispatch(\"matchMediaRevert\");\n        matches.forEach(function(c) {\n            return c.onMatch(c, function(func) {\n                return c.add(null, func);\n            });\n        });\n        _lastMediaTime = time;\n        _dispatch(\"matchMedia\");\n    }\n};\nvar Context = /*#__PURE__*/ function() {\n    function Context(func, scope) {\n        this.selector = scope && selector(scope);\n        this.data = [];\n        this._r = []; // returned/cleanup functions\n        this.isReverted = false;\n        this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because \"this\" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely\n        func && this.add(func);\n    }\n    var _proto5 = Context.prototype;\n    _proto5.add = function add(name, func, scope) {\n        // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.\n        // if (name && _isFunction(name.revert)) {\n        // \tthis.data.push(name);\n        // \treturn (name._ctx = this);\n        // }\n        if (_isFunction(name)) {\n            scope = func;\n            func = name;\n            name = _isFunction;\n        }\n        var self = this, f = function f() {\n            var prev = _context, prevSelector = self.selector, result;\n            prev && prev !== self && prev.data.push(self);\n            scope && (self.selector = selector(scope));\n            _context = self;\n            result = func.apply(self, arguments);\n            _isFunction(result) && self._r.push(result);\n            _context = prev;\n            self.selector = prevSelector;\n            self.isReverted = false;\n            return result;\n        };\n        self.last = f;\n        return name === _isFunction ? f(self, function(func) {\n            return self.add(null, func);\n        }) : name ? self[name] = f : f;\n    };\n    _proto5.ignore = function ignore(func) {\n        var prev = _context;\n        _context = null;\n        func(this);\n        _context = prev;\n    };\n    _proto5.getTweens = function getTweens() {\n        var a = [];\n        this.data.forEach(function(e) {\n            return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n        });\n        return a;\n    };\n    _proto5.clear = function clear() {\n        this._r.length = this.data.length = 0;\n    };\n    _proto5.kill = function kill(revert, matchMedia) {\n        var _this4 = this;\n        if (revert) {\n            (function() {\n                var tweens = _this4.getTweens(), i = _this4.data.length, t;\n                while(i--){\n                    // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.\n                    t = _this4.data[i];\n                    if (t.data === \"isFlip\") {\n                        t.revert();\n                        t.getChildren(true, true, false).forEach(function(tween) {\n                            return tweens.splice(tweens.indexOf(tween), 1);\n                        });\n                    }\n                } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort\n                tweens.map(function(t) {\n                    return {\n                        g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,\n                        t: t\n                    };\n                }).sort(function(a, b) {\n                    return b.g - a.g || -Infinity;\n                }).forEach(function(o) {\n                    return o.t.revert(revert);\n                }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the \" || -1\" in the sort keeps the order properly.\n                i = _this4.data.length;\n                while(i--){\n                    // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first\n                    t = _this4.data[i];\n                    if (t instanceof Timeline) {\n                        if (t.data !== \"nested\") {\n                            t.scrollTrigger && t.scrollTrigger.revert();\n                            t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens\n                        }\n                    } else {\n                        !(t instanceof Tween) && t.revert && t.revert(revert);\n                    }\n                }\n                _this4._r.forEach(function(f) {\n                    return f(revert, _this4);\n                });\n                _this4.isReverted = true;\n            })();\n        } else {\n            this.data.forEach(function(e) {\n                return e.kill && e.kill();\n            });\n        }\n        this.clear();\n        if (matchMedia) {\n            var i = _media.length;\n            while(i--){\n                // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.\n                _media[i].id === this.id && _media.splice(i, 1);\n            }\n        }\n    };\n    _proto5.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    return Context;\n}();\nvar MatchMedia = /*#__PURE__*/ function() {\n    function MatchMedia(scope) {\n        this.contexts = [];\n        this.scope = scope;\n        _context && _context.data.push(this);\n    }\n    var _proto6 = MatchMedia.prototype;\n    _proto6.add = function add(conditions, func, scope) {\n        _isObject(conditions) || (conditions = {\n            matches: conditions\n        });\n        var context = new Context(0, scope || this.scope), cond = context.conditions = {}, mq, p, active;\n        _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()\n        this.contexts.push(context);\n        func = context.add(\"onMatch\", func);\n        context.queries = conditions;\n        for(p in conditions){\n            if (p === \"all\") {\n                active = 1;\n            } else {\n                mq = _win.matchMedia(conditions[p]);\n                if (mq) {\n                    _media.indexOf(context) < 0 && _media.push(context);\n                    (cond[p] = mq.matches) && (active = 1);\n                    mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n                }\n            }\n        }\n        active && func(context, function(f) {\n            return context.add(null, f);\n        });\n        return this;\n    } // refresh() {\n    ;\n    _proto6.revert = function revert(config) {\n        this.kill(config || {});\n    };\n    _proto6.kill = function kill(revert) {\n        this.contexts.forEach(function(c) {\n            return c.kill(revert, true);\n        });\n    };\n    return MatchMedia;\n}();\n/*\n * --------------------------------------------------------------------------------------\n * GSAP\n * --------------------------------------------------------------------------------------\n */ var _gsap = {\n    registerPlugin: function registerPlugin() {\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        args.forEach(function(config) {\n            return _createPlugin(config);\n        });\n    },\n    timeline: function timeline(vars) {\n        return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n        return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n        _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in\n        var getter = _getCache(target || {}).get, format = unit ? _passThrough : _numericIfPossible;\n        unit === \"native\" && (unit = \"\");\n        return !target ? target : !property ? function(property, unit, uncache) {\n            return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n        } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n        target = toArray(target);\n        if (target.length > 1) {\n            var setters = target.map(function(t) {\n                return gsap.quickSetter(t, property, unit);\n            }), l = setters.length;\n            return function(value) {\n                var i = l;\n                while(i--){\n                    setters[i](value);\n                }\n            };\n        }\n        target = target[0] || {};\n        var Plugin = _plugins[property], cache = _getCache(target), p = cache.harness && (cache.harness.aliases || {})[property] || property, // in case it's an alias, like \"rotate\" for \"rotation\".\n        setter = Plugin ? function(value) {\n            var p = new Plugin();\n            _quickTween._pt = 0;\n            p.init(target, unit ? value + unit : value, _quickTween, 0, [\n                target\n            ]);\n            p.render(1, p);\n            _quickTween._pt && _renderPropTweens(1, _quickTween);\n        } : cache.set(target, p);\n        return Plugin ? setter : function(value) {\n            return setter(target, p, unit ? value + unit : value, cache, 1);\n        };\n    },\n    quickTo: function quickTo(target, property, vars) {\n        var _merge2;\n        var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})), func = function func(value, start, startIsRelative) {\n            return tween.resetTo(property, value, start, startIsRelative);\n        };\n        func.tween = tween;\n        return func;\n    },\n    isTweening: function isTweening(targets) {\n        return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n        value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n        return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n        return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n        var name = _ref3.name, effect = _ref3.effect, plugins = _ref3.plugins, defaults = _ref3.defaults, extendTimeline = _ref3.extendTimeline;\n        (plugins || \"\").split(\",\").forEach(function(pluginName) {\n            return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n        });\n        _effects[name] = function(targets, vars, tl) {\n            return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n        };\n        if (extendTimeline) {\n            Timeline.prototype[name] = function(targets, vars, position) {\n                return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n            };\n        }\n    },\n    registerEase: function registerEase(name, ease) {\n        _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n        return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n        if (vars === void 0) {\n            vars = {};\n        }\n        var tl = new Timeline(vars), child, next;\n        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n        _globalTimeline.remove(tl);\n        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).\n        tl._time = tl._tTime = _globalTimeline._time;\n        child = _globalTimeline._first;\n        while(child){\n            next = child._next;\n            if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n                _addToTimeline(tl, child, child._start - child._delay);\n            }\n            child = next;\n        }\n        _addToTimeline(_globalTimeline, tl, 0);\n        return tl;\n    },\n    context: function context(func, scope) {\n        return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n        return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n        return _media.forEach(function(c) {\n            var cond = c.conditions, found, p;\n            for(p in cond){\n                if (cond[p]) {\n                    cond[p] = false;\n                    found = 1;\n                }\n            }\n            found && c.revert();\n        }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n        var a = _listeners[type] || (_listeners[type] = []);\n        ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n        var a = _listeners[type], i = a && a.indexOf(callback);\n        i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n        wrap: wrap,\n        wrapYoyo: wrapYoyo,\n        distribute: distribute,\n        random: random,\n        snap: snap,\n        normalize: normalize,\n        getUnit: getUnit,\n        clamp: clamp,\n        splitColor: splitColor,\n        toArray: toArray,\n        selector: selector,\n        mapRange: mapRange,\n        pipe: pipe,\n        unitize: unitize,\n        interpolate: interpolate,\n        shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n        PropTween: PropTween,\n        globals: _addGlobal,\n        Tween: Tween,\n        Timeline: Timeline,\n        Animation: Animation,\n        getCache: _getCache,\n        _removeLinkedListItem: _removeLinkedListItem,\n        reverting: function reverting() {\n            return _reverting;\n        },\n        context: function context(toAdd) {\n            if (toAdd && _context) {\n                _context.data.push(toAdd);\n                toAdd._ctx = _context;\n            }\n            return _context;\n        },\n        suppressOverwrites: function suppressOverwrites(value) {\n            return _suppressOverwrites = value;\n        }\n    }\n};\n_forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function(name) {\n    return _gsap[name] = Tween[name];\n});\n_ticker.add(Timeline.updateRoot);\n_quickTween = _gsap.to({}, {\n    duration: 0\n}); // ---- EXTRA PLUGINS --------------------------------------------------------\nvar _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n    while(pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop){\n        pt = pt._next;\n    }\n    return pt;\n}, _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets, p, i, pt;\n    for(p in modifiers){\n        i = targets.length;\n        while(i--){\n            pt = tween._ptLookup[i][p];\n            if (pt && (pt = pt.d)) {\n                if (pt._pt) {\n                    // is a plugin\n                    pt = _getPluginPropTween(pt, p);\n                }\n                pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n            }\n        }\n    }\n}, _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n        name: name,\n        rawVars: 1,\n        //don't pre-process function-based values or \"random()\" strings.\n        init: function init(target, vars, tween) {\n            tween._onInit = function(tween) {\n                var temp, p;\n                if (_isString(vars)) {\n                    temp = {};\n                    _forEachName(vars, function(name) {\n                        return temp[name] = 1;\n                    }); //if the user passes in a comma-delimited list of property names to roundProps, like \"x,y\", we round to whole numbers.\n                    vars = temp;\n                }\n                if (modifier) {\n                    temp = {};\n                    for(p in vars){\n                        temp[p] = modifier(vars[p]);\n                    }\n                    vars = temp;\n                }\n                _addModifiers(tween, vars);\n            };\n        }\n    };\n}; //register core plugins\nvar gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n        var p, pt, v;\n        this.tween = tween;\n        for(p in vars){\n            v = target.getAttribute(p) || \"\";\n            pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n            pt.op = p;\n            pt.b = v; // record the beginning value so we can revert()\n            this._props.push(p);\n        }\n    },\n    render: function render(ratio, data) {\n        var pt = data._pt;\n        while(pt){\n            _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)\n            pt = pt._next;\n        }\n    }\n}, {\n    name: \"endArray\",\n    init: function init(target, value) {\n        var i = value.length;\n        while(i--){\n            this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n        }\n    }\n}, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.\nTween.version = Timeline.version = gsap.version = \"3.12.5\";\n_coreReady = 1;\n_windowExists() && _wake();\nvar Power0 = _easeMap.Power0, Power1 = _easeMap.Power1, Power2 = _easeMap.Power2, Power3 = _easeMap.Power3, Power4 = _easeMap.Power4, Linear = _easeMap.Linear, Quad = _easeMap.Quad, Cubic = _easeMap.Cubic, Quart = _easeMap.Quart, Quint = _easeMap.Quint, Strong = _easeMap.Strong, Elastic = _easeMap.Elastic, Back = _easeMap.Back, SteppedEase = _easeMap.SteppedEase, Bounce = _easeMap.Bounce, Sine = _easeMap.Sine, Expo = _easeMap.Expo, Circ = _easeMap.Circ;\n\n //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/gsap-core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/index.js":
/*!************************************!*\
  !*** ./node_modules/gsap/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Back: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Back),\n/* harmony export */   Bounce: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Bounce),\n/* harmony export */   CSSPlugin: () => (/* reexport safe */ _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin),\n/* harmony export */   Circ: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Circ),\n/* harmony export */   Cubic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Cubic),\n/* harmony export */   Elastic: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Elastic),\n/* harmony export */   Expo: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Expo),\n/* harmony export */   Linear: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Linear),\n/* harmony export */   Power0: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power0),\n/* harmony export */   Power1: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power1),\n/* harmony export */   Power2: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power2),\n/* harmony export */   Power3: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power3),\n/* harmony export */   Power4: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Power4),\n/* harmony export */   Quad: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quad),\n/* harmony export */   Quart: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quart),\n/* harmony export */   Quint: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Quint),\n/* harmony export */   Sine: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Sine),\n/* harmony export */   SteppedEase: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.SteppedEase),\n/* harmony export */   Strong: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.Strong),\n/* harmony export */   TimelineLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineLite),\n/* harmony export */   TimelineMax: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TimelineMax),\n/* harmony export */   TweenLite: () => (/* reexport safe */ _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.TweenLite),\n/* harmony export */   TweenMax: () => (/* binding */ TweenMaxWithCSS),\n/* harmony export */   \"default\": () => (/* binding */ gsapWithCSS),\n/* harmony export */   gsap: () => (/* binding */ gsapWithCSS)\n/* harmony export */ });\n/* harmony import */ var _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gsap-core.js */ \"(ssr)/./node_modules/gsap/gsap-core.js\");\n/* harmony import */ var _CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CSSPlugin.js */ \"(ssr)/./node_modules/gsap/CSSPlugin.js\");\n\n\nvar gsapWithCSS = _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap.registerPlugin(_CSSPlugin_js__WEBPACK_IMPORTED_MODULE_1__.CSSPlugin) || _gsap_core_js__WEBPACK_IMPORTED_MODULE_0__.gsap, // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBcU47QUFDMUs7QUFDM0MsSUFBSXVCLGNBQWN2QiwrQ0FBSUEsQ0FBQ3dCLGNBQWMsQ0FBQ0Ysb0RBQVNBLEtBQUt0QiwrQ0FBSUEsRUFDcEQsK0JBQStCO0FBQ25DeUIsa0JBQWtCRixZQUFZRyxJQUFJLENBQUNDLEtBQUs7QUFDc08iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcz8xOGU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiXSwibmFtZXMiOlsiZ3NhcCIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIkxpbmVhciIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIlN0ZXBwZWRFYXNlIiwiQm91bmNlIiwiU2luZSIsIkV4cG8iLCJDaXJjIiwiVHdlZW5MaXRlIiwiVGltZWxpbmVMaXRlIiwiVGltZWxpbmVNYXgiLCJDU1NQbHVnaW4iLCJnc2FwV2l0aENTUyIsInJlZ2lzdGVyUGx1Z2luIiwiVHdlZW5NYXhXaXRoQ1NTIiwiY29yZSIsIlR3ZWVuIiwiZGVmYXVsdCIsIlR3ZWVuTWF4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/gsap/utils/matrix.js":
/*!*******************************************!*\
  !*** ./node_modules/gsap/utils/matrix.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Matrix2D: () => (/* binding */ Matrix2D),\n/* harmony export */   _getCTM: () => (/* binding */ _getCTM),\n/* harmony export */   _getDocScrollLeft: () => (/* binding */ _getDocScrollLeft),\n/* harmony export */   _getDocScrollTop: () => (/* binding */ _getDocScrollTop),\n/* harmony export */   _isFixed: () => (/* binding */ _isFixed),\n/* harmony export */   _setDoc: () => (/* binding */ _setDoc),\n/* harmony export */   getGlobalMatrix: () => (/* binding */ getGlobalMatrix)\n/* harmony export */ });\n/*!\n * matrix 3.12.5\n * https://gsap.com\n *\n * Copyright 2008-2024, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/ /* eslint-disable */ var _doc, _win, _docElement, _body, _divContainer, _svgContainer, _identityMatrix, _gEl, _transformProp = \"transform\", _transformOriginProp = _transformProp + \"Origin\", _hasOffsetBug, _setDoc = function _setDoc(element) {\n    var doc = element.ownerDocument || element;\n    if (!(_transformProp in element.style) && \"msTransform\" in element.style) {\n        //to improve compatibility with old Microsoft browsers\n        _transformProp = \"msTransform\";\n        _transformOriginProp = _transformProp + \"Origin\";\n    }\n    while(doc.parentNode && (doc = doc.parentNode)){}\n    _win = window;\n    _identityMatrix = new Matrix2D();\n    if (doc) {\n        _doc = doc;\n        _docElement = doc.documentElement;\n        _body = doc.body;\n        _gEl = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"); // prevent any existing CSS from transforming it\n        _gEl.style.transform = \"none\"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon.\n        var d1 = doc.createElement(\"div\"), d2 = doc.createElement(\"div\"), root = doc && (doc.body || doc.firstElementChild);\n        if (root && root.appendChild) {\n            root.appendChild(d1);\n            d1.appendChild(d2);\n            d1.setAttribute(\"style\", \"position:static;transform:translate3d(0,0,1px)\");\n            _hasOffsetBug = d2.offsetParent !== d1;\n            root.removeChild(d1);\n        }\n    }\n    return doc;\n}, _forceNonZeroScale = function _forceNonZeroScale(e) {\n    // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.\n    var a, cache;\n    while(e && e !== _body){\n        cache = e._gsap;\n        cache && cache.uncache && cache.get(e, \"x\"); // force re-parsing of transforms if necessary\n        if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {\n            cache.scaleX = cache.scaleY = 1e-4;\n            cache.renderTransform(1, cache);\n            a ? a.push(cache) : a = [\n                cache\n            ];\n        }\n        e = e.parentNode;\n    }\n    return a;\n}, // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.\n// _forceDisplay = e => {\n// \tlet a = [],\n// \t\tparent;\n// \twhile (e && e !== _body) {\n// \t\tparent = e.parentNode;\n// \t\t(_win.getComputedStyle(e).display === \"none\" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = \"block\");\n// \t\tparent || _body.appendChild(e);\n// \t\te = parent;\n// \t}\n// \treturn a;\n// },\n// _revertDisplay = a => {\n// \tfor (let i = 0; i < a.length; i+=3) {\n// \t\ta[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty(\"display\");\n// \t\ta[i+2] || a[i].parentNode.removeChild(a[i]);\n// \t}\n// },\n_svgTemps = [], //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.\n_divTemps = [], _getDocScrollTop = function _getDocScrollTop() {\n    return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;\n}, _getDocScrollLeft = function _getDocScrollLeft() {\n    return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;\n}, _svgOwner = function _svgOwner(element) {\n    return element.ownerSVGElement || ((element.tagName + \"\").toLowerCase() === \"svg\" ? element : null);\n}, _isFixed = function _isFixed(element) {\n    if (_win.getComputedStyle(element).position === \"fixed\") {\n        return true;\n    }\n    element = element.parentNode;\n    if (element && element.nodeType === 1) {\n        // avoid document fragments which will throw an error.\n        return _isFixed(element);\n    }\n}, _createSibling = function _createSibling(element, i) {\n    if (element.parentNode && (_doc || _setDoc(element))) {\n        var svg = _svgOwner(element), ns = svg ? svg.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\", type = svg ? i ? \"rect\" : \"g\" : \"div\", x = i !== 2 ? 0 : 100, y = i === 3 ? 100 : 0, css = \"position:absolute;display:block;pointer-events:none;margin:0;padding:0;\", e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, \"http\"), type) : _doc.createElement(type);\n        if (i) {\n            if (!svg) {\n                if (!_divContainer) {\n                    _divContainer = _createSibling(element);\n                    _divContainer.style.cssText = css;\n                }\n                e.style.cssText = css + \"width:0.1px;height:0.1px;top:\" + y + \"px;left:\" + x + \"px\";\n                _divContainer.appendChild(e);\n            } else {\n                _svgContainer || (_svgContainer = _createSibling(element));\n                e.setAttribute(\"width\", 0.01);\n                e.setAttribute(\"height\", 0.01);\n                e.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                _svgContainer.appendChild(e);\n            }\n        }\n        return e;\n    }\n    throw \"Need document and parent.\";\n}, _consolidate = function _consolidate(m) {\n    // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n    var c = new Matrix2D(), i = 0;\n    for(; i < m.numberOfItems; i++){\n        c.multiply(m.getItem(i).matrix);\n    }\n    return c;\n}, _getCTM = function _getCTM(svg) {\n    var m = svg.getCTM(), transform;\n    if (!m) {\n        // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.\n        transform = svg.style[_transformProp];\n        svg.style[_transformProp] = \"none\"; // a bug in Firefox causes css transforms to contaminate the getCTM()\n        svg.appendChild(_gEl);\n        m = _gEl.getCTM();\n        svg.removeChild(_gEl);\n        transform ? svg.style[_transformProp] = transform : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n    }\n    return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.\n}, _placeSiblings = function _placeSiblings(element, adjustGOffset) {\n    var svg = _svgOwner(element), isRootSVG = element === svg, siblings = svg ? _svgTemps : _divTemps, parent = element.parentNode, container, m, b, x, y, cs;\n    if (element === _win) {\n        return element;\n    }\n    siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));\n    container = svg ? _svgContainer : _divContainer;\n    if (svg) {\n        if (isRootSVG) {\n            b = _getCTM(element);\n            x = -b.e / b.a;\n            y = -b.f / b.d;\n            m = _identityMatrix;\n        } else if (element.getBBox) {\n            b = element.getBBox();\n            m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.\n            m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://gsap.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n            x = m.a * b.x + m.c * b.y;\n            y = m.b * b.x + m.d * b.y;\n        } else {\n            // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.\n            m = new Matrix2D();\n            x = y = 0;\n        }\n        if (adjustGOffset && element.tagName.toLowerCase() === \"g\") {\n            x = y = 0;\n        }\n        (isRootSVG ? svg : parent).appendChild(container);\n        container.setAttribute(\"transform\", \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + (m.e + x) + \",\" + (m.f + y) + \")\");\n    } else {\n        x = y = 0;\n        if (_hasOffsetBug) {\n            // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.\n            m = element.offsetParent;\n            b = element;\n            while(b && (b = b.parentNode) && b !== m && b.parentNode){\n                if ((_win.getComputedStyle(b)[_transformProp] + \"\").length > 4) {\n                    x = b.offsetLeft;\n                    y = b.offsetTop;\n                    b = 0;\n                }\n            }\n        }\n        cs = _win.getComputedStyle(element);\n        if (cs.position !== \"absolute\" && cs.position !== \"fixed\") {\n            m = element.offsetParent;\n            while(parent && parent !== m){\n                // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.\n                x += parent.scrollLeft || 0;\n                y += parent.scrollTop || 0;\n                parent = parent.parentNode;\n            }\n        }\n        b = container.style;\n        b.top = element.offsetTop - y + \"px\";\n        b.left = element.offsetLeft - x + \"px\";\n        b[_transformProp] = cs[_transformProp];\n        b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;\n        // b.borderLeftStyle = m.borderLeftStyle;\n        // b.borderTopStyle = m.borderTopStyle;\n        // b.borderLeftWidth = m.borderLeftWidth;\n        // b.borderTopWidth = m.borderTopWidth;\n        b.position = cs.position === \"fixed\" ? \"fixed\" : \"absolute\";\n        element.parentNode.appendChild(container);\n    }\n    return container;\n}, _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {\n    m.a = a;\n    m.b = b;\n    m.c = c;\n    m.d = d;\n    m.e = e;\n    m.f = f;\n    return m;\n};\nvar Matrix2D = /*#__PURE__*/ function() {\n    function Matrix2D(a, b, c, d, e, f) {\n        if (a === void 0) {\n            a = 1;\n        }\n        if (b === void 0) {\n            b = 0;\n        }\n        if (c === void 0) {\n            c = 0;\n        }\n        if (d === void 0) {\n            d = 1;\n        }\n        if (e === void 0) {\n            e = 0;\n        }\n        if (f === void 0) {\n            f = 0;\n        }\n        _setMatrix(this, a, b, c, d, e, f);\n    }\n    var _proto = Matrix2D.prototype;\n    _proto.inverse = function inverse() {\n        var a = this.a, b = this.b, c = this.c, d = this.d, e = this.e, f = this.f, determinant = a * d - b * c || 1e-10;\n        return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);\n    };\n    _proto.multiply = function multiply(matrix) {\n        var a = this.a, b = this.b, c = this.c, d = this.d, e = this.e, f = this.f, a2 = matrix.a, b2 = matrix.c, c2 = matrix.b, d2 = matrix.d, e2 = matrix.e, f2 = matrix.f;\n        return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);\n    };\n    _proto.clone = function clone() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);\n    };\n    _proto.equals = function equals(matrix) {\n        var a = this.a, b = this.b, c = this.c, d = this.d, e = this.e, f = this.f;\n        return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;\n    };\n    _proto.apply = function apply(point, decoratee) {\n        if (decoratee === void 0) {\n            decoratee = {};\n        }\n        var x = point.x, y = point.y, a = this.a, b = this.b, c = this.c, d = this.d, e = this.e, f = this.f;\n        decoratee.x = x * a + y * c + e || 0;\n        decoratee.y = x * b + y * d + f || 0;\n        return decoratee;\n    };\n    return Matrix2D;\n}(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.\n// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.\n// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there\n// are transforms applied to ancestor elements.\n// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:\n//     tx = m.a * x + m.c * y + m.e\n//     ty = m.b * x + m.d * y + m.f\nfunction getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) {\n    // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.\n    if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {\n        return new Matrix2D();\n    }\n    var zeroScales = _forceNonZeroScale(element), svg = _svgOwner(element), temps = svg ? _svgTemps : _divTemps, container = _placeSiblings(element, adjustGOffset), b1 = temps[0].getBoundingClientRect(), b2 = temps[1].getBoundingClientRect(), b3 = temps[2].getBoundingClientRect(), parent = container.parentNode, isFixed = !includeScrollInFixed && _isFixed(element), m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));\n    parent.removeChild(container);\n    if (zeroScales) {\n        b1 = zeroScales.length;\n        while(b1--){\n            b2 = zeroScales[b1];\n            b2.scaleX = b2.scaleY = 0;\n            b2.renderTransform(1, b2);\n        }\n    }\n    return inverse ? m.inverse() : m;\n}\n // export function getMatrix(element) {\n // \t_doc || _setDoc(element);\n // \tlet m = (_win.getComputedStyle(element)[_transformProp] + \"\").substr(7).match(/[-.]*\\d+[.e\\-+]*\\d*[e\\-\\+]*\\d*/g),\n // \t\tis2D = m && m.length === 6;\n // \treturn !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/gsap/utils/matrix.js\n");

/***/ })

};
;